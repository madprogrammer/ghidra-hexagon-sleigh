# sleigh specification file for Qualcomm Hexagon Processor (QDSP 6)

# List of nice-to-haves in SELIGH
# arbitary bit-count sext, not just bytes
# allow sext and s>> in [] bit of constructor
# allow (a+b, a) in tokens, keep getting imm64s wrong 
# Allow setting size of local in constructor
# Fix decompiler for PTRUE

#Status:
# Disas everything up to v73, some decomp
# Switches don't work yet
 
# ALU32:  Decode up to v73, pcode up to v73 (no vec)
# CR:     Decode up to v73, pcode almost up to v73
# JR:     Decode up to v73, pcode up to v73
# J:      Decode up to v73, pcode up to v73
# LD:     Decode up to v51, pcode unfinished << wip
# MEMOP:  Decode up to v73, pcode up to v73
# NV:     Decode up to v73, pcode unfinished
# ST:     Decode up to v73, pcode unfinished
# SYSTEM: Decode up to v73, pcode unfinished
# XTYPE:  Decode up to <uncheck>, pcode unfinished << wip
# XTYPE/ALU:      Decode up to v73, pcode unfinished
# XTYPE/BIT:      Decode up to v73, pcode unfinished
# XTYPE/COMPLEX:  Decode up to v73, pcode unfinished
# XTYPE/FP:       Decode up to v73, pcode unfinished
# XTYPE/MPY:      Decode up to v73, pcode unfinished
# XTYPE/PERM:     Decode up to v73, pcode unfinished
# XTYPE/PRED:     Decode up to v73, pcode unfinished
# XTYPE/SHIFT:    Decode up to v73, pcode unfinished

define endian=little;
define alignment=4;

define space ram     type=ram_space      size=4 wordsize=1 default;
define space register type=register_space size=4;

define token instr64 (64)
    # imm64 = second word
    # immw = first word
   uimmw_hi = (16, 27)
   uimmw_lo = (0, 13)

   immw_hi = (16, 27) signed
   immw_his = (16, 27) signed
   immw_lo = (0, 13) signed
   immw_lou = (0, 13)

   parsew = (14, 15)
   parse64 = (46, 47)
   iclass64     = (60,63)
   
   imm64_27 = (59, 59)

   imm64_25_27 = (57, 59) signed
   imm64_25_27u = (57, 59)
   imm64_25_26 = (57, 58) signed
   imm64_25_26u = (57, 58)

   imm64_23_24 = (55, 56) signed
   imm64_23_27 = (55, 59) signed
   imm64_23 = (55, 55) signed

   imm64_24_27 = (56, 59) signed

   imm64_22_27 = (54, 59) signed
   imm64_22_23 = (54, 55) signed
   imm64_22_23u = (54, 55)
   
	imm64_21_27 = (53, 59)
   imm64_21_24 = (53, 56)
   imm64_21_22 = (53, 54) signed
   imm64_21 = (53, 53)

   imm64_20_21 = (52, 53) signed

	imm64_16_27 = (48, 59)
   imm64_16_22 = (48, 54) signed
   imm64_16_20 = (48, 52) signed
   imm64_16_20u = (48, 52)
   
   imm64_13 = (45, 45)

   imm64_12_13 = (44, 45) signed
   imm64_11_13 = (43, 45) signed
   imm64_8_13 = (40, 45) signed

   imm64_8u = (40, 40)

   imm64_7_12 = (39, 44) signed
   imm64_7_12u = (39, 44)
   uimm64_7_12 = (39, 44)
   imm64_7 = (39, 39) signed

   imm64_5_13 = (37, 45) signed
   imm64_5_13u = (37, 45)
   imm64_5_12 = (37, 44) signed
   imm64_5_10u = (37, 42)
   imm64_5_6 = (37, 38) signed
   
   imm64_1_6u = (33, 38)
   


   imm64_1_7 = (33, 39) signed
   imm64_1_7u = (33, 39)

   imm64_0 = (32, 32) signed
   imm64_0_6 = (32, 38) signed
   imm64_0_6u = (32, 38)
   imm64_0_5u = (32, 37)
   imm64_0_7 = (32, 39) signed

   Rs64 = (59, 59)
   MajOp64 = (56,58)

   S564 = (48,52)
   D564 = (32,36)
   D564_pair = (33,36)
   S464 = (48,51)
   T564 = (40,44)

   T2_9_10_pred_new_64 = (41,42)

   D4_16_19_64 = (48,51)
   D4_8_11_64 = (40,43)

   iclassw = (28, 31)
;

define token instr (32)
   iclass     = (28,31)

   imm_29_31 = (29, 31)


   imm_27 = (27, 27)
      imm_26 = (26, 26)
 

   imm_25_27 = (25, 27)
   imm_25_26 = (25, 26) signed
   imm_25_26u = (25, 26)

   imm_24_27 = (24, 27)

   imm_23_27 = (23, 27)
   imm_23_24 = (23, 24)
   imm_23 = (23, 23)
   imm_23u = (23, 23)

imm_22_26 = (22, 26)
   imm_22_27 = (22, 27)
   imm_22_23 = (22, 23) signed
   imm_22_23u = (22, 23)
   imm_22 = (22, 22)

   imm_21_27 = (21, 27) signed
   imm_21_24 = (21, 24)
   imm_21_23 = (21, 23)
   imm_21_23u = (21, 23) 
   imm_21_22 = (21, 22) signed
   imm_21_22u = (21, 22)
   imm_21 = (21, 21) signed

   imm_20_27 = (20, 27)
   imm_20_21 = (20, 21)
   imm_20 = (20, 20) signed

   imm_19 = (19, 19) signed

   imm_18_21 = (18, 21)
   imm_18_20 = (18, 20)
   imm_18_19 = (18, 19)
   
      imm_17_27 = (17,27)
   

   imm_16_27 = (16, 27) signed
   imm_16_25 = (16, 25) signed
   imm_16_24 = (16, 24) signed
   imm_16_24u = (16, 24)
   imm_16_23 = (16, 23)
   imm_16_22 = (16, 22)
   imm_16_21 = (16, 21)
   imm_16_20 = (16, 20)
   imm_16_20u = (16, 20)
   imm_16_19 = (16, 19)
   imm_16_18 = (16, 18)
   imm_16_17 = (16, 17)
   imm_16_17u = (16, 17)

   imm_13 = (13, 13) signed
   imm_13u = (13, 13)

   imm_12_13 = (12, 13)
   imm_12 = (12, 12)

   imm_11_13 = (11, 13) signed
   imm_11_12 = (11, 12)
   imm_11 = (11, 11)

   imm_10_13 = (10, 13)
   imm_10_12 = (10, 12)
      imm_10_11 = (10, 11)
   imm_10 = (10, 10)
   
   imm_9_13 = (9, 13)
   imm_9_11 = (9, 11)
   imm_9_10 = (9, 10)
      imm_9 = (9, 9)

   imm_8_13 = (8, 13)
   imm_8_13u = (8, 13)
   imm_8_12 = (8, 12)
   imm_8_12u = (8, 12)
      imm_8_11 = (8, 11)
      imm_8_11u = (8, 11)
      imm_8_10 = (8, 10)
      imm_8_9 = (8, 9)
   
   imm_8 = (8, 8)
   imm_8u = (8, 8)

   imm_7_13 = (7, 13)
   imm_7_12 = (7, 12)
   imm_7_12u = (7, 12)
   imm_7 = (7, 7)
   imm_7u = (7, 7)

   imm_6_7 = (6, 7)
   imm_6_13 = (6, 13)
   imm_6 = (6, 6)
   imm_6u = (6, 6)

   imm_5_13 = (5, 13) signed
   imm_5_13u = (5, 13)
   imm_5_12 = (5, 12) signed
   imm_5_12u = (5, 12)
      imm_5_11 = (5, 11)
   imm_5_10 = (5, 10)
   imm_5_10u = (5, 10)
   imm_5_9 = (5, 9)
   imm_5_8 = (5, 8) signed
   imm_5_7 = (5, 7) signed
   imm_5_7u = (5, 7)
   imm_5_6 = (5, 6)
   imm_5_6u = (5, 6)
   imm_5 = (5, 5)
   imm_5u = (5, 5)

   imm_4 = (4, 4)

   imm_3_12 = (3, 12)
   imm_3_7 = (3, 7)
   imm_3_7u = (3, 7)
   imm_3_6 = (3, 6)
   imm_3_6u = (3, 6)
   imm_3_4 = (3, 4)
   imm_3_4u = (3, 4)
   imm_3 = (3, 3)
   imm_3u = (3, 3)

   imm_2_13 = (2, 13)
   imm_2_12 = (2, 12)
   imm_2_7 = (2, 7)
   imm_2_6 = (2, 6)
   imm_2_5 = (2, 5)
   imm_2_4 = (2, 4)
   imm_2_3 = (2, 3)
   imm_2 = (2, 2)

   imm_1_13 = (1, 13) signed
   imm_1_13u = (1, 13)
   imm_1_11 = (1, 11) signed
   imm_1_7 = (1, 7)
   imm_1_7u = (1, 7)
   imm_1_6u = (1, 6)
   imm_1_2 = (1, 2)
   imm_1 = (1, 1)

   imm_0_13 = (0, 13)
   imm_0_13u = (0, 13)
  imm_0_12 = (0, 12)
   imm_0_10 = (0, 10)
   imm_0_9 = (0, 9)
   imm_0_7 = (0, 7) signed
   imm_0_7u = (0, 7)
   imm_0_6 = (0, 6)
   imm_0_6u = (0, 6)
   imm_0_5 = (0, 5)
   imm_0_5u = (0, 5)
   imm_0_4 = (0, 4)
   imm_0_4u = (0, 4)
   imm_0_2 = (0, 2)
   imm_0_1 = (0, 1)
   imm_0 = (0, 0)
   

   D4_16_19 = (16,19)
   D4_8_11 = (8,11)
   S4 = (16,19)
   S2 = (16,17)
   T2 = (8,9)
   D2 = (0,1)

   S2_pred = (16,17)
   T2_pred = (8,9)
   D2_pred = (0,1)
   D2_pred_new = (0,1)
   U2_pred_21_22 = (21,22)
   U2_pred_new_21_22 = (21,22)
   U2_pred = (8,9)
   U1_23_24_pred = (23,24)
   U2_5_6 = (5,6)
   U2_5_6_pred_new = (5,6)
   T2_11_12_pred = (11,12)
   T2_11_12_pred_new = (11,12)
   T2_9_10_pred = (9,10)
   T2_9_10_pred_new = (9,10)

   T5 = (8,12)
   T5_dup = (8,12)
   T5_pair = (9,12)
   T4_8_11 = (8,11)
   
   
   Rs = (27, 27)
   MajOp = (24,26)
   MinOp = (21,23)
   D7 = (0,7)
   D6_svctrl = (0,5)

   D5_pair = (1,4)
   D5 = (0,4)
   D5_dup = (0,4)
   D5_ctrl = (0,4)
   D5_ctrl_pair = (0,4)
   S3_new_16_18 = (16,18)

   S6_svctrl = (16,21)

   S5 = (16,20)
   S5_dup = (16,20)
   S5_pair = (17,20)
   S5_ctrl = (16,20)
   S5_ctrl_pair = (16,20)
   alu_X5 = (16,20)
   alu_X5_dup = (16,20)
   alu_X5_pair = (17,20)

   U2 = (8,9)
   U2_pred_new = (8,9)

   T3_0_2 = (0,2)
   T3_0_2_new = (0,2)
   T3_new_8_10 = (8,10)

   
   parse = (14, 15)
  	imm32 = (0, 31)
  	
  	
	immdup0_12=(12,12)
	immdup0_11_12=(11,12)
	immdup0_10_12=(10,12)
	immdup0_9=(9,9)
	immdup0_8=(8,8)
	immdup0_9_12=(9,12)
	immdup0_8_11=(8,11)
	immdup0_8_12=(8,12)
	immdup0_8_10=(8,10)
	immdup0_7_8=(7,8)
	immdup0_7=(7,7)
	immdup0_6_12=(6,12)
	immdup0_6=(6,6)
	immdup0_5_8=(5,8)
	immdup0_5_6=(5,6)
	immdup0_4_10=(4,10) signed
	immdup0_4_9=(4,9)
	immdup0_4_8=(4,8)
	immdup0_4_7=(4,7)
	immdup0_4_6=(4,6)
	immdup0_4_5=(4,5)
	immdup0_3_8=(3,8) signed
	immdup0_3_7=(3,7)
	immdup0_3_5=(3,5)
	immdup0_3_4=(3,4)
	immdup0_3=(3,3)

	immdup0_2_3=(2,3)
	immdup0_2=(2,2)
	immdup0_1_2=(1,2)
	immdup0_0_9=(0,9)
	immdup0_0_4=(0,4)
	immdup0_0_3=(0,3)
	immdup0_0_2=(0,2)
	immdup0_0_1=(0,1)

	immdup0_S4=(4,7)
	immdup0_D4=(0,3)
	immdup0_D4_pair=(0,3)
	immdup0_D3_pair=(0,2)
	
	immdup1_12=(28,28)
	immdup1_11_12=(27,28)
	immdup1_10_12=(26,28)
	immdup1_9_12=(25,28)
	immdup1_8_12=(24,28)
	immdup1_6_12=(22,28)
	immdup1_8_11=(24,27)
	immdup1_13=(29,29)
	immdup1_8_10=(24,26)
	immdup1_4_10=(20,26) signed
	immdup1_7_8=(23,24)
	immdup1_5_8=(21,24)
	immdup1_5_6=(21,22)
	immdup1_4_6=(20,22)
	immdup1_4_5=(20,21)
	immdup1_4_7=(20,23)
	immdup1_4_9=(20,25)
	immdup1_4_8=(20,24)
	immdup1_3_8=(19,24) signed
	immdup1_3_7=(19,23)
	immdup1_3_4=(19,20)
	immdup1_7=(23,23)
	immdup1_3_5=(19,21)
	immdup1_3=(19,19)
	immdup1_2=(18,18)
	immdup1_9=(25,25)
	immdup1_8=(24,24)
	immdup1_0_9=(16,25)
	immdup1_0_4=(16,20)
	immdup1_0_3=(16,19)
	immdup1_2_3=(18,19)
	immdup1_0_2=(16,18)
	immdup1_1_2=(17,18)
	immdup1_6=(22,22)
	immdup1_0_1=(16,17)

	immdup1_S4=(20,23)
	immdup1_D4=(16,19)
	immdup1_D4_pair=(16,19)
	immdup1_D3_pair=(16,18)
;

define register offset=0x200 size=4 [ 
branch_tgt
has_branch_tgt
call_tgt
has_call_tgt
ret_tgt
has_ret_tgt
];

define register offset=0x300 size=16 [ 
testctx
];

define context testctx
	immext0 = (0, 31) noflow signed
	immext1 = (32, 63) noflow signed
	hasext0 = (64,64) noflow
	hasext1 = (65,65) noflow
    immext0used = (66,66) noflow
	# opaque pred for false
	disabled = (80, 80) noflow
;	


# high dword: Left
# lo   dword: Right
define register offset=0x00 size=8 [ 
X1X0 
X3X2 
X5X4 
X7X6 
X9X8 
X11X10 
X13X12 
X15X14 
X17X16 
X19X18 
X21X20 
X23X22 
X25X24 
X27X26 
SPX28
LRFP
];

attach variables [ D5_pair D564_pair T5_pair S5_pair alu_X5_pair immdup0_D4_pair immdup1_D4_pair] [
X1X0 
X3X2 
X5X4 
X7X6 
X9X8 
X11X10 
X13X12 
X15X14 
X17X16 
X19X18 
X21X20 
X23X22 
X25X24 
X27X26 
SPX28
LRFP
];

#TODO: might be wrong
attach variables [ immdup0_D3_pair immdup1_D3_pair] [
X1X0 
X3X2 
X5X4 
X7X6 
X17X16 # correct 
X11X10 
X13X12 
X15X14 
];


define register offset=0x00 size=4 [ 
X0 
X1 
X2 
X3 
X4 
X5 
X6 
X7 
X8 
X9 
X10 
X11 
X12 
X13 
X14 
X15 
X16 
X17 
X18 
X19 
X20 
X21 
X22 
X23 
X24 
X25 
X26 
X27 
X28 
SP
FP
LR
 ];

attach variables [ D5 D5_dup D564 S5 S5_dup S564 alu_X5 alu_X5_dup T5 T5_dup T564 ] [
X0 
X1 
X2 
X3 
X4 
X5 
X6 
X7 
X8 
X9 
X10 
X11 
X12 
X13 
X14 
X15 
X16 
X17 
X18 
X19 
X20 
X21 
X22 
X23 
X24 
X25 
X26 
X27 
X28 
SP
FP
LR
];

attach variables [ S4 T4_8_11 D4_16_19 D4_8_11 D4_8_11_64 ] [
X0 
X1 
X2 
X3 
X4 
X5 
X6 
X7 
X16 
X17 
X18 
X19 
X20 
X21 
X22 
X23 
];

# TODO: add _new semantics
# TODO: what is this list, this is wrong, x4 is right
attach variables [ S3_new_16_18 ] [
X0 
X1 
X4 
X5 
X6 
X7 
X8
X9
];
# TODO: what is this list, this is wrong, x5 is right
attach variables [ T3_new_8_10 T3_0_2_new ] [
X0 
X1 
X2 
X5 
X7 
X8 
X9
X10
];

attach variables [ immdup0_D4 immdup1_D4 immdup0_S4 immdup1_S4 ] [
X0
X1
X2
X3
X4
X5
X6
X7
X16
X17
X18
X19
X20
X21
X22
X23
];

 define register offset=0x80 size=4 [ 
SA0
LC0
SA1
LC1
P30
Reserve_5
M0
M1
USR
PC
UGP
GP
CS0
CS1
UPCYCLELO
UPCYCLEHI

Reserved_16
Reserved_17
Reserved_18
Reserved_19
Reserved_20
Reserved_21
Reserved_22
Reserved_23
Reserved_24
Reserved_25
Reserved_26
Reserved_27
Reserved_28
Reserved_29
Reserved_30
Reserved_31
 ];

 
 attach variables [ D5_ctrl S5_ctrl ] [
 SA0
LC0
SA1
LC1
P30
Reserve_5
M0
M1
USR
PC
UGP
GP
CS0
CS1
UPCYCLELO
UPCYCLEHI

Reserved_16
Reserved_17
Reserved_18
Reserved_19
Reserved_20
Reserved_21
Reserved_22
Reserved_23
Reserved_24
Reserved_25
Reserved_26
Reserved_27
Reserved_28
Reserved_29
Reserved_30
Reserved_31
];

define register offset=0x100 size=1 [ 
P0
P1
P2
P3
P0.new
P1.new
P2.new
P3.new
PTRUE
];

attach variables [ U2 D2_pred U2_pred_21_22  T2_pred S2_pred U2_pred U2_5_6 U1_23_24_pred T2_11_12_pred T2_9_10_pred ] [
P0
P1
P2
P3
];



attach variables [ D2_pred_new U2_pred_new U2_pred_new_21_22 T2_9_10_pred_new T2_9_10_pred_new_64 T2_11_12_pred_new U2_5_6_pred_new ] [
P0.new
P1.new
P2.new
P3.new
];

define register offset=0x400 size=4 [ 
	SGP0
	SGP1
	STID
	ELR
	BADVA0
	BADVA1
	SSR
	CCR
	HTID
	BADVA
	IMASK
	RESERVED_11
	RESERVED_12
	RESERVED_13
	RESERVED_14
	RESERVED_15
	EVB
	MODECTL
	SYSCFG
	NULL_19
	IPEND
	VID
	IAD
	NULL_23
	IEL
	NULL_25
	IAHL
	CFGBASE
	DIAG
	REV
	PCYCLELO
	PCYCLEHI
	ISDBST
	ISDBCFG0
	ISDBCFG1
	NULL_35
	BRKPTPC0
	BRKPTCFG0
	BRKPTPC1
	BRKPTCFG1
	ISDBMBXIN
	ISDBMBXOUT
	ISDBEN
	ISDBGPR
	RESERVED_44
	RESERVED_45
	RESERVED_46
	RESERVED_47
	PMUCNT0
	PMUCNT1
	PMUCNT2
	PMUCNT3
	PMUEVTCFG
	PMUCFG
	RESERVED_54
	RESERVED_55
	RESERVED_56
	RESERVED_57
	RESERVED_58
	RESERVED_59
	RESERVED_60
	RESERVED_61
	RESERVED_62
	RESERVED_63
];


attach variables [ S6_svctrl D6_svctrl ] [
	SGP0
	SGP1
	STID
	ELR
	BADVA0
	BADVA1
	SSR
	CCR
	HTID
	BADVA
	IMASK
	RESERVED_11
	RESERVED_12
	RESERVED_13
	RESERVED_14
	RESERVED_15
	EVB
	MODECTL
	SYSCFG
	NULL_19
	IPEND
	VID
	IAD
	NULL_23
	IEL
	NULL_25
	IAHL
	CFGBASE
	DIAG
	REV
	PCYCLELO
	PCYCLEHI
	ISDBST
	ISDBCFG0
	ISDBCFG1
	NULL_35
	BRKPTPC0
	BRKPTCFG0
	BRKPTPC1
	BRKPTCFG1
	ISDBMBXIN
	ISDBMBXOUT
	ISDBEN
	ISDBGPR
	RESERVED_44
	RESERVED_45
	RESERVED_46
	RESERVED_47
	PMUCNT0
	PMUCNT1
	PMUCNT2
	PMUCNT3
	PMUEVTCFG
	PMUCFG
	RESERVED_54
	RESERVED_55
	RESERVED_56
	RESERVED_57
	RESERVED_58
	RESERVED_59
	RESERVED_60
	RESERVED_61
	RESERVED_62
	RESERVED_63
];

 define pcodeop _stub;

macro jump(dest) {
	# must take the first jump that happens (8.7)
	if(has_branch_tgt != 0) goto <nosetjmp>;
	branch_tgt= dest;
	has_branch_tgt = 1;
	<nosetjmp>
}
macro call(dest) {
	if(has_branch_tgt != 0) goto <nosetcall>;
	call_tgt= dest;
	has_call_tgt = 1;
	<nosetcall>
}
macro return() {
	if(has_ret_tgt != 0) goto <nosetret>;
	ret_tgt = LR;
	has_ret_tgt = 1;
	<nosetret>
}

 
# ALU32/ALU:add
with slot: {
	:D5" = add("S5",#"loc")" is iclass=0b1011 & S5 & D5 & imm_21_27 & imm_5_13 [loc= ((imm_21_27 << 9) | (imm_5_13));] {
	    D5 = S5 + sext(loc:2);
	} 
	:D5" = add("S5","T5")" is iclass=0b1111 & D5 & imm_21_27=0b0011000 & S5 & imm_13=0 & T5 & imm_5_7=0 {
	    D5 = S5 + T5;
	} 
	:D5" = add("S5","T5"):sat" is iclass=0b1111 & D5 & imm_21_27=0b0110010 & S5 & imm_13=0 & T5 & imm_5_7=0 {
	    D5 = S5 + T5;
	    if (D5 < S5) goto <sat>;
	    goto <end>;
	    <sat>
		D5 = -1;
	    <end>
	}
}
# const ext 
#wslot:"w add" is iclass64=0b1011 & S564 & D564 & imm64_21_27 & imm64_5_13
#{
#_stub();
#}

# ALU32/ALU:logical
with slot: iclass=0b0111 {
	:D5 = "and"(S5",#"s10) is Rs=0 & MajOp = 0b110 & imm_22_23=0b00 & imm_21 & S5 & imm_5_13 & D5 & hasext0=0 [ s10 = (imm_21 << 9) | imm_5_13;] {
		D5 = S5 & s10;
	} 
	:D5 = "and"(S5",#"s10")" is Rs=0 & MajOp = 0b110 & imm_22_23=0b00 & imm_21 & S5 & imm_5_13 & D5 & imm_5_10u & hasext0=1 & immext0used=0 & immext0 [ s10 = immext0 | imm_5_10u; immext0used=1;] {
		D5 = S5 & s10;
	} 
	:D5 = "and"(S5",#"s10")" is Rs=0 & MajOp = 0b110 & imm_22_23=0b00 & imm_21 & S5 & imm_5_13 & D5 & imm_5_10u & hasext0=1 & hasext1=1 & immext1 [ s10 = immext1 | imm_5_10u;] {
		D5 = S5 & s10;
	} 

	:D5 = "or"(S5",#"s10) is Rs=0 & MajOp = 0b110 & imm_22_23=0b10 & imm_21 & S5 & imm_5_13 & D5 [ s10 = (imm_21 << 9) | imm_5_13;] {
		D5 = S5 & s10;
	} 
}
with slot: iclass=0b1111 {
	:D5 = "and("S5","T5")" is imm_21_27=0b0001000 & S5 & imm_13=0 & T5 & imm_5_7=0 & D5 {
		D5 = S5 & T5;
	} 

	:D5 = "or("S5","T5")" is imm_21_27=0b0001001 & S5 & imm_13=0 & T5 & imm_5_7=0 & D5 {
		D5 = S5 | T5;
	} 

	:D5 = "xor("S5","T5")" is imm_21_27=0b0001011 & S5 & imm_13=0 & T5 & imm_5_7=0 & D5 {
		D5 = S5 ^ T5;
	} 

	:D5 = "and("T5",~"S5")" is imm_21_27=0b0001100 & S5 & imm_13=0 & T5 & imm_5_7=0 & D5 {
		D5 = T5 & (~S5);
	} 

	:D5 = "or("T5",~"S5")" is imm_21_27=0b0001101 & S5 & imm_13=0 & T5 & imm_5_7=0 & D5 {
		D5 = T5 | (~S5);
	} 
}
# ALU32/ALU:negate
# TODO

# ALU32/ALU:nop
with slot: iclass=0b0111 {
	:"nop" is imm_24_27=0b1111 & imm_16_23  & imm_0_13 {}
}

# ALU32/ALU:subtract
with slot: iclass=0b0111 {
	:D5"=sub("S5","v")" is imm_22_27=0b011001 & imm_21 & S5 & imm_5_13u & D5 [v = imm_5_13u | (imm_21 << 9); ] {
		D5 = v - S5;
	} 
}
with slot: iclass=0b1111 {
	:D5" = sub("T5","S5")" is imm_21_27=0b0011001 & S5 & imm_13=0 & T5 & imm_5_7=0 & D5 {
	    D5 = T5 - S5;
	} 

	:D5" = sub("T5","S5"):sat" is imm_21_27=0b0110110 & S5 & imm_13=0 & T5 & imm_5_7=0 & D5 {
	    D5 = S5 - T5;
	    if (D5 > S5) goto <sat>;
	    goto <end>;
	    <sat>
		D5 = 0;
	    <end>
	} 
}


# ALU32/ALU:sext
with slot: iclass=0b0111 {
	:D5 "=sxtb(" S5 ")" is imm_21_27=0b0000101 & S5 & imm_13=0 & imm_5_12=0 & D5 {
		D5 = sext(S5:1);
	} 
	:D5 "=sxth(" S5 ")" is imm_21_27=0b0000111 & S5 & imm_13=0 & imm_5_12=0 & D5 {
		D5 = sext(S5:2);
	} 
}

# ALU32/ALU:trans_imm
 with slot: iclass=0b0111 {
  	
	ImmU16: v is    imm_22_23u & imm_0_13u  [ v = (imm_22_23u << 14) | (imm_0_13u); ] {
		local v1:4 = v;
	 	export v1;
	  }
	  
  	TI_S16: v is    imm_22_23 & imm_16_20u & imm_5_13u  [ v = (imm_5_13u) | (imm_16_20u << 9) | (imm_22_23 << 14); ] {
		local v1:4 = v;
	 	export v1;
	  }
	  
 
	:alu_X5^".L" = ImmU16 is Rs = 0 & MajOp = 0b001 & imm_21=1 & alu_X5 & ImmU16 {
		local tmp:4 = alu_X5 & 0xFFFF0000;
		alu_X5 = tmp | ImmU16;
	}
	
	:alu_X5^".H" = ImmU16 is Rs = 0 & MajOp = 0b010 & imm_21=1 & alu_X5 & ImmU16 {
		local tmp:4 = alu_X5 & 0x0000FFFF;
		alu_X5 = tmp | (ImmU16 << 16);
	}
	
	:D5 "=" TI_S16 is  Rs = 1 & MajOp=0b000 & imm_21=0 & TI_S16 & D5 & hasext0=0 {
		D5 = TI_S16;
	}  
	:D5 "=" v is  Rs = 1 & MajOp=0b000 & imm_21=0 & TI_S16 & D5 & hasext0=1 & immext0used=0 & immext0 & imm_5_10u [ v = (imm_5_10u) | immext0; immext0used=1;] {
		D5 = v;
	}  
}
# Special case for constant extender
#wslot:"immext "D564"=#"v is immw_his & immw_lou & iclass64=0b0111 & Rs64=1 & MajOp64=0b000 & imm64_21=0 &  D564 & imm64_22_23u & imm64_16_20u & imm64_5_13u & imm64_5_10u [ v = (imm64_5_10u) | (immw_lou << 6) | (immw_his << 20); ]
#{
#    D564 = v:4;
#}

# externder placeholder
#wslot:"immextplace" is immw_hi & immw_lo & iclass64 & Rs64 & MajOp64 & imm64_21 &  D564 & imm64_22_23 & imm64_16_20 & imm64_5_13 {
#	_stub();
#	local v:4 = 0xffffffff;
#	goto [v];
#}


# ALU32/ALU:trans_reg
 with slot: iclass=0b0111 {
	:D5"="S5 is Rs = 0 & MajOp = 0b000 & MinOp=0b011 & S5 & imm_13=0 & imm_5_12=0 & D5 {
		D5 = S5;
	}
}


# ALU32/ALU:vector add hw
with slot: iclass=0b1111 {
    :="vaddh(" is imm_21_27=0b0110000 & S5 & imm_13=0 & T5 & imm_5_7=0 & D5 {
        _stub();
    }
    :="vaddhsat(" is imm_21_27=0b0110001 & S5 & imm_13=0 & T5 & imm_5_7=0 & D5 {
        _stub();
    }
    :="vadduh(" is imm_21_27=0b0110011 & S5 & imm_13=0 & T5 & imm_5_7=0 & D5 {
        _stub();
    }
}

# ALU32/ALU:vector avg hw
with slot: iclass=0b1111 {
    :="vavgh(" is imm_24_27=0b0111 & imm_23=0 & imm_21_22=0b00 & S5 & imm_13=0 & T5 & imm_5_7=0 & D5 {
        _stub();
    }
    :="vavghrnd(" is imm_24_27=0b0111 & imm_23=0 & imm_21_22=0b01 & S5 & imm_13=0 & T5 & imm_5_7=0 & D5 {
        _stub();
    }
    :="vnavgh(" is imm_24_27=0b0111 & imm_23=0 & imm_21_22=0b11 & S5 & imm_13=0 & T5 & imm_5_7=0 & D5 {
        _stub();
    }
}

# ALU32/ALU:vector sub hw
with slot: iclass=0b1111 {
    :="vsubh(" is imm_21_27=0b0110100 & S5 & imm_13=0 & T5 & imm_5_7=0 & D5 {
        _stub();
    }
    :="vsubhsat(" is imm_21_27=0b0110101 & S5 & imm_13=0 & T5 & imm_5_7=0 & D5 {
        _stub();
    }
    :="vsubuh(" is imm_21_27=0b0110111 & S5 & imm_13=0 & T5 & imm_5_7=0 & D5 {
        _stub();
    }
}

# ALU32/ALU:zext
 with slot: iclass=0b0111 {
	:D5 "=zxth(" S5 ")" is imm_21_27=0b0000110 & S5 & imm_13=0 & imm_5_12=0 & D5 {
		D5 = zext(S5:2);
	}
}

# ALU32/PERM:Combine words
with slot: iclass=0b0111 {
    :D5_pair"=combine("S5","imm_5_12")" is Rs=0 & MajOp=0b011 & imm_23=0 & imm_21_22=0b00 & S5 & imm_13=1 & imm_5_12 & D5_pair & hasext0=0 {
        local tmp1:4 = imm_5_12;
        local tmp2:8 = zext(tmp1);
        local tmp3:8 = zext(S5);
        D5_pair = (tmp3 << 32) | tmp2;
    }
    :D5_pair"=combine("S5","v")" is Rs=0 & MajOp=0b011 & imm_23=0 & imm_21_22=0b00 & S5 & imm_13=1 & imm_5_12 & D5_pair & hasext0=1 & immext0used=0 & imm_5_10u [v = imm_5_10u | immext0; immext0used=1; ]  {
        local tmp1:4 = v;
        local tmp2:8 = zext(tmp1);
        local tmp3:8 = zext(S5);
        D5_pair = (tmp3 << 32) | tmp2;
    }

    :D5_pair"=combine("imm_5_12","S5")" is Rs=0 & MajOp=0b011 & imm_23=0 & imm_21_22=0b01 & S5 & imm_13=1 & imm_5_12 & D5_pair {
        local tmp1:4 = imm_5_12;
        local tmp2:8 = zext(tmp1);
        local tmp3:8 = zext(S5);
        D5_pair = (tmp2 << 32) | tmp3;
    }
    :D5_pair"=combine(#"imm_5_12",#"S8")" is Rs=1 & MajOp=0b100 & imm_23=0 & imm_16_22 & imm_13u & imm_5_12 & D5_pair & hasext0=0 [S8 = imm_13u | (imm_16_22<<1);] {
        local tmp:4 = S8;
        local tmp1:8 = zext(tmp);
        local tmp2:4 = imm_5_12;
        local tmp3:8 = zext(tmp2);
        D5_pair = (tmp1<<32)|tmp3;
    }
    :D5_pair"=combine(#"imm_5_12",#"S8")" is Rs=1 & MajOp=0b100 & imm_23=0 & imm_16_22 & imm_13u & imm_5_12 & D5_pair & hasext0=1 & immext0used=0 & imm_16_20u & immext0 [S8 = immext0 | imm_13u | (imm_16_20u<<1); immext0used=1; ] {
        local tmp:4 = S8;
        local tmp1:8 = zext(tmp);
        local tmp2:4 = imm_5_12;
        local tmp3:8 = zext(tmp2);
        D5_pair = (tmp1<<32)|tmp3;
    }
    :D5_pair"=combine(#"imm_5_12",#"U6")" is Rs=1 & MajOp=0b100 & imm_23=1 & imm_21_22=0 & imm_16_20u & imm_13u & imm_5_12 & D5_pair [U6 = imm_13u | (imm_16_20u<<1);] {
        local tmp:4 = U6;
        local tmp1:8 = zext(tmp);
        local tmp2:4 = imm_5_12;
        local tmp3:8 = zext(tmp2);
        D5_pair = (tmp1<<32)|tmp3;
    }
}
with slot: iclass=0b1111 {
    :D5 "=combine(" T5".H" S5".H)" is Rs=0 & MajOp=0b011 & MinOp=0b100 & S5 & imm_13 & T5 & imm_5_7=0 & D5 {
        local al:2 = T5(2);
        local bl:2 = S5(2);
        local al4:4 = zext(al);
        local bl4:4 = zext(bl);
        D5 = (al4 << 16) | bl4;
    }
    :D5 "=combine(" T5".H" S5".L)" is Rs=0 & MajOp=0b101 & MinOp=0b101 & S5 & imm_13 & T5 & imm_5_7=0 & D5 {
        local al:2 = T5(2);
        local bl:2 = S5:2;
        local al4:4 = zext(al);
        local bl4:4 = zext(bl);
        D5 = (al4 << 16) | bl4;
    }
    :D5 "=combine(" T5".L" S5".H)" is Rs=0 & MajOp=0b110 & MinOp=0b110 & S5 & imm_13 & T5 & imm_5_7=0 & D5 {
        local al:2 = T5:2;
        local bl:2 = S5(2);
        local al4:4 = zext(al);
        local bl4:4 = zext(bl);
        D5 = (al4 << 16) | bl4;
    }
    :D5 "=combine(" T5".L" S5".L)" is Rs=0 & MajOp=0b011 & MinOp=0b111 & S5 & imm_13 & T5 & imm_5_7=0 & D5 {
        local al:2 = T5:2;
        local bl:2 = S5:2;
        local al4:4 = zext(al);
        local bl4:4 = zext(bl);
        D5 = (al4 << 16) | bl4;
    }
    :D5_pair"=combine("S5","T5")" is Rs=0 & MajOp=0b101 & imm_23=0 & imm_21_22=0 & S5 & imm_13 & T5 & imm_5_7=0 & D5_pair {
        local tmp:8 = zext(S5);
        D5_pair = (tmp<<32)|(zext(T5));
    }
}
    wslot:D564_pair"=combine(#"s8",#"S8")" is iclass64=0b0111 & Rs64=1 & MajOp64=0b100 & imm64_23=0 & imm64_16_22 & imm64_13 & imm64_5_12 & D564_pair & immw_his & immw_lou & imm64_5_10u  [S8 = imm64_13 | (imm64_16_22<<1); s8 = imm64_5_10u | (immw_lou << 6) | (immw_his<<20) ;] {
	local tmp:4 = S8;
	local tmp1:8 = zext(tmp);
	local tmp2:4 = s8;
	local tmp3:8 = zext(tmp2);
	D564_pair = (tmp1<<32)|tmp3;
    }

# ALU32/PERM:Mux
with slot: iclass=0b0111 {
    :D5"=mux("U2_pred_21_22","S5","imm_5_12")" is Rs=0 & MajOp=0b011 & imm_23=0 & U2_pred_21_22 & S5 & imm_13=0 & imm_5_12 & D5 {
        if(U2_pred_21_22 != 0) goto <good>;
        D5 = S5;
	goto <end>;
        <good>
        D5 = imm_5_12;
	<end>
    }
    :D5"=mux("U2_pred_21_22","imm_5_12","S5")" is Rs=0 & MajOp=0b011 & imm_23=1 & U2_pred_21_22 & S5 & imm_13=0 & imm_5_12 & D5 {
        if(U2_pred_21_22 != 0) goto <good>;
        D5 = imm_5_12;
	goto <end>;
        <good>
        D5 = S5;
	<end>
    }
    :D5"=mux("U1_23_24_pred",#"imm_5_12u",#"S8")" is Rs=1 & imm_25_26=0b01 & U1_23_24_pred & imm_16_22 & imm_13 & imm_5_12u & D5 & (hasext0=0 | immext0used=1) [ S8 = imm_13 | (imm_16_22 << 1);]{
        if(U1_23_24_pred != 0) goto <good>;
        D5 = S8;
	goto <end>;
        <good>
        D5 = imm_5_12u;
	<end>
    }
    :D5"=mux("U1_23_24_pred",#"v",#"S8")" is Rs=1 & imm_25_26=0b01 & U1_23_24_pred & imm_16_22 & imm_13 & imm_5_12u & D5 & hasext0=1 & immext0used=0 & immext0 & imm_5_10u [ S8 = imm_13 | (imm_16_22 << 1); v = imm_5_10u | immext0; immext0used=1; ]{
        if(U1_23_24_pred != 0) goto <good>;
        D5 = S8;
	goto <end>;
        <good>
        D5 = imm_5_12u;
	<end>
    }
}
with slot: iclass=0b1111 {
    :D5"=mux("U2_5_6","S5",#"T5")" is Rs=0 & MajOp=0b100 & imm_21_23 & S5 & imm_13=0 & T5 & imm_7=0 & U2_5_6 & D5 {
        if(U2_5_6 != 0) goto <good>;
        D5 = T5;
        goto <end>;
        <good>
        D5 = S5;
        goto <end>;
        <end>
    }
}

# ALU32/PERM:Shift word 16
with slot: iclass=0b0111 {
    :D5 "=aslh(" S5 ")" is Rs=0 & MajOp=0b000 & MinOp=0b000 & S5 & imm_13=0 & imm_5_12=0 & D5 {
        D5 = S5 << 16;
    }
    :D5 "=asrh(" S5 ")" is Rs=0 & MajOp=0b000 & MinOp=0b001 & S5 & imm_13=0 & imm_5_12=0 & D5 {
        D5 = S5 >> 16;
    }
}

# ALU32/PERM:Pack hi and lo hw
with slot: iclass=0b1111 {
    :D5_pair "=packhl(" S5 "," T5 ")" is Rs=0 & MajOp=0b101 & imm_23=1 & imm_21_22=0 & S5 & imm_13=0 & T5 & imm_5_7=0 & D5_pair {
        local t0:8 = zext(T5:2);
        local t1:8 = zext((T5 >> 16) & 0xFFFF);
        local s0:8 = zext(S5:2);
        local s1:8 = zext((S5 >> 16) & 0xFFFF);
        
        D5_pair = t0 | (s0 << 16) | (t1 << 32) | (s1 << 48);
    }
}

# ALU32/PRED:Compare add
with slot: iclass=0b0111 {
	with : hasext0 = 0 {
	    :"if ("U2_pred_21_22") "D5"=add("S5","imm_5_12")" is Rs=0 & MajOp=0b100 & imm_23=0 & U2_pred_21_22 & S5 & imm_13=0 & imm_5_12 & D5 {
		if(U2_pred_21_22 == 0) goto <end>;
		D5 = S5 + imm_5_12;
		<end>
		
	    }
	    :"if ("U2_pred_new_21_22") "D5"=add("S5","imm_5_12")" is Rs=0 & MajOp=0b100 & imm_23=0 & U2_pred_new_21_22 & S5 & imm_13=1 & imm_5_12 & D5 {
		if(U2_pred_new_21_22 == 0) goto <end>;
		D5 = S5 + imm_5_12;
		<end>
	    }
	    :"if (!"U2_pred_21_22") "D5"=add("S5","imm_5_12")" is Rs=0 & MajOp=0b100 & imm_23=1 & U2_pred_21_22 & S5 & imm_13=0 & imm_5_12 & D5 {
		if(U2_pred_21_22 != 0) goto <end>;
		D5 = S5 + imm_5_12;
		<end>
	    }
	    :"if (!"U2_pred_new_21_22") "D5"=add("S5","imm_5_12")" is Rs=0 & MajOp=0b100 & imm_23=1 & U2_pred_new_21_22 & S5 & imm_13=1 & imm_5_12 & D5 {
		if(U2_pred_new_21_22 != 0) goto <end>;
		D5 = S5 + imm_5_12;
		<end>
	    }
	}
	with : hasext0 = 1 & hasext1 = 0{
	    :"if ("U2_pred_21_22") "D5"=add("S5","v")" is Rs=0 & MajOp=0b100 & imm_23=0 & U2_pred_21_22 & S5 & imm_13=0 & imm_5_12 & D5 & immext0 & imm_5_10u [ v = imm_5_10u | immext0;] {
		if(U2_pred_21_22 == 0) goto <end>;
		D5 = S5 + v;
		<end>
		
	    }
	    :"if ("U2_pred_new_21_22") "D5"=add("S5","v")" is Rs=0 & MajOp=0b100 & imm_23=0 & U2_pred_new_21_22 & S5 & imm_13=1 & imm_5_12 & D5 & immext0 & imm_5_10u [ v = imm_5_10u | immext0;]{
		if(U2_pred_new_21_22 == 0) goto <end>;
		D5 = S5 + v;
		<end>
	    }
	    :"if (!"U2_pred_21_22") "D5"=add("S5","v")" is Rs=0 & MajOp=0b100 & imm_23=1 & U2_pred_21_22 & S5 & imm_13=0 & imm_5_12 & D5 & immext0 & imm_5_10u [ v = imm_5_10u | immext0;]{
		if(U2_pred_21_22 != 0) goto <end>;
		D5 = S5 + v;
		<end>
	    }
	    :"if (!"U2_pred_new_21_22") "D5"=add("S5","v")" is Rs=0 & MajOp=0b100 & imm_23=1 & U2_pred_new_21_22 & S5 & imm_13=1 & imm_5_12 & D5 & immext0 & imm_5_10u [ v = imm_5_10u | immext0;]{
		if(U2_pred_new_21_22 != 0) goto <end>;
		D5 = S5 + v;
		<end>
	    }
	}
}
with slot: iclass=0b1111 {
    :"if(" U2_5_6 ") " D5 "=add(" S5 "," T5 ")" is Rs=1 & MajOp=0b011 & imm_23=0 & imm_21=0 & imm_21=0 & S5 & imm_13=0 & T5 & imm_7=0 & U2_5_6 & D5 {
		if(U2_5_6 == 0) goto <end>;
		D5 = S5 + T5;
		<end>
    }
    :"if(!" U2_5_6 ") " D5 "=add(" S5 "," T5 ")" is Rs=1 & MajOp=0b011 & imm_23=0 & imm_21=0 & imm_21=0 & S5 & imm_13=0 & T5 & imm_7=1 & U2_5_6 & D5 {
		if(U2_5_6 != 0) goto <end>;
		D5 = S5 + T5;
		<end>
    }
    :"if(" U2_5_6_pred_new ") " D5 "=add(" S5 "," T5 ")" is Rs=1 & MajOp=0b011 & imm_23=0 & imm_21=0 & imm_21=0 & S5 & imm_13=1 & T5 & imm_7=0 & U2_5_6_pred_new & D5 {
		if(U2_5_6_pred_new == 0) goto <end>;
		D5 = S5 + T5;
		<end>
    }
    :"if(!" U2_5_6_pred_new ") " D5 "=add(" S5 "," T5 ")" is Rs=1 & MajOp=0b011 & imm_23=0 & imm_21=0 & imm_21=0 & S5 & imm_13=1 & T5 & imm_7=1 & U2_5_6_pred_new & D5 {
		if(U2_5_6_pred_new != 0) goto <end>;
		D5 = S5 + T5;
		<end>
    }
}

# ALU32/PRED:Cond shift hw
with slot: iclass=0b0111 {
    :D5="cshw0(" is Rs=0 & MajOp=0b000 & MinOp=0b000 & S5 & imm_13=1 & imm_0_12 & imm_10_11=0b00 & imm_8_9 & imm_5_7=0 & D5 {
        _stub();
    }
    :D5="cshw1(" is Rs=0 & MajOp=0b000 & MinOp=0b000 & S5 & imm_13=1 & imm_0_12 & imm_10_11=0b01 & imm_8_9 & imm_5_7=0 & D5 {
        _stub();
    }
    :D5="cshw2(" is Rs=0 & MajOp=0b000 & MinOp=0b000 & S5 & imm_13=1 & imm_0_12 & imm_10_11=0b10 & imm_8_9 & imm_5_7=0 & D5 {
        _stub();
    }
    :D5="cshw3(" is Rs=0 & MajOp=0b000 & MinOp=0b000 & S5 & imm_13=1 & imm_0_12 & imm_10_11=0b11 & imm_8_9 & imm_5_7=0 & D5 {
        _stub();
    }

    :D5="cshw4(" is Rs=0 & MajOp=0b000 & MinOp=0b001 & S5 & imm_13=1 & imm_0_12 & imm_10_11=0b00 & imm_8_9 & imm_5_7=0 & D5 {
        _stub();
    }
    :D5="cshw5(" is Rs=0 & MajOp=0b000 & MinOp=0b001 & S5 & imm_13=1 & imm_0_12 & imm_10_11=0b01 & imm_8_9 & imm_5_7=0 & D5 {
        _stub();
    }
    :D5="cshw6(" is Rs=0 & MajOp=0b000 & MinOp=0b001 & S5 & imm_13=1 & imm_0_12 & imm_10_11=0b10 & imm_8_9 & imm_5_7=0 & D5 {
        _stub();
    }
    :D5="cshw7(" is Rs=0 & MajOp=0b000 & MinOp=0b001 & S5 & imm_13=1 & imm_0_12 & imm_10_11=0b11 & imm_8_9 & imm_5_7=0 & D5 {
        _stub();
    }
}

# ALU32/PRED:Cond comb
with slot: iclass=0b1111 {
    :"if(" U2_5_6 ")" D5_pair "=combine(" S5 "," T5 ")" is Rs=1 & MajOp=0b101 & MinOp=0b000 & S5 & imm_13=0 & T5 & imm_7=0 & U2_5_6 & D5_pair {
    	if(U2_5_6 == 0) goto <end>;
	local tmp:8 = zext(S5);
	D5_pair = (tmp << 32) | zext(T5);
	<end>
    }
    :"if(!" U2_5_6 ")" D5_pair "=combine(" S5 "," T5 ")" is Rs=1 & MajOp=0b101 & MinOp=0b000 & S5 & imm_13=0 & T5 & imm_7=1 & U2_5_6 & D5_pair {
    	if(U2_5_6 != 0) goto <end>;
	local tmp:8 = zext(S5);
	D5_pair = (tmp << 32) | zext(T5);
	<end>
    }
    :"if(" U2_5_6_pred_new ")" D5_pair "=combine(" S5 "," T5 ")" is Rs=1 & MajOp=0b101 & MinOp=0b000 & S5 & imm_13=1 & T5 & imm_7=0 & U2_5_6_pred_new & D5_pair {
    	if(U2_5_6_pred_new == 0) goto <end>;
	local tmp:8 = zext(S5);
	D5_pair = (tmp << 32) | zext(T5);
	<end>
    }
    :"if(!" U2_5_6_pred_new ")" D5_pair "=combine(" S5 "," T5 ")" is Rs=1 & MajOp=0b101 & MinOp=0b000 & S5 & imm_13=1 & T5 & imm_7=1 & U2_5_6_pred_new & D5_pair {
    	if(U2_5_6_pred_new != 0) goto <end>;
	local tmp:8 = zext(S5);
	D5_pair = (tmp << 32) | zext(T5);
	<end>
    }
}
# ALU32/PRED:Cond logical
with slot: iclass=0b1111 {
    :"if(" U2_5_6 ") " D5 "=and(" S5 "," T5 ")" is Rs=1 & MajOp=0b001 & imm_23=0 & imm_21_22=0b00 & S5 & imm_13=0 & T5 & imm_7=0 & U2_5_6 & D5 {
    	if(U2_5_6 == 0) goto <end>;
	D5 = S5 & T5;
	<end>
    }
    :"if(!" U2_5_6 ") " D5 "=and(" S5 "," T5 ")" is Rs=1 & MajOp=0b001 & imm_23=0 & imm_21_22=0b00 & S5 & imm_13=0 & T5 & imm_7=1 & U2_5_6 & D5 {
    	if(U2_5_6 != 0) goto <end>;
	D5 = S5 & T5;
	<end>
    }
    :"if(" U2_5_6_pred_new ") " D5 "=and(" S5 "," T5 ")" is Rs=1 & MajOp=0b001 & imm_23=0 & imm_21_22=0b00 & S5 & imm_13=1 & T5 & imm_7=0 & U2_5_6_pred_new & D5 {
    	if(U2_5_6_pred_new == 0) goto <end>;
	D5 = S5 & T5;
	<end>
    }
    :"if(!" U2_5_6_pred_new ") " D5 "=and(" S5 "," T5 ")" is Rs=1 & MajOp=0b001 & imm_23=0 & imm_21_22=0b00 & S5 & imm_13=1 & T5 & imm_7=1 & U2_5_6_pred_new & D5 {
    	if(U2_5_6_pred_new != 0) goto <end>;
	D5 = S5 & T5;
	<end>
    }

    :"if(" U2_5_6 ") " D5 "=or(" S5 "," T5 ")" is Rs=1 & MajOp=0b001 & imm_23=0 & imm_21_22=0b01 & S5 & imm_13=0 & T5 & imm_7=0 & U2_5_6 & D5 {
    	if(U2_5_6 == 0) goto <end>;
	D5 = S5 | T5;
	<end>
    }
    :"if(!" U2_5_6 ") " D5 "=or(" S5 "," T5 ")" is Rs=1 & MajOp=0b001 & imm_23=0 & imm_21_22=0b01 & S5 & imm_13=0 & T5 & imm_7=1 & U2_5_6 & D5 {
    	if(U2_5_6 != 0) goto <end>;
	D5 = S5 | T5;
	<end>
    }
    :"if(" U2_5_6_pred_new ") " D5 "=or(" S5 "," T5 ")" is Rs=1 & MajOp=0b001 & imm_23=0 & imm_21_22=0b01 & S5 & imm_13=1 & T5 & imm_7=0 & U2_5_6_pred_new & D5 {
    	if(U2_5_6_pred_new == 0) goto <end>;
	D5 = S5 | T5;
	<end>
    }
    :"if(!" U2_5_6_pred_new ") " D5 "=or(" S5 "," T5 ")" is Rs=1 & MajOp=0b001 & imm_23=0 & imm_21_22=0b01 & S5 & imm_13=1 & T5 & imm_7=1 & U2_5_6_pred_new & D5 {
    	if(U2_5_6_pred_new != 0) goto <end>;
	D5 = S5 | T5;
	<end>
    }

    :"if(" U2_5_6 ") " D5 "=xor(" S5 "," T5 ")" is Rs=1 & MajOp=0b001 & imm_23=0 & imm_21_22=0b11 & S5 & imm_13=0 & T5 & imm_7=0 & U2_5_6 & D5 {
    	if(U2_5_6 == 0) goto <end>;
	D5 = S5 ^ T5;
	<end>
    }
    :"if(!" U2_5_6 ") " D5 "=xor(" S5 "," T5 ")" is Rs=1 & MajOp=0b001 & imm_23=0 & imm_21_22=0b11 & S5 & imm_13=0 & T5 & imm_7=1 & U2_5_6 & D5 {
    	if(U2_5_6 != 0) goto <end>;
	D5 = S5 ^ T5;
	<end>
    }
    :"if(" U2_5_6_pred_new ") " D5 "=xor(" S5 "," T5 ")" is Rs=1 & MajOp=0b001 & imm_23=0 & imm_21_22=0b11 & S5 & imm_13=1 & T5 & imm_7=0 & U2_5_6_pred_new & D5 {
    	if(U2_5_6_pred_new == 0) goto <end>;
	D5 = S5 ^ T5;
	<end>
    }
    :"if(!" U2_5_6_pred_new ") " D5 "=xor(" S5 "," T5 ")" is Rs=1 & MajOp=0b001 & imm_23=0 & imm_21_22=0b11 & S5 & imm_13=1 & T5 & imm_7=1 & U2_5_6_pred_new & D5 {
    	if(U2_5_6_pred_new != 0) goto <end>;
	D5 = S5 ^ T5;
	<end>
    }
}
# ALU32/PRED:Cond sub
with slot: iclass=0b1111 {
    :"if(" U2_5_6 ") " D5 "=sub(" S5 "," T5 ")" is Rs=1 & MajOp=0b011 & imm_23=0 & imm_22=0 & imm_21=1 & S5 & imm_13=0 & T5 & imm_7=0 & U2_5_6 & D5 {
    	if(U2_5_6 == 0) goto <end>;
	D5 = S5 - T5;
	<end>
    }
    :"if(!" U2_5_6 ") " D5 "=sub(" S5 "," T5 ")" is Rs=1 & MajOp=0b011 & imm_23=0 & imm_22=0 & imm_21=1 & S5 & imm_13=0 & T5 & imm_7=1 & U2_5_6 & D5 {
    	if(U2_5_6 != 0) goto <end>;
	D5 = S5 - T5;
	<end>
    }
    :"if(" U2_5_6_pred_new ") " D5 "=sub(" S5 "," T5 ")" is Rs=1 & MajOp=0b011 & imm_23=0 & imm_22=0 & imm_21=1 & S5 & imm_13=1 & T5 & imm_7=0 & U2_5_6_pred_new & D5 {
    	if(U2_5_6_pred_new == 0) goto <end>;
	D5 = S5 - T5;
	<end>
    }
    :"if(!" U2_5_6_pred_new ") " D5 "=sub(" S5 "," T5 ")" is Rs=1 & MajOp=0b011 & imm_23=0 & imm_22=0 & imm_21=1 & S5 & imm_13=1 & T5 & imm_7=1 & U2_5_6_pred_new & D5 {
    	if(U2_5_6_pred_new != 0) goto <end>;
	D5 = S5 - T5;
	<end>
    }
}

# ALU32/PRED:sext
with slot: iclass=0b0111 {
    :"if(" U2_pred ") " D5 "=sxtb(" S5 ")" is imm_21_27=0b0000101 & S5 & imm_13=1 & imm_12=0 & imm_10_11=0b00 & U2_pred & imm_5_7=0 & D5 {
    	if(U2_pred == 0) goto <end>;
	D5 = sext(S5:1);
	<end>
    }
    :"if(" U2_pred_new ") " D5 "=sxtb(" S5 ")" is imm_21_27=0b0000101 & S5 & imm_13=1 & imm_12=0 & imm_10_11=0b01 & U2_pred_new & imm_5_7=0 & D5 {
    	if(U2_pred_new == 0) goto <end>;
	D5 = sext(S5:1);
	<end>
    }
    :"if(!" U2_pred ") " D5 "=sxtb(" S5 ")" is imm_21_27=0b0000101 & S5 & imm_13=1 & imm_12=0 & imm_10_11=0b10 & U2_pred & imm_5_7=0 & D5 {
    	if(U2_pred != 0) goto <end>;
	D5 = sext(S5:1);
	<end>
    }
    :"if(!" U2_pred_new ") " D5 "=sxtb(" S5 ")" is imm_21_27=0b0000101 & S5 & imm_13=1 & imm_12=0 & imm_10_11=0b11 & U2_pred_new & imm_5_7=0 & D5 {
    	if(U2_pred_new != 0) goto <end>;
	D5 = sext(S5:1);
	<end>
    }

    :"if(" U2_pred ") " D5 "=sxth(" S5 ")" is imm_21_27=0b0000111 & S5 & imm_13=1 & imm_12=0 & imm_10_11=0b00 & U2_pred & imm_5_7=0 & D5 {
    	if(U2_pred == 0) goto <end>;
	D5 = sext(S5:2);
	<end>
    }
    :"if(" U2_pred_new ") " D5 "=sxth(" S5 ")" is imm_21_27=0b0000111 & S5 & imm_13=1 & imm_12=0 & imm_10_11=0b01 & U2_pred_new & imm_5_7=0 & D5 {
    	if(U2_pred_new == 0) goto <end>;
	D5 = sext(S5:2);
	<end>
    }
    :"if(!" U2_pred ") " D5 "=sxth(" S5 ")" is imm_21_27=0b0000111 & S5 & imm_13=1 & imm_12=0 & imm_10_11=0b10 & U2_pred & imm_5_7=0 & D5 {
    	if(U2_pred != 0) goto <end>;
	D5 = sext(S5:2);
	<end>
    }
    :"if(!" U2_pred_new ") " D5 "=sxth(" S5 ")" is imm_21_27=0b0000111 & S5 & imm_13=1 & imm_12=0 & imm_10_11=0b11 & U2_pred_new & imm_5_7=0 & D5 {
    	if(U2_pred_new != 0) goto <end>;
	D5 = sext(S5:2);
	<end>
    }
}

# ALU32/PRED:trans
with slot: iclass=0b0111 {
    :"if("U2_pred_21_22") "D5"="s12 is imm_23_27=0b11100 & U2_pred_21_22 & imm_20=0 & imm_16_19 & imm_13=0 & imm_5_12u & D5 & (hasext0=0 | immext0used=1) [ s12 = imm_5_12u | (imm_16_19 << 8);] {
        if(U2_pred_21_22 == 0) goto <end>;
        D5 = s12;
        <end>
    }
    :"if("U2_pred_21_22") "D5"="s12 is imm_23_27=0b11100 & U2_pred_21_22 & imm_20=0 & imm_16_19 & imm_13=0 & imm_5_12u & D5 & hasext0=1 & immext0used=0 & imm_5_10u[ s12 = imm_5_10u | immext0; immext0used=1; ] {
        if(U2_pred_21_22 == 0) goto <end>;
        D5 = s12;
        <end>
    }

    :"if("U2_pred_new_21_22") "D5"="s12 is imm_23_27=0b11100 & U2_pred_new_21_22 & imm_20=0 & imm_16_19 & imm_13=1 & imm_5_12u & D5 & (hasext0=0 | immext0used=1)[ s12 = imm_5_12u | (imm_16_19 << 8);]{
        if(U2_pred_new_21_22 == 0) goto <end>;
        D5 = s12;
        <end>
    }
    :"if("U2_pred_new_21_22") "D5"="s12 is imm_23_27=0b11100 & U2_pred_new_21_22 & imm_20=0 & imm_16_19 & imm_13=1 & imm_5_12u & D5 & hasext0=1 & immext0used=0 & immext0 & imm_5_10u[ s12 = imm_5_10u | immext0; immext0used=1;]{
        if(U2_pred_new_21_22 == 0) goto <end>;
        D5 = s12;
        <end>
    }

    :"if(!"U2_pred_21_22") "D5"="s12 is  imm_23_27=0b11101 & U2_pred_21_22 & imm_20=0 & imm_16_19 & imm_13=0 & imm_5_12u & D5 & (hasext0=0 | immext0used=1) [ s12 = imm_5_12u | (imm_16_19 << 8);]{
        if(U2_pred_21_22 != 0) goto <end>;
        D5 = s12;
        <end>
    }
    :"if(!"U2_pred_21_22") "D5"="s12 is  imm_23_27=0b11101 & U2_pred_21_22 & imm_20=0 & imm_16_19 & imm_13=0 & imm_5_12u & D5 & hasext0=1 & immext0used=0 & immext0 & imm_5_10u [ s12 = imm_5_10u | immext0; immext0used = 1;]{
        if(U2_pred_21_22 != 0) goto <end>;
        D5 = s12;
        <end>
    }
    :"if(!"U2_pred_new_21_22") "D5"="s12 is imm_23_27=0b11101 & U2_pred_new_21_22 & imm_20=0 & imm_16_19 & imm_13=1 & imm_5_12u & D5 [ s12 = imm_5_12u | (imm_16_19 << 8);]{
        if(U2_pred_new_21_22 != 0) goto <end>;
        D5 = s12;
        <end>
    }
}

# ALU32/PRED:zext
with slot: iclass=0b0111 {
    :"if(" U2_pred ") " D5 "=zxtb(" S5 ")" is imm_21_27=0b0000100 & S5 & imm_13=1 & imm_12=0 & imm_10_11=0b00 & U2_pred & imm_5_7=0 & D5 {
    	if(U2_pred == 0) goto <end>;
	D5 = zext(S5:1);
	<end>
    }
    :"if(" U2_pred_new ") " D5 "=zxtb(" S5 ")" is imm_21_27=0b0000100 & S5 & imm_13=1 & imm_12=0 & imm_10_11=0b01 & U2_pred_new & imm_5_7=0 & D5 {
    	if(U2_pred_new == 0) goto <end>;
	D5 = zext(S5:1);
	<end>
    }
    :"if(!" U2_pred ") " D5 "=zxtb(" S5 ")" is imm_21_27=0b0000100 & S5 & imm_13=1 & imm_12=0 & imm_10_11=0b10 & U2_pred & imm_5_7=0 & D5 {
    	if(U2_pred != 0) goto <end>;
	D5 = zext(S5:1);
	<end>
    }
    :"if(!" U2_pred_new ") " D5 "=zxtb(" S5 ")" is imm_21_27=0b0000100 & S5 & imm_13=1 & imm_12=0 & imm_10_11=0b11 & U2_pred_new & imm_5_7=0 & D5 {
    	if(U2_pred_new != 0) goto <end>;
	D5 = zext(S5:1);
	<end>
    }

    :"if(" U2_pred ") " D5 "=zxth(" S5 ")" is imm_21_27=0b0000110 & S5 & imm_13=1 & imm_12=0 & imm_10_11=0b00 & U2_pred & imm_5_7=0 & D5 {
    	if(U2_pred == 0) goto <end>;
	D5 = zext(S5:2);
	<end>
    }
    :"if(" U2_pred_new ") " D5 "=zxth(" S5 ")" is imm_21_27=0b0000110 & S5 & imm_13=1 & imm_12=0 & imm_10_11=0b01 & U2_pred_new & imm_5_7=0 & D5 {
    	if(U2_pred_new == 0) goto <end>;
	D5 = zext(S5:2);
	<end>
    }
    :"if(!" U2_pred ") " D5 "=zxth(" S5 ")" is imm_21_27=0b0000110 & S5 & imm_13=1 & imm_12=0 & imm_10_11=0b10 & U2_pred & imm_5_7=0 & D5 {
    	if(U2_pred != 0) goto <end>;
	D5 = zext(S5:2);
	<end>
    }
    :"if(!" U2_pred_new ") " D5 "=zxth(" S5 ")" is imm_21_27=0b0000110 & S5 & imm_13=1 & imm_12=0 & imm_10_11=0b11 & U2_pred_new & imm_5_7=0 & D5 {
    	if(U2_pred_new != 0) goto <end>;
	D5 = zext(S5:2);
	<end>
    }
}

# ALU32/PRED:cmp
 with slot: iclass=0b0111 {
    # Compare
	:D2_pred_new "=cmp.eq("S5", "s10")" is Rs = 0 & MajOp=0b101 & imm_22_23=0b00 & imm_21 & S5 & imm_5_13u & imm_2_4=0b000 & D2_pred_new & (hasext0=0 | immext0used=1) [s10 = imm_5_13u | (imm_21 << 9);] {
        if( S5 == s10) goto <good>;
        D2_pred_new = 0;
        goto <end>;
        <good>
        D2_pred_new = PTRUE;
        <end>
	}  
	:D2_pred_new "=cmp.eq("S5", "s10")" is Rs = 0 & MajOp=0b101 & imm_22_23=0b00 & imm_21 & S5 & imm_5_13u & imm_2_4=0b000 & D2_pred_new & hasext0=1 & immext0used=0 & immext0 & imm_5_10u [s10 = imm_5_10u | immext0; immext0used=1; ] {
        if( S5 == s10) goto <good>;
        D2_pred_new = 0;
        goto <end>;
        <good>
        D2_pred_new = PTRUE;
        <end>
	}  

	:D2_pred_new "=!cmp.eq("S5", "s10")"is Rs = 0 & MajOp=0b101 & imm_22_23=0b00 & imm_21 & S5 & imm_5_13 & imm_2_4=0b100 & D2_pred_new [s10 = imm_5_13 | (imm_21 << 9);]{
        if( S5 != s10) goto <good>;
        D2_pred_new = 0;
        goto <end>;
        <good>
        D2_pred_new = PTRUE;
        <end>
	}  
	:D2_pred_new "=cmp.gt("S5", "s10")" is Rs = 0 & MajOp=0b101 & imm_22_23=0b01 & imm_21 & S5 & imm_5_13 & imm_2_4=0b000 & D2_pred_new [s10 = imm_5_13 | (imm_21 << 9);]{
        if( S5 s> s10) goto <good>;
        D2_pred_new = 0;
        goto <end>;
        <good>
        D2_pred_new = PTRUE;
        <end>
	}  
	:D2_pred_new "=!cmp.gt("S5", "s10")" is Rs = 0 & MajOp=0b101 & imm_22_23=0b01 & imm_21 & S5 & imm_5_13 & imm_2_4=0b100 & D2_pred_new [s10 = imm_5_13 | (imm_21 << 9);]{
        if( S5 s<= s10) goto <good>;
        D2_pred_new = 0;
        goto <end>;
        <good>
        D2_pred_new = PTRUE;
        <end>
	}  
	:D2_pred_new "=cmp.gtu("S5", "imm_5_13")" is Rs = 0 & MajOp=0b101 & imm_21_23=0b100 & S5 & imm_5_13 & imm_2_4=0b000 & D2_pred_new {
        if( S5 > imm_5_13) goto <good>;
        D2_pred_new = 0;
        goto <end>;
        <good>
        D2_pred_new = PTRUE;
        <end>
	}  
	:D2_pred_new "=cmp.gtu("S5", "imm_5_13")" is Rs = 0 & MajOp=0b101 & imm_21_23=0b100 & S5 & imm_5_13 & imm_2_4=0b100 & D2_pred_new {
        if( S5 <= imm_5_13) goto <good>;
        D2_pred_new = 0;
        goto <end>;
        <good>
        D2_pred_new = PTRUE;
        <end>
	}  
}
with slot: iclass=0b1111 {

	:D2_pred_new "=cmp.eq("S5","T5")" is Rs = 0 & MajOp=0b010 & imm_23=0 & imm_21_22=0b00 & S5 & imm_13=0 & T5 & imm_5_7=0 & imm_2_4=0b000 & D2_pred_new {
        if( S5 == T5) goto <good>;
        D2_pred_new = 0;
        goto <end>;
        <good>
        D2_pred_new = PTRUE;
        <end>
	}  
	:D2_pred_new "=!cmp.eq("S5","T5")" is Rs = 0 & MajOp=0b010 & imm_23=0 & imm_21_22=0b00 & S5 & imm_13=0 & T5 & imm_5_7=0 & imm_2_4=0b100 & D2_pred_new {
        if( S5 != T5) goto <good>;
        D2_pred_new = 0;
        goto <end>;
        <good>
        D2_pred_new = PTRUE;
        <end>
	}  
	:D2_pred_new "=cmp.gt("S5","T5")" is Rs = 0 & MajOp=0b010 & imm_23=0 & imm_21_22=0b10 & S5 & imm_13=0 & T5 & imm_5_7=0 & imm_2_4=0b000 & D2_pred_new {
        if( S5 s> T5) goto <good>;
        D2_pred_new = 0;
        goto <end>;
        <good>
        D2_pred_new = PTRUE;
        <end>
	}  
	:D2_pred_new "=cmp.gt("S5","T5")" is Rs = 0 & MajOp=0b010 & imm_23=0 & imm_21_22=0b10 & S5 & imm_13=0 & T5 & imm_5_7=0 & imm_2_4=0b100 & D2_pred_new {
        if( S5 s<= T5) goto <good>;
        D2_pred_new = 0;
        goto <end>;
        <good>
        D2_pred_new = PTRUE;
        <end>
	}  

	:D2_pred_new "=cmp.gtu("S5","T5")" is Rs = 0 & MajOp=0b010 & imm_23=0 & imm_21_22=0b11 & S5 & imm_13=0 & T5 & imm_5_7=0 & imm_2_4=0b000 & D2_pred_new {
        if( S5 > T5) goto <good>;
        D2_pred_new = 0;
        goto <end>;
        <good>
        D2_pred_new = PTRUE;
        <end>
	}  

	:D2_pred_new "=!cmp.gtu("S5","T5")" is Rs = 0 & MajOp=0b010 & imm_23=0 & imm_21_22=0b11 & S5 & imm_13=0 & T5 & imm_5_7=0 & imm_2_4=0b100 & D2_pred_new {
        if( S5 <= T5) goto <good>;
        D2_pred_new = 0;
        goto <end>;
        <good>
        D2_pred_new = PTRUE;
        <end>
	}  

}

# ALU32/PRED:cmp gen
with slot: iclass=0b0111 {
    :D5 "=cmp.eq(" S5 "," imm_5_12 ")" is imm_24_27=0b0011 & imm_23=0 & imm_21_22=0b10 & S5 & imm_13=1 & imm_5_12 & D5 {
    	D5 = zext(S5 == imm_5_12);
    }
    :D5 "=!cmp.eq(" S5 "," imm_5_12 ")" is imm_24_27=0b0011 & imm_23=0 & imm_21_22=0b11 & S5 & imm_13=1 & imm_5_12 & D5 {
    	D5 = zext(S5 != imm_5_12);
    }
}
with slot: iclass=0b1111 {
    :D5 "=cmp.eq(" S5 "," T5 ")" is imm_21_27=0b0011010 & S5 & imm_13=0 & T5 & imm_5_7=0 & D5 {
    	D5 = zext(S5 == T5);
    }
    :D5 "=!cmp.eq(" S5 "," T5 ")" is imm_21_27=0b0011011 & S5 & imm_13=0 & T5 & imm_5_7=0 & D5 {
    	D5 = zext(S5 != T5);
    }
}

# CR:end loop - not actually any ops
# CR: Corner detection
with slot: iclass=0b0110 {
    :"fastcorner9" is imm_20_27=0b10110000 & imm_18_19=0b00 & S2 & imm_13=1 & imm_10_12=0b000 & T2 & imm_7=1 & imm_5_6=0b00 & imm_4=1 & imm_2_3=0b00 & D2 {
        _stub();
    }
    :"!fastcorner9" is imm_20_27=0b10110001 & imm_18_19=0b00 & S2 & imm_13=1 & imm_10_12=0b000 & T2 & imm_7=1 & imm_5_6=0b00 & imm_4=1 & imm_2_3=0b00 & D2 {
        _stub();
    }
}
# CR: Logical reduction
with slot: iclass=0b0110 {
    :"all8" is imm_20_27=0b10111000 & imm_18_19=0b00 & S2 & imm_13=0 & imm_2_12=0 & D2 {
        _stub();
    }
    :"any8" is imm_20_27=0b10111010 & imm_18_19=0b00 & S2 & imm_13=0 & imm_2_12=0 & D2 {
        _stub();
    }
}

# CR: Looops
#TODO: need analyser for these
with slot: iclass=0b0110 {
    :"loop0("tmp","S5")" is imm_21_27=0b0000000 & S5 & imm_13=0 & imm_8_12 & imm_5_7=0 & imm_3_4u & imm_0_2=0 [ tmp = inst_start + ((((imm_3_4u) | (imm_8_12 << 2))<<2) & (~3)); ] {
        SA0 = tmp;
        LC0 = S5;
        USR = USR & (~(3 << 8));
        
    }
    :"loop1("tmp","S5")" is imm_21_27=0b0000001 & S5 & imm_13=0 & imm_8_12 & imm_5_7=0 & imm_3_4u & imm_0_2=0 [  tmp = inst_start + ((((imm_3_4u) | (imm_8_12 << 2))<<2) & (~3)); ]{
        SA1 = tmp;
        LC1 = S5;
    }
    :"loop0("tmp","u10")" is imm_21_27=0b1001000 & imm_16_20 & imm_13=0 & imm_8_12 & imm_5_7 & imm_3_4u & imm_2=0 & imm_0_1 [ tmp = inst_start + ((((imm_3_4u) | (imm_8_12 << 2))<<2) & (~3)); u10 = imm_0_1 | (imm_5_7 << 2) | (imm_16_20 << 5);]{
        SA0 = tmp;
        LC0 = u10;
        USR = USR & (~(3 << 8));
    }
    :"loop1("tmp","u10")" is imm_21_27=0b1001001 & imm_16_20 & imm_13=0 & imm_8_12 & imm_5_7 & imm_3_4u & imm_2=0 & imm_0_1  [ tmp = inst_start + ((((imm_3_4u) | (imm_8_12 << 2))<<2) & (~3));  u10 = imm_0_1 | (imm_5_7 << 2) | (imm_16_20 << 5);]{
        SA1 = tmp;
        LC1 = u10;
    }
}

# CR:Pc add
with slot: iclass=0b0110 {
    :D5"=add(pc,"imm_7_12")" is imm_16_27=0b101001001001 & imm_13=0 & imm_7_12 & imm_5_6=0 & D5 & hasext0=0 {
        D5 = inst_start + imm_7_12;
    }
    :D5"=add(pc,"v")" is imm_16_27=0b101001001001 & imm_13=0 & imm_7_12u & imm_5_6=0 & D5 & hasext0=1 & immext0used=0 & immext0 [ v = imm_7_12u | immext0; immext0used=1; ] {
        D5 = inst_start + v;
    }
}
# const ext 
#wslot:D564"=add(pc,#"v")" is uimmw_hi & uimmw_lo & iclass64=0b0110  & imm64_27=1 & imm64_16_27=0b101001001001 & imm64_13=0 & uimm64_7_12 & imm64_5_6=0 & D564 [ v = (uimm64_7_12) | (uimmw_lo << 7) | (uimmw_hi << 21);]
#{
        #D564 = inst_start + v;
#}

# CR:Pipelined loop
with slot: iclass=0b0110 {
    :"P3=sp1loop0(" r7 "," S5 ")" is imm_21_27=0b0000101 & S5 & imm_13=0 & imm_8_12u & imm_5_7=0 & imm_3_4u & imm_0_2 [r7 = (imm_3_4u | (imm_8_12u << 2)) << 2;] {
    	SA0 = inst_start + r7;
	LC0 = S5;
	#TODO: lpcfg
	P3.new = 0;
    }
    :"sp2loop0" is imm_21_27=0b0000110  & S5 & imm_13=0 & imm_8_12 & imm_5_7=0 & imm_3_4 & imm_0_2 {
        _stub();
    }
    :"sp3loop0" is imm_21_27=0b0000111  & S5 & imm_13=0 & imm_8_12 & imm_5_7=0 & imm_3_4 & imm_0_2 {
        _stub();
    }

    :"sp1loop01" is imm_21_27=0b1001101 & imm_16_20 & imm_13=0 & imm_3_12 & imm_2=0 & imm_0_1 {
        _stub();
    }
    :"sp2loop01" is imm_21_27=0b1001110 & imm_16_20 & imm_13=0 & imm_3_12 & imm_2=0 & imm_0_1 {
        _stub();
    }
    :"sp2loopw1" is imm_21_27=0b1001111 & imm_16_20 & imm_13=0 & imm_3_12 & imm_2=0 & imm_0_1 {
        _stub();
    }
}


#CR: Logical predicates 
with slot: iclass=0b0110 {
    :D2_pred_new"=and("T2_pred", "S2_pred")" is imm_20_27=0b10110000 & imm_18_19=0 & S2_pred & imm_13=0 & imm_10_12=0 & T2_pred & imm_2_7=0 & D2_pred_new {
        D2_pred_new = T2_pred & S2_pred;
    }

    :D2_pred_new"=and("S2_pred", and("T2_pred","U2_pred"))" is imm_20_27=0b10110001 & imm_18_19=0 & S2_pred & imm_13=0 & imm_10_12=0 & T2_pred & U2_pred & imm_2_5=0 & D2_pred_new {
        D2_pred_new = S2_pred & T2_pred & U2_pred;
    }

    :D2_pred_new"=or("T2_pred", "S2_pred")" is imm_20_27=0b10110010 & imm_18_19=0 & S2_pred & imm_13=0 & imm_10_12=0 & T2_pred & imm_2_7=0 & D2_pred_new {
        D2_pred_new = T2_pred | S2_pred;
    }

    :D2_pred_new"=and("S2_pred", or("T2_pred","U2_pred"))" is imm_20_27=0b10110011 & imm_18_19=0 & S2_pred & imm_13=0 & imm_10_12=0 & T2_pred & U2_pred & imm_2_5=0 & D2_pred_new {
        D2_pred_new = S2_pred & (T2_pred | U2_pred);
    }

    :D2_pred_new"=xor("T2_pred", "S2_pred")" is imm_20_27=0b10110100 & imm_18_19=0 & S2_pred & imm_13=0 & imm_10_12=0 & T2_pred & imm_2_7=0 & D2_pred_new {
        D2_pred_new = T2_pred ^ S2_pred;
    }

    :D2_pred_new"=or("S2_pred", and("T2_pred","U2_pred"))" is imm_20_27=0b10110101 & imm_18_19=0 & S2_pred & imm_13=0 & imm_10_12=0 & T2_pred & U2_pred & imm_2_5=0 & D2_pred_new {
        D2_pred_new = S2_pred & (T2_pred | U2_pred);
    }

    :D2_pred"=and("T2_pred", !"S2_pred")" is imm_20_27=0b10110110 & imm_18_19=0 & S2_pred & imm_13=0 & imm_10_12=0 & T2_pred & imm_2_7=0 & D2_pred & D2_pred_new {
        D2_pred_new = T2_pred & (~S2_pred);
    }

    :D2_pred_new"=or("S2_pred", or("T2_pred","U2_pred"))" is imm_20_27=0b10110111 & imm_18_19=0 & S2_pred & imm_13=0 & imm_10_12=0 & T2_pred & U2_pred & imm_2_5=0 & D2_pred_new {
        D2_pred_new = S2_pred | (T2_pred | U2_pred);
    }

    :D2_pred_new"=and("S2_pred", and("T2_pred", !"U2_pred"))" is imm_20_27=0b10111001 & imm_18_19=0 & S2_pred & imm_13=0 & imm_10_12=0 & T2_pred & U2_pred & imm_2_5=0 & D2_pred_new {
        D2_pred_new = S2_pred & (T2_pred & ~U2_pred);
    }

    :D2_pred_new"=and("S2_pred", or("T2_pred", !"U2_pred"))" is imm_20_27=0b10111011 & imm_18_19=0 & S2_pred & imm_13=0 & imm_10_12=0 & T2_pred & U2_pred & imm_2_5=0 & D2_pred_new {
        D2_pred_new = S2_pred & (T2_pred | ~U2_pred);
    }

    :D2_pred_new"=not("S2_pred")" is imm_20_27=0b10111100 & imm_18_19=0 & S2_pred & imm_13=0 & imm_2_12=0 & D2_pred_new {
        D2_pred_new = ~S2_pred;
    }

    :D2_pred_new"=or("S2_pred", and("T2_pred", !"U2_pred"))" is imm_20_27=0b10111101 & imm_18_19=0 & S2_pred & imm_13=0 & imm_10_12=0 & T2_pred & U2_pred & imm_2_5=0 & D2_pred_new {
        D2_pred_new = S2_pred | (T2_pred & ~U2_pred);
    }

    :D2_pred_new"=or("T2_pred", !"S2_pred")" is imm_20_27=0b10111110 & imm_18_19=0 & S2_pred & imm_13=0 & imm_10_12=0 & T2_pred & imm_2_7=0 & D2_pred_new {
        D2_pred_new = T2_pred | ~S2_pred;
    }

    :D2_pred_new"=or("S2_pred", or("T2_pred", !"U2_pred"))" is imm_20_27=0b10111111 & imm_18_19=0 & S2_pred & imm_13=0 & imm_10_12=0 & T2_pred & U2_pred & imm_2_5=0 & D2_pred_new {
        D2_pred_new = S2_pred | (T2_pred | ~U2_pred);
    }
}

# CR:User control register transfer
with slot: iclass=0b0110 {
    :D5_ctrl = S5 is imm_21_27=0b0010001 & S5 & imm_5_13=0 & D5_ctrl {
        D5_ctrl = S5;
    }
    :"D5_ctrl_pair" = S5_pair is imm_21_27=0b0011001 & S5_pair & imm_5_13=0 & D5_ctrl_pair {
        D5_ctrl_pair = S5_pair;
	_stub(); # TODO: add pair regs
    }
    :D5_pair "=" "S5_ctrl_pair" is imm_21_27=0b1000000 & S5_ctrl_pair & imm_5_13=0 & D5_pair {
        D5_pair = S5_ctrl_pair;
	_stub(); # TODO: add pair regs
    }
    :D5 = S5_ctrl is imm_21_27=0b1010000 & S5_ctrl & imm_5_13=0 & D5 {
        D5 = S5_ctrl;
    }
}

# JR
# JR:Call sub from reg
with slot: iclass=0b0101 {
	:"callr "S5 is imm_21_27=0b0000101 & S5 & imm_0_13=0 {
		LR=inst_next;
		call(S5);
	}
	:"callrh "S5 is imm_21_27=0b0000110 & S5 & imm_0_13=0 {
		LR=inst_next;
		call(S5);
	}

	:"if ("U2_pred") callr" S5 is imm_21_27=0b0001000 & S5 & imm_10_13=0 & U2_pred & imm_0_7=0 {
        if(U2_pred == 0) goto <end>;
	call(S5);
        <end>
	}
	:"if (!"U2_pred") callr" S5 is imm_21_27=0b0001001 & S5 & imm_10_13=0 & U2_pred & imm_0_7=0 {
        if(U2_pred != 0) goto <end>;
        <end>
	}
}

# JR:Hinted call sub from reg - duped with call sub from reg

# JR:Hint indirect jmp
define pcodeop hintjr;
with slot: iclass=0b0101 {
	:"hintjr("S5")" is imm_21_27=0b0010101 & S5 & imm_0_13=0b00000000000000 {
		hintjr(S5);
	}
}

# JR:Jump to addr from reg
 with slot: iclass=0b0101 {
	 :"jumpr" S5 is imm_21_27=0b0010100 & S5 & imm_0_13=0 {
		 jump(S5);
	 }
	 :"jumpr LR" is imm_21_27=0b0010100 & imm_16_20=31 & imm_0_13=0 {
		 return();
	 }
	 :"jumprh" S5 is imm_21_27=0b0010110 & S5 & imm_0_13=0 {
		 jump(S5);
	 }

	 :"if("U2_pred") jumpr:nt "S5 is imm_21_27=0b0011010 & S5 & imm_13=0 & imm_11_12=0b00 & imm_10=0 & U2_pred & imm_0_7=0 {
        if(U2_pred == 0) goto <end>;
	jump(S5);
        <end>
	 }
	 :"if("U2_pred") jumpr:nt LR" is imm_21_27=0b0011010 & S5=31 & imm_13=0 & imm_11_12=0b00 & imm_10=0 & U2_pred & imm_0_7=0 {
        if(U2_pred == 0) goto <end>;
        return();
        <end>
	 }

	 :"if("U2_pred_new") jumpr:nt "S5 is imm_21_27=0b0011010 & S5 & imm_13=0 & imm_11_12=0b01 & imm_10=0 & U2_pred_new & imm_0_7=0 {
        if(U2_pred_new == 0) goto <end>;
	jump(S5);
        <end>
	 }
	 :"if("U2_pred") jumpr:t "S5 is imm_21_27=0b0011010 & S5 & imm_13=0 & imm_11_12=0b10 & imm_10=0 & U2_pred & imm_0_7=0 {
        if(U2_pred == 0) goto <end>;
	jump(S5);
        <end>
	 }
	 :"if("U2_pred_new") jumpr:t "S5 is imm_21_27=0b0011010 & S5 & imm_13=0 & imm_11_12=0b11 & imm_10=0 & U2_pred_new & imm_0_7=0 {
        if(U2_pred_new == 0) goto <end>;
	jump(S5);
        <end>
	 }
	 :"if(!"U2_pred") jumpr:nt "S5 is imm_21_27=0b0011011 & S5 & imm_13=0 & imm_11_12=0b00 & imm_10=0 & U2_pred & imm_0_7=0 {
        if(U2_pred != 0) goto <end>;
	jump(S5);
        <end>
	 }
	 :"if(!"U2_pred_new") jumpr:nt "S5 is imm_21_27=0b0011011 & S5 & imm_13=0 & imm_11_12=0b01 & imm_10=0 & U2_pred_new & imm_0_7=0 {
        if(U2_pred_new != 0) goto <end>;
	jump(S5);
        <end>
	 }
	 :"if(!"U2_pred") jumpr:t "S5 is imm_21_27=0b0011011 & S5 & imm_13=0 & imm_11_12=0b10 & imm_10=0 & U2_pred & imm_0_7=0 {
        if(U2_pred != 0) goto <end>;
	jump(S5);
        <end>
	 }
	 :"if(!"U2_pred_new") jumpr:t "S5 is imm_21_27=0b0011011 & S5 & imm_13=0 & imm_11_12=0b11 & imm_10=0 & U2_pred_new & imm_0_7=0 {
        if(U2_pred_new != 0) goto <end>;
	jump(S5);
        <end>
	 }
 }

# JR:Hint addr jmp from reg - duped with jupm to addr from reg

#J
#J:Call subroutine
with slot: iclass=0b0101 {
    Call_R152: v is imm_22_23 & imm_16_20u & imm_13u & imm_1_7u [v = inst_start + (((imm_22_23 << 13) | (imm_16_20u << 8)| (imm_13u << 7) | (imm_1_7u)) << 2); ] {
        local loc:4 = v;
        export loc;
      }

	 :^"call" v is imm_25_27=0b101 &  imm_16_24 & imm_1_13u       & imm_0=0 [v = inst_start + (((imm_1_13u) | (imm_16_24 << 13)) << 2) ;] {
        LR = inst_next;
	call(v);
	 }

	 :"if ("U2") call "Call_R152 is imm_24_27=0b1101 & imm_21=0 & Call_R152 & imm_12=0 & imm_11=0 & imm_10=0 & U2 & imm_0=0 & hasext0=0 {
		 if(U2 == 0) goto <end>;
		LR = inst_next;
		call(Call_R152);
		<end>
	 }
	 :"if ("U2") call "v is imm_24_27=0b1101 & imm_21=0 & Call_R152 & imm_12=0 & imm_11=0 & imm_10=0 & U2 & imm_0=0 & hasext0=1 & immext0used=0 & immext0 & imm_1_6u  [v = inst_start + (imm_1_6u | immext0); immext0used=1;] {
		 if(U2 == 0) goto <end>;
		LR = inst_next;
		call(v);
		<end>
	 }

	 :"if (!"U2") call "Call_R152 is imm_24_27=0b1101 & imm_21=1 & Call_R152 & imm_12=0 & imm_11=0 & imm_10=0 & U2 & imm_0=0 & hasext0=0 {
		 if(U2 != 0) goto <end>;
		LR = inst_next;
		call(Call_R152);
		<end>
	 }
	 #:"if (!"U2") call ex" v is imm_24_27=0b1101 & imm_21=1 & imm_1_7u & imm_12=0 & imm_11=0 & imm_10=0 & U2 & imm_0=0 & hasext0=1 [v = imm_1_7u | immext0;] {
		 #if(U2 != 0) goto <end>;
		##LR = inst_next;
        #call(v);
		#<end>
	 #}
 }

#J:Compare and jump
 with slot: iclass=0b0001 {
      CJ_R9:r9 is  imm_20_21 & imm_1_7 [ r9 = inst_start+((imm_1_7 | (imm_20_21 << 7))<<2);] {
        local tmp:4 = r9;
        export tmp;
      }

     :"p0=cmp.eq("S4",#-1); if (p0.new) jump:nt "CJ_R9 is CJ_R9 & imm_27=0 & imm_22_26=0b00110 & imm_20_21 & S4 & imm_13=0 & imm_10_12 & imm_8_9=0b00 & imm_1_7 & imm_0=0 {
        if(S4 != -1) goto <bad>;
            P0.new = PTRUE;
            jump(CJ_R9);
            goto <end>;
        <bad>
            P0.new = 0x0;
        <end>
     }
     :"p0=cmp.gt("S4",#-1); if (p0.new) jump:nt "CJ_R9 is CJ_R9 & imm_27=0 & imm_22_26=0b00110 & imm_20_21 & S4 & imm_13=0 & imm_10_12 & imm_8_9=0b01 & imm_1_7 & imm_0=0 {
        if(S4 <= -1) goto <bad>;
            P0.new = PTRUE;
            jump(CJ_R9);
            goto <end>;
        <bad>
            P0.new = 0x0;
        <end>
     }
     :"p0=cmp.tstbit("S4",#0); if (p0.new) jump:nt "CJ_R9 is CJ_R9 & imm_27=0 & imm_22_26=0b00110 & imm_20_21 & S4 & imm_13=0 & imm_10_12 & imm_8_9=0b11 & imm_1_7 & imm_0=0 {
        local tmp:4 = S4 & 1;
        if(tmp == 0) goto <bad>;
            P0.new = PTRUE;
            jump(CJ_R9);
            goto <end>;
        <bad>
            P0.new = 0x0;
        <end>
     }

     :"p0=cmp.eq("S4",#-1); if (p0.new) jump:t "CJ_R9 is CJ_R9 & imm_27=0 & imm_22_26=0b00110 & imm_20_21 & S4 & imm_13=1 & imm_10_12 & imm_8_9=0b00 & imm_1_7 & imm_0=0 {
        if(S4 != -1) goto <bad>;
            P0.new = PTRUE;
            jump(CJ_R9);
            goto <end>;
        <bad>
            P0.new = 0x0;
        <end>
     }
     :"p0=cmp.gt("S4",#-1); if (p0.new) jump:t "CJ_R9 is CJ_R9 & imm_27=0 & imm_22_26=0b00110 & imm_20_21 & S4 & imm_13=1 & imm_10_12 & imm_8_9=0b01 & imm_1_7 & imm_0=0 {
        if(S4 <= -1) goto <bad>;
            P0.new = PTRUE;
            jump(CJ_R9);
            goto <end>;
        <bad>
            P0.new = 0x0;
        <end>
     }

     :"p0=cmp.tstbit("S4",#0); if (p0.new) jump:t "CJ_R9 is CJ_R9 & imm_27=0 & imm_22_26=0b00110 & imm_20_21 & S4 & imm_13=1 & imm_10_12 & imm_8_9=0b11 & imm_1_7 & imm_0=0 {
        local tmp:4 = S4 & 1;
        if(tmp == 0) goto <bad>;
            P0.new = PTRUE;
            jump(CJ_R9);
            goto <end>;
        <bad>
            P0.new = 0x0;
        <end>
     }

     :"p0=cmp.eq("S4",#-1); if (!p0.new) jump:nt "CJ_R9 is CJ_R9 & imm_27=0 & imm_22_26=0b00111 & imm_20_21 & S4 & imm_13=0 & imm_10_12 & imm_8_9=0b00 & imm_1_7 & imm_0=0 {
        if(S4 != -1) goto <bad>;
            P0.new = PTRUE;
            goto <end>;
        <bad>
            P0.new = 0x0;
            jump(CJ_R9);
        <end>
     }
     :"p0=cmp.gt("S4",#-1); if (!p0.new) jump:nt "CJ_R9 is CJ_R9 & imm_27=0 & imm_22_26=0b00111 & imm_20_21 & S4 & imm_13=0 & imm_10_12 & imm_8_9=0b01 & imm_1_7 & imm_0=0 {
        if(S4 <= -1) goto <bad>;
            P0.new = PTRUE;
            goto <end>;
        <bad>
            P0.new = 0x0;
            jump(CJ_R9);
        <end>
     }
     :"p0=cmp.tstbit("S4",#0); if (!p0.new) jump:nt "CJ_R9 is CJ_R9 & imm_27=0 & imm_22_26=0b00111 & imm_20_21 & S4 & imm_13=0 & imm_10_12 & imm_8_9=0b11 & imm_1_7 & imm_0=0 {
        local tmp:4 = S4 & 1;
        if(tmp != 0) goto <bad>;
            P0.new = PTRUE;
            jump(CJ_R9);
            goto <end>;
        <bad>
            P0.new = 0x0;
        <end>
     }

#np
     :"p0=cmp.eq("S4",#-1); if (!p0.new) jump:t "CJ_R9 is CJ_R9 & imm_27=0 & imm_22_26=0b00111 & imm_20_21 & S4 & imm_13=1 & imm_10_12 & imm_8_9=0b00 & imm_1_7 & imm_0=0 {
        if(S4 != -1) goto <bad>;
            P0.new = PTRUE;
            goto <end>;
        <bad>
            P0.new = 0x0;
            jump(CJ_R9);
        <end>
     }
     :"p0=cmp.gt("S4",#-1); if (!p0.new) jump:t "CJ_R9 is CJ_R9 & imm_27=0 & imm_22_26=0b00111 & imm_20_21 & S4 & imm_13=1 & imm_10_12 & imm_8_9=0b01 & imm_1_7 & imm_0=0 {
        if(S4 <= -1) goto <bad>;
            P0.new = PTRUE;
            goto <end>;
        <bad>
            P0.new = 0x0;
            jump(CJ_R9);
        <end>
     }
     :"p0=cmp.tstbit("S4",#0); if (!p0.new) jump:t "CJ_R9 is CJ_R9 & imm_27=0 & imm_22_26=0b00111 & imm_20_21 & S4 & imm_13=1 & imm_10_12 & imm_8_9=0b11 & imm_1_7 & imm_0=0 {
        local tmp:4 = S4 & 1;
        if(tmp != 0) goto <bad>;
            P0.new = PTRUE;
            jump(CJ_R9);
            goto <end>;
        <bad>
            P0.new = 0x0;
        <end>
     }
      
      :"P0.new=cmp.eq("S4", "imm_8_12u"); if (P0.new) jump:nt "CJ_R9 is imm_27=0 & imm_22_26=0b00000 & S4 & imm_13=0 & imm_8_12u & imm_0=0 & CJ_R9 {
        if(S4 != imm_8_12u) goto <bad>;
        P0.new = PTRUE;
	jump(CJ_R9);
        goto <end>;
        <bad>
        P0.new = 0x0;
	<end>
     }
      :"P0.new=cmp.eq("S4", "imm_8_12u"); if (P0.new) jump:t "CJ_R9 is imm_27=0 & imm_22_26=0b00000 & S4 & imm_13=1 & imm_8_12u & imm_0=0 & CJ_R9 {
        if(S4 != imm_8_12u) goto <bad>;
        P0.new = PTRUE;
	jump(CJ_R9);
        goto <end>;
        <bad>
        P0.new = 0x0;
	<end>
     }

     :"p0.new = cmp.eq(" S4 "," imm_8_12u "); if (!p0.new) jump:nt" CJ_R9 is CJ_R9 &     imm_27=0 & imm_22_26=0b00001 & imm_20_21 & S4 & imm_13=0 & imm_8_12u & imm_1_7 & imm_0=0 {
        if(S4 != imm_8_12u) goto <bad>;
        P0.new = PTRUE;
        goto <end>;
        <bad>
        P0.new = 0x0;
	jump(CJ_R9);
	<end>
     }

     :"p0.new = cmp.eq(" S4 "," imm_8_12u "); if (!p0.new) jump:t" CJ_R9 is CJ_R9 &     imm_27=0 & imm_22_26=0b00001 & imm_20_21 & S4 & imm_13=1 & imm_8_12u & imm_1_7 & imm_0=0 {
        if(S4 != imm_8_12u) goto <bad>;
        P0.new = PTRUE;
        goto <end>;
        <bad>
        P0.new = 0x0;
	jump(CJ_R9);
	<end>
     }

     #NP
     :"p0.new = cmp.gt(" S4 "," imm_8_12u "); if (p0.new) jump:nt" CJ_R9 is CJ_R9 &     imm_27=0 & imm_22_26=0b00010 & imm_20_21 & S4 & imm_13=0 & imm_8_12u & imm_1_7 & imm_0=0 {
        if(S4 <= imm_8_12u) goto <bad>;
            P0.new = PTRUE;
            jump(CJ_R9);
            goto <end>;
        <bad>
            P0.new = 0x0;
        <end>
     }
     :"p0.new = cmp.gt(" S4 "," imm_8_12u "); if (p0.new) jump:t" CJ_R9 is CJ_R9 &     imm_27=0 & imm_22_26=0b00010 & imm_20_21 & S4 & imm_13=1 & imm_8_12u & imm_1_7 & imm_0=0 {
        if(S4 <= imm_8_12u) goto <bad>;
            P0.new = PTRUE;
            jump(CJ_R9);
            goto <end>;
        <bad>
            P0.new = 0x0;
        <end>
     }
     :"p0.new = cmp.gt(" S4 "," imm_8_12u "); if (!p0.new) jump:nt" CJ_R9 is CJ_R9 &     imm_27=0 & imm_22_26=0b00011 & imm_20_21 & S4 & imm_13=0 & imm_8_12u & imm_1_7 & imm_0=0 {
        if(S4 <= imm_8_12u) goto <bad>;
            P0.new = PTRUE;
            goto <end>;
        <bad>
            P0.new = 0x0;
            jump(CJ_R9);
        <end>
     }
     :"p0.new = cmp.gt(" S4 "," imm_8_12u "); if (!p0.new) jump:t" CJ_R9 is CJ_R9 &     imm_27=0 & imm_22_26=0b00011 & imm_20_21 & S4 & imm_13=1 & imm_8_12u & imm_1_7 & imm_0=0 {
        if(S4 <= imm_8_12u) goto <bad>;
            P0.new = PTRUE;
            goto <end>;
        <bad>
            P0.new = 0x0;
            jump(CJ_R9);
        <end>
     }
     :"p0.new = cmp.gtu(" S4 "," imm_8_12u "); if (p0.new) jump:nt" CJ_R9 is CJ_R9 &     imm_27=0 & imm_22_26=0b00100 & imm_20_21 & S4 & imm_13=0 & imm_8_12u & imm_1_7 & imm_0=0 {
        if(S4 <= imm_8_12u) goto <bad>;
        P0.new = PTRUE;
	jump(CJ_R9);
        goto <end>;
        <bad>
        P0.new = 0x0;
	<end>
     }
     :"p0.new = cmp.gtu(" S4 "," imm_8_12u "); if (p0.new) jump:t" CJ_R9 is CJ_R9 &     imm_27=0 & imm_22_26=0b00100 & imm_20_21 & S4 & imm_13=1 & imm_8_12u & imm_1_7 & imm_0=0 {
        if(S4 <= imm_8_12u) goto <bad>;
        P0.new = PTRUE;
	jump(CJ_R9);
        goto <end>;
        <bad>
        P0.new = 0x0;
	<end>
     }
     :"p0.new = cmp.gtu(" S4 "," imm_8_12u "); if (!p0.new) jump:nt" CJ_R9 is CJ_R9 &     imm_27=0 & imm_22_26=0b00101 & imm_20_21 & S4 & imm_13=0 & imm_8_12u & imm_1_7 & imm_0=0 {
        if(S4 <= imm_8_12u) goto <bad>;
        P0.new = PTRUE;
        goto <end>;
        <bad>
        P0.new = 0x0;
	jump(CJ_R9);
	<end>
     }
     :"p0.new = cmp.gtu(" S4 "," imm_8_12u "); if (!p0.new) jump:t" CJ_R9 is CJ_R9 &     imm_27=0 & imm_22_26=0b00101 & imm_20_21 & S4 & imm_13=1 & imm_8_12u & imm_1_7 & imm_0=0 {
        if(S4 <= imm_8_12u) goto <bad>;
        P0.new = PTRUE;
        goto <end>;
        <bad>
        P0.new = 0x0;
	jump(CJ_R9);
	<end>
     }

     :"p1.new = cmp.eq(" S4 ",-1); if (p1.new) jump:nt" CJ_R9 is CJ_R9 &     imm_27=0 & imm_22_26=0b01110 & imm_20_21 & S4 & imm_13=0 & imm_10_12=0 & imm_8_9=0b00 & imm_1_7 & imm_0=0 {
        if(S4 != -1) goto <bad>;
		P1.new = PTRUE;
		jump(CJ_R9);
		goto <end>;
        <bad>
		P1.new = 0x0;
	<end>
     }
     :"p1.new = cmp.gt(" S4 ",-1); if (p1.new) jump:nt" CJ_R9 is CJ_R9 &     imm_27=0 & imm_22_26=0b01110 & imm_20_21 & S4 & imm_13=0 & imm_10_12=0 & imm_8_9=0b01 & imm_1_7 & imm_0=0 {
        if(S4 s<= -1) goto <bad>;
		P1.new = PTRUE;
		jump(CJ_R9);
		goto <end>;
        <bad>
		P1.new = 0x0;
	<end>
     }
     :"p1.new = cmp.tstbit(" S4 ",0); if (p1.new) jump:nt" CJ_R9 is CJ_R9 &     imm_27=0 & imm_22_26=0b01110 & imm_20_21 & S4 & imm_13=0 & imm_10_12=0 & imm_8_9=0b11 & imm_1_7 & imm_0=0 {
     	local tmp:1 = (S4 & 1) != 0;
        if(tmp) goto <bad>;
		P1.new = PTRUE;
		jump(CJ_R9);
		goto <end>;
        <bad>
		P1.new = 0x0;
	<end>
     }
     :"p1.new = cmp.eq(" S4 ",-1); if (p1.new) jump:t" CJ_R9 is CJ_R9 &     imm_27=0 & imm_22_26=0b01110 & imm_20_21 & S4 & imm_13=1 & imm_10_12=0 & imm_8_9=0b00 & imm_1_7 & imm_0=0 {
        if(S4 != -1) goto <bad>;
		P1.new = PTRUE;
		jump(CJ_R9);
		goto <end>;
        <bad>
		P1.new = 0x0;
	<end>
     }
     :"p1.new = cmp.gt(" S4 ",-1); if (p1.new) jump:t" CJ_R9 is CJ_R9 &     imm_27=0 & imm_22_26=0b01110 & imm_20_21 & S4 & imm_13=1 & imm_10_12=0 & imm_8_9=0b01 & imm_1_7 & imm_0=0 {
        if(S4 s<= -1) goto <bad>;
		P1.new = PTRUE;
		jump(CJ_R9);
		goto <end>;
        <bad>
		P1.new = 0x0;
	<end>
     }
     :"p1.new = cmp.tstbit(" S4 ",0); if (!p1.new) jump:t" CJ_R9 is CJ_R9 &     imm_27=0 & imm_22_26=0b01110 & imm_20_21 & S4 & imm_13=1 & imm_10_12=0 & imm_8_9=0b11 & imm_1_7 & imm_0=0 {
     	local tmp:1 = (S4 & 1) != 0;
        if(tmp) goto <bad>;
		P1.new = PTRUE;
		jump(CJ_R9);
		goto <end>;
        <bad>
		P1.new = 0x0;
	<end>
     }



     :"p1.new = cmp.eq(" S4 ",-1); if (!p1.new) jump:nt" CJ_R9 is CJ_R9 &     imm_27=0 & imm_22_26=0b01111 & imm_20_21 & S4 & imm_13=0 & imm_10_12=0 & imm_8_9=0b00 & imm_1_7 & imm_0=0 {
        if(S4 != -1) goto <bad>;
		P1.new = PTRUE;
		goto <end>;
        <bad>
		P1.new = 0x0;
		jump(CJ_R9);
	<end>
     }
     :"p1.new = cmp.gt(" S4 ",-1); if (!p1.new) jump:nt" CJ_R9 is CJ_R9 &     imm_27=0 & imm_22_26=0b01111 & imm_20_21 & S4 & imm_13=0 & imm_10_12=0 & imm_8_9=0b01 & imm_1_7 & imm_0=0 {
        if(S4 s<= -1) goto <bad>;
		P1.new = PTRUE;
		goto <end>;
        <bad>
		P1.new = 0x0;
		jump(CJ_R9);
	<end>
     }
     :"p1.new = cmp.tstbit(" S4 ",0); if (!p1.new) jump:nt" CJ_R9 is CJ_R9 &     imm_27=0 & imm_22_26=0b01111 & imm_20_21 & S4 & imm_13=0 & imm_10_12=0 & imm_8_9=0b11 & imm_1_7 & imm_0=0 {
     	local tmp:1 = (S4 & 1) != 0;
        if(tmp) goto <bad>;
		P1.new = PTRUE;
		goto <end>;
        <bad>
		P1.new = 0x0;
		jump(CJ_R9);
	<end>
     }
     :"p1.new = cmp.eq(" S4 ",-1); if (!p1.new) jump:t" CJ_R9 is CJ_R9 &     imm_27=0 & imm_22_26=0b01111 & imm_20_21 & S4 & imm_13=1 & imm_10_12=0 & imm_8_9=0b00 & imm_1_7 & imm_0=0 {
        if(S4 != -1) goto <bad>;
		P1.new = PTRUE;
		goto <end>;
        <bad>
		P1.new = 0x0;
		jump(CJ_R9);
	<end>
     }
     :"p1.new = cmp.gt(" S4 ",-1); if (!p1.new) jump:t" CJ_R9 is CJ_R9 &     imm_27=0 & imm_22_26=0b01111 & imm_20_21 & S4 & imm_13=1 & imm_10_12=0 & imm_8_9=0b01 & imm_1_7 & imm_0=0 {
        if(S4 s<= -1) goto <bad>;
		P1.new = PTRUE;
		goto <end>;
        <bad>
		P1.new = 0x0;
		jump(CJ_R9);
	<end>
     }
     :"p1.new = cmp.tstbit(" S4 ",0); if (!p1.new) jump:t" CJ_R9 is CJ_R9 &     imm_27=0 & imm_22_26=0b01111 & imm_20_21 & S4 & imm_13=1 & imm_10_12=0 & imm_8_9=0b11 & imm_1_7 & imm_0=0 {
     	local tmp:1 = (S4 & 1) != 0;
        if(tmp) goto <bad>;
		P1.new = PTRUE;
		goto <end>;
        <bad>
		P1.new = 0x0;
		jump(CJ_R9);
	<end>
     }
     :"p1.new = cmp.eq(" S4 "," imm_8_12u "); if (p1.new) jump:nt" CJ_R9 is CJ_R9 &     imm_27=0 & imm_22_26=0b01000 & imm_20_21 & S4 & imm_13=0 & imm_8_12u & imm_1_7 & imm_0=0 {
        if(S4 != imm_8_12u) goto <bad>;
		P1.new = PTRUE;
		jump(CJ_R9);
		goto <end>;
        <bad>
		P1.new = 0x0;
	<end>
     }
     :"p1.new = cmp.eq(" S4 "," imm_8_12u "); if (p1.new) jump:t" CJ_R9 is CJ_R9 &     imm_27=0 & imm_22_26=0b01000 & imm_20_21 & S4 & imm_13=1 & imm_8_12u & imm_1_7 & imm_0=0 {
        if(S4 != imm_8_12u) goto <bad>;
		P1.new = PTRUE;
		jump(CJ_R9);
		goto <end>;
        <bad>
		P1.new = 0x0;
	<end>
     }
     :"p1.new = cmp.eq(" S4 "," imm_8_12u "); if (!p1.new) jump:nt" CJ_R9 is CJ_R9 &     imm_27=0 & imm_22_26=0b01001 & imm_20_21 & S4 & imm_13=0 & imm_8_12u & imm_1_7 & imm_0=0 {
        if(S4 != imm_8_12u) goto <bad>;
		P1.new = PTRUE;
		goto <end>;
        <bad>
		P1.new = 0x0;
		jump(CJ_R9);
	<end>
     }
     :"p1.new = cmp.eq(" S4 "," imm_8_12u "); if (!p1.new) jump:t" CJ_R9 is CJ_R9 &     imm_27=0 & imm_22_26=0b01001 & imm_20_21 & S4 & imm_13=1 & imm_8_12u & imm_1_7 & imm_0=0 {
        if(S4 != imm_8_12u) goto <bad>;
		P1.new = PTRUE;
		goto <end>;
        <bad>
		P1.new = 0x0;
		jump(CJ_R9);
	<end>
     }





     :"p1.new = cmp.gt(" S4 "," imm_8_12u "); if (p1.new) jump:nt" CJ_R9 is CJ_R9 &     imm_27=0 & imm_22_26=0b01010 & imm_20_21 & S4 & imm_13=0 & imm_8_12u & imm_1_7 & imm_0=0 {
        if(S4 s<= imm_8_12u) goto <bad>;
		P1.new = PTRUE;
		jump(CJ_R9);
		goto <end>;
        <bad>
		P1.new = 0x0;
	<end>
     }
     :"p1.new = cmp.gt(" S4 "," imm_8_12u "); if (p1.new) jump:t" CJ_R9 is CJ_R9 &     imm_27=0 & imm_22_26=0b01010 & imm_20_21 & S4 & imm_13=1 & imm_8_12u & imm_1_7 & imm_0=0 {
        if(S4 s<= imm_8_12u) goto <bad>;
		P1.new = PTRUE;
		jump(CJ_R9);
		goto <end>;
        <bad>
		P1.new = 0x0;
	<end>
     }
     :"p1.new = cmp.gt(" S4 "," imm_8_12u "); if (!p1.new) jump:nt" CJ_R9 is CJ_R9 &     imm_27=0 & imm_22_26=0b01011 & imm_20_21 & S4 & imm_13=0 & imm_8_12u & imm_1_7 & imm_0=0 {
        if(S4 s<= imm_8_12u) goto <bad>;
		P1.new = PTRUE;
		goto <end>;
        <bad>
		P1.new = 0x0;
		jump(CJ_R9);
	<end>
     }
     :"p1.new = cmp.gt(" S4 "," imm_8_12u "); if (!p1.new) jump:t" CJ_R9 is CJ_R9 &     imm_27=0 & imm_22_26=0b01011 & imm_20_21 & S4 & imm_13=1 & imm_8_12u & imm_1_7 & imm_0=0 {
        if(S4 s<= imm_8_12u) goto <bad>;
		P1.new = PTRUE;
		goto <end>;
        <bad>
		P1.new = 0x0;
		jump(CJ_R9);
	<end>
     }
     :"p1.new = cmp.gtu(" S4 "," imm_8_12u "); if (p1.new) jump:nt" CJ_R9 is CJ_R9 &     imm_27=0 & imm_22_26=0b01100 & imm_20_21 & S4 & imm_13=0 & imm_8_12u & imm_1_7 & imm_0=0 {
        if(S4 <= imm_8_12u) goto <bad>;
		P1.new = PTRUE;
		jump(CJ_R9);
		goto <end>;
        <bad>
		P1.new = 0x0;
	<end>
     }
     :"p1.new = cmp.gtu(" S4 "," imm_8_12u "); if (p1.new) jump:t" CJ_R9 is CJ_R9 &     imm_27=0 & imm_22_26=0b01100 & imm_20_21 & S4 & imm_13=1 & imm_8_12u & imm_1_7 & imm_0=0 {
        if(S4 <= imm_8_12u) goto <bad>;
		P1.new = PTRUE;
		jump(CJ_R9);
		goto <end>;
        <bad>
		P1.new = 0x0;
	<end>
     }
     :"p1.new = cmp.gtu(" S4 "," imm_8_12u "); if (!p1.new) jump:nt" CJ_R9 is CJ_R9 &     imm_27=0 & imm_22_26=0b01101 & imm_20_21 & S4 & imm_13=0 & imm_8_12u & imm_1_7 & imm_0=0 {
        if(S4 <= imm_8_12u) goto <bad>;
		P1.new = PTRUE;
		goto <end>;
        <bad>
		P1.new = 0x0;
		jump(CJ_R9);
	<end>
     }
     :"p1.new = cmp.gtu(" S4 "," imm_8_12u "); if (!p1.new) jump:t" CJ_R9 is CJ_R9 &     imm_27=0 & imm_22_26=0b01101 & imm_20_21 & S4 & imm_13=1 & imm_8_12u & imm_1_7 & imm_0=0 {
        if(S4 <= imm_8_12u) goto <bad>;
		P1.new = PTRUE;
		goto <end>;
        <bad>
		P1.new = 0x0;
		jump(CJ_R9);
	<end>
     }


# second chunk
     :"p0=cmp.eq(" S4 "," T4_8_11 "); if (p0.new) jump:nt" CJ_R9 is CJ_R9 &   imm_27=0 & imm_22_26=0b010000 & imm_20_21 & S4 & imm_12_13=0b00 & T4_8_11 & imm_1_7 & imm_0=0 {
        if(S4 != T4_8_11) goto <bad>;
        P0.new = PTRUE;
        jump(CJ_R9);
        goto <end>;
        <bad>
        P0.new = 0x0;
        <end>
     }
     :"p1=cmp.eq(" S4 "," T4_8_11 "); if (p1.new) jump:nt" CJ_R9 is CJ_R9 &   imm_27=0 & imm_22_26=0b010000 & imm_20_21 & S4 & imm_12_13=0b01 & T4_8_11 & imm_1_7 & imm_0=0 {
        if(S4 != T4_8_11) goto <bad>;
        P1.new = PTRUE;
        jump(CJ_R9);
        goto <end>;
        <bad>
        P1.new = 0x0;
        <end>
     }
     :"p0=cmp.eq(" S4 "," T4_8_11 "); if (p0.new) jump:t" CJ_R9 is CJ_R9 &   imm_27=0 & imm_22_26=0b010000 & imm_20_21 & S4 & imm_12_13=0b10 & T4_8_11 & imm_1_7 & imm_0=0 {
        if(S4 != T4_8_11) goto <bad>;
        P0.new = PTRUE;
        jump(CJ_R9);
        goto <end>;
        <bad>
        P0.new = 0x0;
        <end>
     }
     :"p1=cmp.eq(" S4 "," T4_8_11 "); if (p1.new) jump:t" CJ_R9 is CJ_R9 &   imm_27=0 & imm_22_26=0b010000 & imm_20_21 & S4 & imm_12_13=0b11 & T4_8_11 & imm_1_7 & imm_0=0 {
        if(S4 != T4_8_11) goto <bad>;
        P1.new = PTRUE;
        jump(CJ_R9);
        goto <end>;
        <bad>
        P1.new = 0x0;
        <end>
     }

     :"p0=cmp.eq(" S4 "," T4_8_11 "); if (!p0.new) jump:nt" CJ_R9 is CJ_R9 &   imm_27=0 & imm_22_26=0b010001 & imm_20_21 & S4 & imm_12_13=0b00 & T4_8_11 & imm_1_7 & imm_0=0 {
        if(S4 != T4_8_11) goto <bad>;
        P0.new = PTRUE;
        goto <end>;
        <bad>
        P0.new = 0x0;
        jump(CJ_R9);
        <end>
     }
     :"p1=cmp.eq(" S4 "," T4_8_11 "); if (!p1.new) jump:nt" CJ_R9 is CJ_R9 &   imm_27=0 & imm_22_26=0b010001 & imm_20_21 & S4 & imm_12_13=0b01 & T4_8_11 & imm_1_7 & imm_0=0 {
        if(S4 != T4_8_11) goto <bad>;
        P1.new = PTRUE;
        goto <end>;
        <bad>
        P1.new = 0x0;
        jump(CJ_R9);
        <end>
     }
     :"p0=cmp.eq(" S4 "," T4_8_11 "); if (!p0.new) jump:t" CJ_R9 is CJ_R9 &   imm_27=0 & imm_22_26=0b010001 & imm_20_21 & S4 & imm_12_13=0b10 & T4_8_11 & imm_1_7 & imm_0=0 {
        if(S4 != T4_8_11) goto <bad>;
        P0.new = PTRUE;
        goto <end>;
        <bad>
        P0.new = 0x0;
        jump(CJ_R9);
        <end>
     }
     :"p1=cmp.eq(" S4 "," T4_8_11 "); if (!p1.new) jump:t" CJ_R9 is CJ_R9 &   imm_27=0 & imm_22_26=0b010001 & imm_20_21 & S4 & imm_12_13=0b11 & T4_8_11 & imm_1_7 & imm_0=0 {
        if(S4 != T4_8_11) goto <bad>;
        P1.new = PTRUE;
        goto <end>;
        <bad>
        P1.new = 0x0;
        jump(CJ_R9);
        <end>
     }
     :"p0=cmp.gt(" S4 "," T4_8_11 "); if (p0.new) jump:nt" CJ_R9 is CJ_R9 &   imm_27=0 & imm_22_26=0b010010 & imm_20_21 & S4 & imm_12_13=0b00 & T4_8_11 & imm_1_7 & imm_0=0 {
        if(S4 s<= T4_8_11) goto <bad>;
        P0.new = PTRUE;
        jump(CJ_R9);
        goto <end>;
        <bad>
        P0.new = 0x0;
        <end>
     }
     :"p1=cmp.gt(" S4 "," T4_8_11 "); if (p1.new) jump:nt" CJ_R9 is CJ_R9 &   imm_27=0 & imm_22_26=0b010010 & imm_20_21 & S4 & imm_12_13=0b01 & T4_8_11 & imm_1_7 & imm_0=0 {
        if(S4 s<= T4_8_11) goto <bad>;
        P1.new = PTRUE;
        jump(CJ_R9);
        goto <end>;
        <bad>
        P1.new = 0x0;
        <end>
     }
     :"p0=cmp.gt(" S4 "," T4_8_11 "); if (p0.new) jump:t" CJ_R9 is CJ_R9 &   imm_27=0 & imm_22_26=0b010010 & imm_20_21 & S4 & imm_12_13=0b10 & T4_8_11 & imm_1_7 & imm_0=0 {
        if(S4 s<= T4_8_11) goto <bad>;
        P0.new = PTRUE;
        jump(CJ_R9);
        goto <end>;
        <bad>
        P0.new = 0x0;
        <end>
     }
     :"p1=cmp.gt(" S4 "," T4_8_11 "); if (p1.new) jump:t" CJ_R9 is CJ_R9 &   imm_27=0 & imm_22_26=0b010010 & imm_20_21 & S4 & imm_12_13=0b11 & T4_8_11 & imm_1_7 & imm_0=0 {
        if(S4 s<= T4_8_11) goto <bad>;
        P1.new = PTRUE;
        jump(CJ_R9);
        goto <end>;
        <bad>
        P1.new = 0x0;
        <end>
     }

     :"p0=cmp.gt(" S4 "," T4_8_11 "); if (!p0.new) jump:nt" CJ_R9 is CJ_R9 &   imm_27=0 & imm_22_26=0b010011 & imm_20_21 & S4 & imm_12_13=0b00 & T4_8_11 & imm_1_7 & imm_0=0 {
        if(S4 s<= T4_8_11) goto <bad>;
        P0.new = PTRUE;
        goto <end>;
        <bad>
        P0.new = 0x0;
        jump(CJ_R9);
        <end>
     }
     :"p1=cmp.gt(" S4 "," T4_8_11 "); if (!p1.new) jump:nt" CJ_R9 is CJ_R9 &   imm_27=0 & imm_22_26=0b010011 & imm_20_21 & S4 & imm_12_13=0b01 & T4_8_11 & imm_1_7 & imm_0=0 {
        if(S4 s<= T4_8_11) goto <bad>;
        P1.new = PTRUE;
        goto <end>;
        <bad>
        P1.new = 0x0;
        jump(CJ_R9);
        <end>
     }
     :"p0=cmp.gt(" S4 "," T4_8_11 "); if (!p0.new) jump:t" CJ_R9 is CJ_R9 &   imm_27=0 & imm_22_26=0b010011 & imm_20_21 & S4 & imm_12_13=0b10 & T4_8_11 & imm_1_7 & imm_0=0 {
        if(S4 s<= T4_8_11) goto <bad>;
        P0.new = PTRUE;
        goto <end>;
        <bad>
        P0.new = 0x0;
        jump(CJ_R9);
        <end>
     }
     :"p1=cmp.gt(" S4 "," T4_8_11 "); if (!p1.new) jump:t" CJ_R9 is CJ_R9 &   imm_27=0 & imm_22_26=0b010011 & imm_20_21 & S4 & imm_12_13=0b11 & T4_8_11 & imm_1_7 & imm_0=0 {
        if(S4 s<= T4_8_11) goto <bad>;
        P1.new = PTRUE;
        goto <end>;
        <bad>
        P1.new = 0x0;
        jump(CJ_R9);
        <end>
     }










     :"p0=cmp.gtu(" S4 "," T4_8_11 "); if (p0.new) jump:nt" CJ_R9 is CJ_R9 &   imm_27=0 & imm_22_26=0b010100 & imm_20_21 & S4 & imm_12_13=0b00 & T4_8_11 & imm_1_7 & imm_0=0 {
        if(S4 s<= T4_8_11) goto <bad>;
        P0.new = PTRUE;
        jump(CJ_R9);
        goto <end>;
        <bad>
        P0.new = 0x0;
        <end>
     }
     :"p1=cmp.gtu(" S4 "," T4_8_11 "); if (p1.new) jump:nt" CJ_R9 is CJ_R9 &   imm_27=0 & imm_22_26=0b010100 & imm_20_21 & S4 & imm_12_13=0b01 & T4_8_11 & imm_1_7 & imm_0=0 {
        if(S4 s<= T4_8_11) goto <bad>;
        P1.new = PTRUE;
        jump(CJ_R9);
        goto <end>;
        <bad>
        P1.new = 0x0;
        <end>
     }
     :"p0=cmp.gtu(" S4 "," T4_8_11 "); if (p0.new) jump:t" CJ_R9 is CJ_R9 &   imm_27=0 & imm_22_26=0b010100 & imm_20_21 & S4 & imm_12_13=0b10 & T4_8_11 & imm_1_7 & imm_0=0 {
        if(S4 s<= T4_8_11) goto <bad>;
        P0.new = PTRUE;
        jump(CJ_R9);
        goto <end>;
        <bad>
        P0.new = 0x0;
        <end>
     }
     :"p1=cmp.gtu(" S4 "," T4_8_11 "); if (p1.new) jump:t" CJ_R9 is CJ_R9 &   imm_27=0 & imm_22_26=0b010100 & imm_20_21 & S4 & imm_12_13=0b11 & T4_8_11 & imm_1_7 & imm_0=0 {
        if(S4 s<= T4_8_11) goto <bad>;
        P1.new = PTRUE;
        jump(CJ_R9);
        goto <end>;
        <bad>
        P1.new = 0x0;
        <end>
     }

     :"p0=cmp.gtu(" S4 "," T4_8_11 "); if (!p0.new) jump:nt" CJ_R9 is CJ_R9 &   imm_27=0 & imm_22_26=0b010101 & imm_20_21 & S4 & imm_12_13=0b00 & T4_8_11 & imm_1_7 & imm_0=0 {
        if(S4 s<= T4_8_11) goto <bad>;
        P0.new = PTRUE;
        goto <end>;
        <bad>
        P0.new = 0x0;
        jump(CJ_R9);
        <end>
     }
     :"p1=cmp.gtu(" S4 "," T4_8_11 "); if (!p1.new) jump:nt" CJ_R9 is CJ_R9 &   imm_27=0 & imm_22_26=0b010101 & imm_20_21 & S4 & imm_12_13=0b01 & T4_8_11 & imm_1_7 & imm_0=0 {
        if(S4 s<= T4_8_11) goto <bad>;
        P1.new = PTRUE;
        goto <end>;
        <bad>
        P1.new = 0x0;
        jump(CJ_R9);
        <end>
     }
     :"p0=cmp.gtu(" S4 "," T4_8_11 "); if (!p0.new) jump:t" CJ_R9 is CJ_R9 &   imm_27=0 & imm_22_26=0b010101 & imm_20_21 & S4 & imm_12_13=0b10 & T4_8_11 & imm_1_7 & imm_0=0 {
        if(S4 s<= T4_8_11) goto <bad>;
        P0.new = PTRUE;
        goto <end>;
        <bad>
        P0.new = 0x0;
        jump(CJ_R9);
        <end>
     }
     :"p1=cmp.gtu(" S4 "," T4_8_11 "); if (!p1.new) jump:t" CJ_R9 is CJ_R9 &   imm_27=0 & imm_22_26=0b010101 & imm_20_21 & S4 & imm_12_13=0b11 & T4_8_11 & imm_1_7 & imm_0=0 {
        if(S4 s<= T4_8_11) goto <bad>;
        P1.new = PTRUE;
        goto <end>;
        <bad>
        P1.new = 0x0;
        jump(CJ_R9);
        <end>
     }
 }


# J/Jump to address
with slot: iclass=0b0101 {

    #JImm: loc is imm_16_24 & imm_1_13u [loc = inst_start+(((imm_16_24 << 13) | (imm_1_13u)) << 2);]{
    	#local v:4 = loc;
        #export v;
    #}

    :"jump "loc  is imm_25_27=0b100  &  imm_0=0 & imm_16_24 & imm_1_13u  [loc = inst_start+(((imm_16_24 << 13) | (imm_1_13u)) << 2);] {
    	jump(loc);
     }
    
    IfImm: r15 is imm_1_7u & imm_13u & imm_16_20u & imm_22_23 [r15 = inst_start + ((imm_1_7u | (imm_13u << 7) | (imm_16_20u << 8) | (imm_22_23 << 13)) << 2);] {
    	local v:4 = r15;
        export v;
    }

	 :"if ("U2") jump:nt" r15  is  imm_24_27=0b1100 & imm_21=0 & imm_11_12=0b00 & imm_10=0 & U2 & imm_0=0 & imm_1_7u & imm_13u & imm_16_20u & imm_22_23  [r15 = inst_start + ((imm_1_7u | (imm_13u << 7) | (imm_16_20u << 8) | (imm_22_23 << 13)) << 2);]{
		 if(U2 == 0) goto <end>;
		 jump(r15);
		 <end>
	 }

	 :"if ("U2") jump:t "IfImm is  imm_24_27=0b1100 & imm_21=0 & imm_11_12=0b10 & imm_10=0 & U2 & imm_0=0 & IfImm {
		 if(U2 == 0) goto <end>;
		 jump(IfImm);
		 <end>
	 }
     
	 :"if (!"U2") jump:nt" r15 is  imm_24_27=0b1100 & imm_21=1 & imm_11_12=0b00 & imm_10=0 & U2 & imm_0=0 & imm_1_7u & imm_13u & imm_16_20u & imm_22_23  [r15 = inst_start + ((imm_1_7u | (imm_13u << 7) | (imm_16_20u << 8) | (imm_22_23 << 13)) << 2);]{
		 if(U2 != 0) goto <end>;
		 jump(r15);
		 <end>
	 }

	 :"if (!"U2") jump:t "IfImm is  imm_24_27=0b1100 & imm_21=1 & imm_11_12=0b10 & imm_10=0 & U2 & imm_0=0 & IfImm {
		 if(U2 != 0) goto <end>;
		 jump(IfImm);
		 <end>
	 }
 }
 
 # constant ext
 	wslot:"immext jump "v   is immw_his & immw_lou & iclass64=0b0101 & imm64_25_27=0b100  &  imm64_0=0 & imm64_1_6u [v = inst_start + ((imm64_1_6u) | (immw_lou << 6) | (immw_his<<20));] {
        jump(v:4);
     }

# J/Jump to address cond new
with slot: iclass=0b0101 {
	 :"if ("U2_pred_new") jump:nt "Call_R152 is imm_24_27=0b1100 & Call_R152 & imm_21=0 & imm_11_12=0b01 & imm_10=0 & U2_pred_new & imm_0=0 {
		 if(U2_pred_new == 0) goto <end>;
		 jump(Call_R152);
		 <end>
	 }
	 :"if ("U2_pred_new") jump:t "Call_R152 is imm_24_27=0b1100 & Call_R152 & imm_21=0 & imm_11_12=0b11 & imm_10=0 & U2_pred_new & imm_0=0 {
		 if(U2_pred_new == 0) goto <end>;
		 jump(Call_R152);
		 <end>
	 }
	 :"if (!"U2_pred_new") jump:nt "Call_R152 is imm_24_27=0b1100 & Call_R152 & imm_21=1 & imm_11_12=0b01 & imm_10=0 & U2_pred_new & imm_0=0 {
		 if(U2_pred_new != 0) goto <end>;
		 jump(Call_R152);
		 <end>
	 }
	 :"if (!"U2_pred_new") jump:t "Call_R152 is imm_24_27=0b1100 & Call_R152 & imm_21=1 & imm_11_12=0b11 & imm_10=0 & U2_pred_new & imm_0=0 {
		 if(U2_pred_new != 0) goto <end>;
		 jump(Call_R152);
		 <end>
	 }
}

# J/Jump to address cond reg
with slot: iclass=0b0110 {
    Jmp_R13: v is imm_21 & imm_13 & imm_1_11 [v = inst_start + (((imm_21 << 12)| (imm_13 << 11) | (imm_1_11)) << 2); ] {
        local loc:4 = v;
        export *:4 loc;
      }
	 :"if("S5"!=#0) jump:nt "Jmp_R13 is imm_22_27=0b000100 & Jmp_R13 & S5  & imm_12=0 & imm_0=0 {
	 	if(S5 == 0) goto <end>;
        jump(Jmp_R13);
        <end>
	 }
	 :"if("S5"!=#0) jump:t "Jmp_R13 is imm_22_27=0b000100 & Jmp_R13 & S5 & imm_12=1 & imm_0=0 {
	 	if(S5 == 0) goto <end>;
        jump(Jmp_R13);
        <end>
	 }

	 :"if("S5">=#0) jump:nt "Jmp_R13 is imm_22_27=0b000101 & Jmp_R13 & S5 & imm_12=0 & imm_0=0 {
	 	if(S5 s>= 0) goto <end>;
        jump(Jmp_R13);
        <end>
	 }
	 :"if("S5">=#0) jump:t "Jmp_R13 is imm_22_27=0b000101 & Jmp_R13 & S5 & imm_12=1 & imm_0=0 {
	 	if(S5 s>= 0) goto <end>;
        jump(Jmp_R13);
        <end>
	 }
	 :"if("S5"==#0) jump:nt "Jmp_R13  is imm_22_27=0b000110 & Jmp_R13 & S5 & imm_12=0 & imm_0=0 {
	 	if(S5 == 0) goto <end>;
        jump(Jmp_R13);
        <end>
	 }
	 :"if("S5"==#0) jump:t "Jmp_R13  is imm_22_27=0b000110 & Jmp_R13 & S5 & imm_12=1 & imm_0=0 {
	 	if(S5 == 0) goto <end>;
        jump(Jmp_R13);
        <end>
	 }
	 :"if("S5">=#0) jump:nt "Jmp_R13  is imm_22_27=0b000111 & Jmp_R13 & S5 & imm_12=0 & imm_0=0 {
	 	if(S5 s>= 0) goto <end>;
        jump(Jmp_R13);
        <end>
	 }
	 :"if("S5">=#0) jump:t "Jmp_R13  is imm_22_27=0b000111 & Jmp_R13 & S5 & imm_12=1 & imm_0=0 {
	 	if(S5 s>= 0) goto <end>;
        jump(Jmp_R13);
        <end>
	 }
 }

# J/Transfer and jump
with slot: iclass=0b0001 {
    TransJmp_R9: v is imm_20_21 & imm_1_7 [v = inst_start + (((imm_20_21 << 7) | (imm_1_7)) << 2); ] {
        local loc:4 = v;
        export loc;
      }
	 :D4_16_19"="imm_8_13u"; jump "TransJmp_R9 is imm_24_27=0b0110 & imm_22_23=0 & D4_16_19 & imm_8_13u & TransJmp_R9 & imm_0=0 & hasext0=0 {
        D4_16_19 = imm_8_13u;
        jump(TransJmp_R9);
	 }
	 :D4_16_19"="imm_8_13u"; jump" v is imm_24_27=0b0110 & imm_22_23=0 & D4_16_19 & imm_8_13u & imm_1_7u & imm_0=0 & hasext0=1 & immext0used=0 & imm_1_6u [v = inst_start + (imm_1_6u | immext0); immext0used=1;] {
        D4_16_19 = imm_8_13u;
        jump(v);
	 }
	 slot:D4_8_11"="S4"; jump "TransJmp_R9 is imm_24_27=0b0111 & imm_22_23=0 & S4 & imm_12_13=0 & D4_8_11 & TransJmp_R9 & imm_0=0 & hasext0=0 {
        D4_8_11 = S4;
        jump(TransJmp_R9);
	 }
	 :D4_8_11"="S4"; jump " v is imm_24_27=0b0111 & imm_22_23=0 & S4 & imm_12_13=0 & D4_8_11 & TransJmp_R9 & imm_0=0 & hasext0=1 & immext0used=0 & imm_1_6u [v = inst_start + (imm_1_6u | immext0); immext0used=1;] {
		D4_8_11 = S4;
		jump(v);
	 }
}

#LD:Load dword
with slot: iclass=0b0011 {
    :D5_pair"=memd("S5"+"T5"<<"u2")" is imm_21_27=0b1010110  & S5 & imm_13u & T5 & imm_7u & imm_5_6=0 & D5_pair [u2 = imm_7u | (imm_13u<<1); ]{
        local EA:4 = S5 + (T5 << u2);
        D5_pair = *[ram]:8 EA;
    }
}
with slot: iclass=0b0100 {
    :D5_pair "=memd(GP+" u16 ")" is imm_27=1 & imm_25_26u & imm_21_24=0b1110 & imm_16_20u & imm_5_13u & D5_pair [u16 = (imm_5_13u | (imm_16_20u << 9) | (imm_25_26u << 14)) << 3; ]{
        local tmp2:4 = GP + u16;
        D5_pair = *[ram]:8 tmp2;
    }
}
with slot: iclass=0b1001 {
	:D5_pair"=memd("S5",#"s11")" is imm_27=0 & imm_25_26 & S5 & D5_pair & imm_5_13u [ s11 = ((imm_5_13u | (imm_25_26 << 9))<<3);] {
        local EA:4 = S5 + s11;
        D5_pair = *[ram]:8 EA;
    }
    :"=dword3" is imm_21_27=0b1001110 & S5 & imm_13 & imm_12=0 & imm_10_11=0 & imm_9=0 & imm_5_8 & D5 {
    	_stub();
    }
    :"=dword4" is imm_21_27=0b1001110 & S5 & imm_13 & imm_12=0 & imm_10_11=0 & imm_9=1 & imm_8=0 & imm_7=0 & imm_5_6=0 & D5 {
    	_stub();
    }
    
    :"=dword5" is imm_21_27=0b1011110 & S5 & imm_12_13=0b01 & imm_8_11 & imm_7=0 & imm_5_6 & D5 {
    	_stub();
    }
    
    :D5_pair"=memd("S5"++#"v")" is imm_21_27=0b1011110 & S5 & imm_12_13=0b00 & imm_9_11 & imm_5_8 & D5_pair [v = imm_5_8 << 3;] {
        local EA:4 = S5;
        S5 = S5+v;
        D5_pair = *[ram]:8 EA;
    }
    
    :"=dword7" is imm_21_27=0b1011110 & S5 & imm_13 & imm_12=1 & imm_5_11 & D5 {
    	_stub();
    }
    
    :"=dword8" is imm_21_27=0b1101110 & S5 & imm_13 & imm_12=0 & imm_8_12=0 & imm_7=0 & imm_5_6=0 & D5 {
    	_stub();
    }
    :"=dword9" is imm_21_27=0b1111110 & S5 & imm_13 & imm_12=0 & imm_8_12=0 & imm_7=0 & imm_5_6=0 & D5 {
    	_stub();
    }
}

#LD:Load ac dword
with slot: iclass=0b1001 {
    :"memd_aq" is imm_21_27=0b0010000 & S5 & imm_11_13=0b011 & imm_8_10=0 & imm_5_7=0b000 & D5 {
    	_stub();
    }
}

#LD:Load dword cond
with slot: iclass=0b0011 {
    :"if(" U2_5_6 ")" D5_pair "=memd(" S5 "+" T5 "<<" u2 ")" is imm_21_27=0b0000110 & S5 & imm_13u & T5 & imm_8_12 & imm_7u & U2_5_6 & D5_pair [u2 = imm_7u | (imm_13u << 1);] {
    	if(U2_5_6 == 0) goto <end>;
		local EA:4 = S5 + (T5 << u2);
		D5_pair = *[ram]:8 EA;
	<end>
    }
    :"if(!" U2_5_6 ")" D5_pair "=memd(" S5 "+" T5 "<<" u2 ")" is imm_21_27=0b0001110 & S5 & imm_13u & T5 & imm_8_12 & imm_7u & U2_5_6 & D5_pair [u2 = imm_7u | (imm_13u << 1);] {
    	if(U2_5_6 != 0) goto <end>;
		local EA:4 = S5 + (T5 << u2);
		D5_pair = *[ram]:8 EA;
	<end>
    }
    :"if(" U2_5_6_pred_new ")" D5_pair "=memd(" S5 "+" T5 "<<" u2 ")" is imm_21_27=0b0010110 & S5 & imm_13u & T5 & imm_8_12 & imm_7u & U2_5_6_pred_new & D5_pair [u2 = imm_7u | (imm_13u << 1);] {
    	if(U2_5_6_pred_new == 0) goto <end>;
		local EA:4 = S5 + (T5 << u2);
		D5_pair = *[ram]:8 EA;
	<end>
    }
    :"if(!" U2_5_6_pred_new ")" D5_pair "=memd(" S5 "+" T5 "<<" u2 ")" is imm_21_27=0b0011110 & S5 & imm_13u & T5 & imm_8_12 & imm_7u & U2_5_6_pred_new & D5_pair [u2 = imm_7u | (imm_13u << 1);] {
    	if(U2_5_6_pred_new != 0) goto <end>;
		local EA:4 = S5 + (T5 << u2);
		D5_pair = *[ram]:8 EA;
	<end>
    }
}
with slot: iclass=0b0100 {
    :"if("T2_11_12_pred") "D5_pair"=memd("S5"+#"u6")" is imm_21_27=0b0001110 & S5 & imm_13=0 & T2_11_12_pred & imm_5_10 & D5_pair [ u6 = imm_5_10 << 3;]{
        if(T2_11_12_pred == 0) goto <end>;
        local EA:4 = S5 + u6;
        D5_pair = *[ram]:8 EA;
        <end>
    }
    :"if("T2_11_12_pred_new") "D5_pair"=memd("S5"+#"u6")" is imm_21_27=0b0011110 & S5 & imm_13=0 & T2_11_12_pred_new & imm_5_10 & D5_pair [ u6 = imm_5_10 << 3;]{
        if(T2_11_12_pred_new == 0) goto <end>;
        local EA:4 = S5 + u6;
        D5_pair = *[ram]:8 EA;
        <end>
    }
    :"if(!"T2_11_12_pred") "D5_pair"=memd("S5"+#"u6")" is imm_21_27=0b0101110 & S5 & imm_13=0 & T2_11_12_pred & imm_5_10 & D5_pair [ u6 = imm_5_10 << 3;]{
        if(T2_11_12_pred != 0) goto <end>;
        local EA:4 = S5 + u6;
        D5_pair = *[ram]:8 EA;
        <end>
    }
    :"if(!"T2_11_12_pred_new") "D5_pair"=memd("S5"+#"u6")" is imm_21_27=0b0111110 & S5 & imm_13=0 & T2_11_12_pred_new & imm_5_10 & D5_pair [ u6 = imm_5_10 << 3;]{
        if(T2_11_12_pred_new != 0) goto <end>;
        local EA:4 = S5 + u6;
        D5_pair = *[ram]:8 EA;
        <end>
    }
}

with slot: iclass=0b1001 {
    :"if("T2_9_10_pred") "D5_pair"=memd("S5"++#"s4")" is imm_21_27=0b1011110 & S5 & imm_11_13=0b100 &   T2_9_10_pred & imm_5_8 & D5_pair [s4 = imm_5_8 << 3;] {
        if(T2_9_10_pred == 0) goto <end>;
        local EA:4 = S5;
        S5 = S5 + s4;
        D5_pair = *[ram]:8 EA;
        <end>
    }
    :"if(!"T2_9_10_pred") "D5_pair"=memd("S5"++#"s4")" is imm_21_27=0b1011110 & S5 & imm_11_13=0b101 &   T2_9_10_pred & imm_5_8 & D5_pair [s4 = imm_5_8 << 3;] {
        if(T2_9_10_pred != 0) goto <end>;
        local EA:4 = S5;
        S5 = S5 + s4;
        D5_pair = *[ram]:8 EA;
        <end>
    }
    #TODO: check all dotnew, they will need change later
    :"if("T2_9_10_pred".new) "D5_pair"=memd("S5"++#"s4")" is imm_21_27=0b1011110 & S5 & imm_11_13=0b110 &   T2_9_10_pred & imm_5_8 & D5_pair [s4 = imm_5_8 << 3;] {
        if(T2_9_10_pred == 0) goto <end>;
        local EA:4 = S5;
        S5 = S5 + s4;
        D5_pair = *[ram]:8 EA;
        <end>
    }
    :"ldcondd11" is imm_21_27=0b1011110 & S5 & imm_11_13=0b111 & imm_9_10 & imm_5_8 & D5 {
    	_stub();
    }

    :"ldcondd12" is imm_21_27=0b1111110 & imm_16_20 & imm_11_13=0b100 & imm_9_10 & imm_8 & imm_7=1 & imm_5_6=0 & D5 {
    	_stub();
    }
    :"ldcondd13" is imm_21_27=0b1111110 & imm_16_20 & imm_11_13=0b101 & imm_9_10 & imm_8 & imm_7=1 & imm_5_6=0 & D5 {
    	_stub();
    }
    :"ldcondd14" is imm_21_27=0b1111110 & imm_16_20 & imm_11_13=0b110 & imm_9_10 & imm_8 & imm_7=1 & imm_5_6=0 & D5 {
    	_stub();
    }
    :"ldcondd15" is imm_21_27=0b1111110 & imm_16_20 & imm_11_13=0b111 & imm_9_10 & imm_8 & imm_7=1 & imm_5_6=0 & D5 {
    	_stub();
    }
}

#LD:Load by
with slot: iclass=0b0011 {
    :D5 "=memb(" S5 "+" T5 "<<" u2 ")" is imm_21_27=0b1010000 & S5 & imm_13u & T5 & imm_7u & imm_5_6=0 & D5 [ u2 = imm_7u | (imm_13u << 1);] {
        local EA:4 = S5 + (T5 << u2);
        D5 = *[ram]:1 EA;
    }
}
with slot: iclass=0b0100 {
    :D5"=memb(GP+"v")" is imm_27=1 & imm_25_26 & imm_21_24=0b1000 & imm_16_20u & imm_5_13u & D5 & hasext0=0 [v = (imm_5_13u | (imm_16_20u << 9) | (imm_25_26 << 14)) << 2; ]  {
        local EA:4 = GP + v;
        D5 = *[ram]:1 EA;
    }
    :D5"=memb("v")" is imm_27=1 & imm_25_26 & imm_21_24=0b1000 & imm_16_20u & imm_5_13u & D5 & hasext0=1 & immext0used=0 & immext0 & imm_5_10u [v = (imm_5_10u | immext0); immext0used=1; ]  {
        local EA:4 = GP + v;
        D5 = *[ram]:1 EA;
    }
}
with slot: iclass=0b1001 {
    :D5"=memb("S5","s11")" is imm_27=0 & imm_25_26 & imm_21_24=0b1000 & S5 & imm_5_13u & D5  [ s11 = ((imm_5_13u | (imm_25_26 << 9)));]{
        local EA:4 = S5 + s11;
        D5 = *[ram]:1 EA;
    }
    :"rd=memb4" is imm_21_27=0b1001000 & S5 & imm_13 & imm_12=0 & imm_10_11=0 & imm_9=0 & imm_5_8 & D5 {
        _stub();
    }
    :"rd=memb5" is imm_21_27=0b1001000 & S5 & imm_13 & imm_12=0 & imm_10_11=0 & imm_9=1 & imm_8=0 & imm_7=0 & imm_5_6=0 & D5 {
        _stub();
    }

    :"rd=memb6" is imm_21_27=0b1011000 & S5 & imm_12_13=0b01 & imm_8_11 & imm_7=0 & imm_5_6 & D5 {
        _stub();
    }
    :D5"=memb(" S5 "++" imm_5_8 ")" is imm_21_27=0b1011000 & S5 & imm_12_13=0b00 & imm_9_11=0 & imm_5_8 & D5 {
        local EA:4 = S5;
        S5 = S5+imm_5_8;
        D5 = *[ram]:1 EA;
    }
    :D5"=memb(" T5 "<<" u2 "+" U6 ")" is imm_21_27=0b1101000 & T5 & imm_13u & imm_12=1 & imm_8_11u & imm_7u & imm_5_6u & D5 [ u2 = imm_7u | (imm_13u << 1); U6 = imm_5_6u | (imm_8_11u << 2);] {
        local EA:4 = (T5 << u2) + U6;
        D5 = *[ram]:1 EA;
    }
    :"rd=memb9" is imm_21_27=0b1101000 & S5 & imm_13 & imm_12=0 & imm_8_11=0 & imm_7=0 & imm_5_6=0 & D5 {
        _stub();
    }
    :"rd=memb10" is imm_21_27=0b1111000 & S5 & imm_13 & imm_12=0 & imm_8_11=0 & imm_7=0 & imm_5_6=0 & D5 {
        _stub();
    }
}

#LD:Load by cond
with slot: iclass=0b0011 {
    :"ldcondb0" is imm_21_27=0b0000000 & S5 & imm_13 & imm_8_12 & imm_7 & imm_5_6 & D5 {
    	_stub();
    }
    :"ldcondb1" is imm_21_27=0b0001000 & S5 & imm_13 & imm_8_12 & imm_7 & imm_5_6 & D5 {
    	_stub();
    }
    :"ldcondb2" is imm_21_27=0b0010000 & S5 & imm_13 & imm_8_12 & imm_7 & imm_5_6 & D5 {
    	_stub();
    }
    :"ldcondb3" is imm_21_27=0b0011000 & S5 & imm_13 & imm_8_12 & imm_7 & imm_5_6 & D5 {
    	_stub();
    }
}
with slot: iclass=0b0100 {
    :"if("T2_11_12_pred") "D5"=memb("S5"+"imm_5_10u")" is imm_21_27=0b0001000 & S5 & imm_13=0 & T2_11_12_pred & imm_5_10u & D5 {
    	if(T2_11_12_pred == 0) goto <end>;
	local EA:4 = S5 + imm_5_10u;
	D5 = *[ram]:1 EA;
	<end>
    }
    :"if("T2_11_12_pred_new") "D5"=memb("S5"+"imm_5_10u")" is imm_21_27=0b0011000 & S5 & imm_13=0 & T2_11_12_pred_new & imm_5_10u & D5 {
    	if(T2_11_12_pred_new == 0) goto <end>;
	local EA:4 = S5 + imm_5_10u;
	D5 = *[ram]:1 EA;
	<end>
    }
    :"if(!"T2_11_12_pred") "D5"=memb("S5"+"imm_5_10u")" is imm_21_27=0b0101000 & S5 & imm_13=0 & T2_11_12_pred & imm_5_10u & D5 {
    	if(T2_11_12_pred != 0) goto <end>;
	local EA:4 = S5 + imm_5_10u;
	D5 = *[ram]:1 EA;
	<end>
    }
    :"if(!"T2_11_12_pred_new") "D5"=memb("S5"+"imm_5_10u")" is imm_21_27=0b0111000 & S5 & imm_13=0 & T2_11_12_pred_new & imm_5_10u & D5 {
    	if(T2_11_12_pred_new != 0) goto <end>;
	local EA:4 = S5 + imm_5_10u;
	D5 = *[ram]:1 EA;
	<end>
    }
}
with slot: iclass=0b1001 {
    :"if("T2_9_10_pred") "D5_pair"=memb("S5"++#"s4")" is imm_21_27=0b1011000 & S5 & imm_11_13=0b100 &   T2_9_10_pred & imm_5_8 & D5_pair [s4 = imm_5_8 << 3;] {
    _stub();
    }
    :"if(!"T2_9_10_pred") "D5_pair"=memb("S5"++#"s4")" is imm_21_27=0b1011000 & S5 & imm_11_13=0b101 &   T2_9_10_pred & imm_5_8 & D5_pair [s4 = imm_5_8 << 3;] {
    _stub();
    }
    #TODO: check all dotnew, they will need change later
    :"if("T2_9_10_pred".new) "D5_pair"=memb("S5"++#"s4")" is imm_21_27=0b1011000 & S5 & imm_11_13=0b110 &   T2_9_10_pred & imm_5_8 & D5_pair [s4 = imm_5_8 << 3;] {
    _stub();
    }
    :"ldcondb11" is imm_21_27=0b1011000 & S5 & imm_11_13=0b111 & imm_9_10 & imm_5_8 & D5 {
    	_stub();
    }

    :"ldcondb12" is imm_21_27=0b1111000 & imm_16_20 & imm_11_13=0b100 & imm_9_10 & imm_8 & imm_7=1 & imm_5_6=0 & D5 {
    	_stub();
    }
    :"ldcondb13" is imm_21_27=0b1111000 & imm_16_20 & imm_11_13=0b101 & imm_9_10 & imm_8 & imm_7=1 & imm_5_6=0 & D5 {
    	_stub();
    }
    :"ldcondb14" is imm_21_27=0b1111000 & imm_16_20 & imm_11_13=0b110 & imm_9_10 & imm_8 & imm_7=1 & imm_5_6=0 & D5 {
    	_stub();
    }
    :"ldcondb15" is imm_21_27=0b1111000 & imm_16_20 & imm_11_13=0b111 & imm_9_10 & imm_8 & imm_7=1 & imm_5_6=0 & D5 {
    	_stub();
    }
}

#LD:Load by shift TODO
#LD:Load by h shift TODO

#ld:load hw
with slot: iclass=0b0011 {
    :D5"=memh("S5"+"T5"<<"u2")" is imm_21_27=0b1010010 & S5 & imm_13u & T5 & imm_7u & imm_5_6=0 & D5 [u2 = imm_7u | (imm_13u<<1); ]{
        local EA:4 = S5 + (T5 << u2);
        D5 = *[ram]:2 EA;
    }
}
with slot: iclass=0b0100 {
    :D5"=memh(GP + "v")" is imm_27=1 & imm_25_26 & imm_21_24=0b1010 & imm_16_20u & imm_5_13u & D5 & hasext0=0 [v = (imm_5_13u | (imm_16_20u << 9) | (imm_25_26 << 14)) << 1; ]  {
        local EA:4 = GP + v;
        D5 = *[ram]:2 EA;
    }
}
with slot: iclass=0b1001 {
    :D5 "=memh(" S5 "+" s11 ")" is imm_27=0 & imm_25_26 & imm_21_24=0b1010 & S5 & imm_5_13u & D5 [ s11 = imm_5_13u | (imm_25_26 << 9);] {
        local EA:4 = S5 + 11;
        D5 = *[ram]:2 EA;
    }
    :"rd=memh4" is imm_21_27=0b1001010 & S5 & imm_13 & imm_12=0 & imm_10_11=0 & imm_9=0 & imm_5_8 & D5 {
        _stub();
    }
    :"rd=memh5" is imm_21_27=0b1001010 & S5 & imm_13 & imm_12=0 & imm_10_11=0 & imm_9=1 & imm_8=0 & imm_7=0 & imm_5_6=0 & D5 {
        _stub();
    }

    :"rd=memh6" is imm_21_27=0b1011010 & S5 & imm_12_13=0b01 & imm_8_11 & imm_7=0 & imm_5_6 & D5 {
        _stub();
    }
    :D5"=memh("S5"++"v")" is imm_21_27=0b1011010 & S5 & imm_12_13=0b00 & imm_9_11 & imm_5_8 & D5 [v = imm_5_8 << 1;] {
        local EA:4 = S5;
        S5 = S5+v;
        D5 = *[ram]:2 EA;
    }
    :D5"=memh(" T5 "<<" u2 "+" U6 ")" is imm_21_27=0b1101010 & T5 & imm_13u & imm_12=1 & imm_8_11u & imm_7u & imm_5_6u & D5 [ u2 = imm_7u | (imm_13u << 1); U6 = imm_5_6u | (imm_8_11u << 2);] {
        local EA:4 = (T5 << u2) + U6;
        D5 = *[ram]:2 EA;
    }
    :"rd=memh9" is imm_21_27=0b1101010 & S5 & imm_13 & imm_12=0 & imm_8_11=0 & imm_7=0 & imm_5_6=0 & D5 {
        _stub();
    }
    :"rd=memh10" is imm_21_27=0b1111010 & S5 & imm_13 & imm_12=0 & imm_8_11=0 & imm_7=0 & imm_5_6=0 & D5 {
        _stub();
    }
}

#ld:load hw cond
with slot: iclass=0b0011 {
    :"rd=memhc1" is imm_21_27=0b0000010 & S5 & imm_13 & T5 & imm_7 & imm_5_6 & D5  {
        _stub();
    }
    :"rd=memhc1" is imm_21_27=0b0001010 & S5 & imm_13 & T5 & imm_7 & imm_5_6 & D5  {
        _stub();
    }
    :"rd=memhc1" is imm_21_27=0b0010010 & S5 & imm_13 & T5 & imm_7 & imm_5_6 & D5  {
        _stub();
    }
    :"rd=memhc1" is imm_21_27=0b0011010 & S5 & imm_13 & T5 & imm_7 & imm_5_6 & D5  {
        _stub();
    }
}
with slot: iclass=0b0100 {
    :"if(" T2_11_12_pred ")" D5 "=memh(" S5 "+" u6 ")" is imm_21_27=0b0001010 & S5 & imm_13=0 & T2_11_12_pred & imm_5_10u & D5 [ u6 = imm_5_10u << 1;] {
    	if(T2_11_12_pred == 0) goto <end>;
		local EA:4 = S5 + u6;
		D5 = *[ram]:2 EA;
	<end>
    }
    :"if(" T2_11_12_pred_new ")" D5 "=memh(" S5 "+" u6 ")" is imm_21_27=0b0011010 & S5 & imm_13=0 & T2_11_12_pred_new & imm_5_10u & D5 [ u6 = imm_5_10u << 1;] {
    	if(T2_11_12_pred_new == 0) goto <end>;
		local EA:4 = S5 + u6;
		D5 = *[ram]:2 EA;
	<end>
    }
    :"if(!" T2_11_12_pred ")" D5 "=memh(" S5 "+" u6 ")" is imm_21_27=0b0101010 & S5 & imm_13=0 & T2_11_12_pred & imm_5_10u & D5 [ u6 = imm_5_10u << 1;] {
    	if(T2_11_12_pred != 0) goto <end>;
		local EA:4 = S5 + u6;
		D5 = *[ram]:2 EA;
	<end>
    }
    :"if(!" T2_11_12_pred_new ")" D5 "=memh(" S5 "+" u6 ")" is imm_21_27=0b0111010 & S5 & imm_13=0 & T2_11_12_pred_new & imm_5_10u & D5 [ u6 = imm_5_10u << 1;] {
    	if(T2_11_12_pred_new != 0) goto <end>;
		local EA:4 = S5 + u6;
		D5 = *[ram]:2 EA;
	<end>
    }
}
with slot: iclass=0b1001 {
    :"if("T2_9_10_pred") "D5_pair"=memh("S5"++#"s4")" is imm_21_27=0b1011010 & S5 & imm_11_13=0b100 &   T2_9_10_pred & imm_5_8 & D5_pair [s4 = imm_5_8 << 3;] {
        _stub();
    }
    :"if(!"T2_9_10_pred") "D5_pair"=memh("S5"++#"s4")" is imm_21_27=0b1011010 & S5 & imm_11_13=0b101 &   T2_9_10_pred & imm_5_8 & D5_pair [s4 = imm_5_8 << 3;] {
        _stub();
    }
    #TODO: check all dotnew, they will need change later
    :"if("T2_9_10_pred".new) "D5_pair"=memh("S5"++#"s4")" is imm_21_27=0b1011010 & S5 & imm_11_13=0b110 &   T2_9_10_pred & imm_5_8 & D5_pair [s4 = imm_5_8 << 3;] {
        _stub();
    }
    :"ldcondh11" is imm_21_27=0b1011010 & S5 & imm_11_13=0b111 & imm_9_10 & imm_5_8 & D5 {
    	_stub();
    }

    :"ldcondh12" is imm_21_27=0b1111010 & imm_16_20 & imm_11_13=0b100 & imm_9_10 & imm_8 & imm_7=1 & imm_5_6=0 & D5 {
    	_stub();
    }
    :"ldcondh13" is imm_21_27=0b1111010 & imm_16_20 & imm_11_13=0b101 & imm_9_10 & imm_8 & imm_7=1 & imm_5_6=0 & D5 {
    	_stub();
    }
    :"ldcondh14" is imm_21_27=0b1111010 & imm_16_20 & imm_11_13=0b110 & imm_9_10 & imm_8 & imm_7=1 & imm_5_6=0 & D5 {
    	_stub();
    }
    :"ldcondh15" is imm_21_27=0b1111010 & imm_16_20 & imm_11_13=0b111 & imm_9_10 & imm_8 & imm_7=1 & imm_5_6=0 & D5 {
    	_stub();
    }
}

#LD:memory copy
with slot: iclass=0b1001 {
    :D5"=pmemcp" is imm_21_27=0b1001111 & S5 & imm_13=0 & T5 & imm_5_7=0b000 & D5 {
    	_stub();
    }
}

#LD:piecemeal memory copy
with slot: iclass=0b0110 {
    :"=movlen" is imm_21_27=0b1111111 & S5 & imm_13=0 & T5 & imm_5_7=0b010 & D5 {
    	_stub();
    }
}
with slot: iclass=0b1001 {
    :"=linecpy" is imm_21_27=0b1001111 & S5 & imm_13=0 & T5 & imm_5_7=0b001 & D5 {
    	_stub();
    }
    # pmemcpy see above
}

#ld:load ub
with slot: iclass=0b0011 {
    :D5"=memub("S5"+"T5"#"u2")" is imm_21_27=0b1010001 & S5 & imm_13 & T5 & imm_7 & imm_5_6=0 & D5 [ u2 = (imm_7) | (imm_13 << 1);]  {
        local tmp:4 = T5 << u2;
        local tmp2:4 = S5 + T5;
        local tmp3:1 = *[ram]:1 tmp2;
	D5=zext(tmp3);
    }
}
with slot: iclass=0b0100 {
    :D5"=memub(GP+"u16")" is imm_27=1 & imm_25_26u & imm_21_24=0b1001 & imm_16_20u & imm_5_13u & D5 & hasext0=0 [u16 = imm_5_13u | (imm_16_20u << 9) | (imm_25_26u << 14); ] {
        local tmp:4 = u16;
        local tmp2:4 = GP + tmp;
        local tmp3:1 = *[ram]:1 tmp2;
	D5=zext(tmp3);
    }
    :D5"=memub("v")" is imm_27=1 & imm_25_26u & imm_21_24=0b1001 & imm_16_20u & imm_5_13u & D5 & hasext0=1 & immext0used=0 & immext0 & imm_5_10u [v = imm_5_10u | immext0; immext0used=1; ] {
        local tmp2:4 = v;
        local tmp3:1 = *[ram]:1 tmp2;
	D5=zext(tmp3);
    }
}
with slot: iclass=0b1001 {
    :D5"=memub("S5"+"s11")" is imm_27=0 & imm_25_26 & imm_21_24=0b1001 & S5 & imm_5_13u & D5 [ s11 = imm_5_13u | (imm_25_26 << 9); ]  {
        local tmp:4 = s11;
        local tmp2:4 = S5 + tmp;
        local tmp3:1 = *[ram]:1 tmp2;
	D5=zext(tmp3);
    }
    :"rd=memub4" is imm_21_27=0b1001001 & S5 & imm_13 & imm_12=0 & imm_10_11=0 & imm_9=0 & imm_5_8 & D5 {
        _stub();
    }
    :"rd=memub5" is imm_21_27=0b1001001 & S5 & imm_13 & imm_12=0 & imm_10_11=0 & imm_9=1 & imm_8=0 & imm_7=0 & imm_5_6=0 & D5 {
        _stub();
    }

    :"rd=memub6" is imm_21_27=0b1011001 & S5 & imm_12_13=0b01 & imm_8_11 & imm_7=0 & imm_5_6 & D5 {
        _stub();
    }
    :D5 "=memub(" S5 "++" imm_5_8 ")" is imm_21_27=0b1011001 & S5 & imm_12_13=0b00 & imm_9_11=0 & imm_5_8 & D5 {
        local EA:4 = S5;
        S5 = S5+imm_5_8;
        D5 = *[ram]:1 EA;
    }
    :D5 "=memub(" S5 "<<" u2 "+" u6 ")" is imm_21_27=0b1101001 & S5 & imm_13u & imm_12=1 & imm_8_11 & imm_7u & imm_5_6 & D5 [u2 = imm_7u | (imm_13u << 1); u6 = imm_5_6  | (imm_8_11 << 2);] {
        local EA:4 = (S5 << u2) + u6;
        D5 = *[ram]:1 EA;
    }

    :"rd=memub9" is imm_21_27=0b1101001 & S5 & imm_13 & imm_12=0 & imm_8_11=0 & imm_7=0 & imm_5_6=0 & D5 {
        _stub();
    }
    :"rd=memub10" is imm_21_27=0b1111001 & S5 & imm_13 & imm_12=0 & imm_8_11=0 & imm_7=0 & imm_5_6=0 & D5 {
        _stub();
    }
}


#ld:load ub cond
with slot: iclass=0b0011 {
    :"if(" U2_5_6 ")" D5 "=memub(" S5 "+" T5 "<<" u2 ")" is imm_21_27=0b0000001 & S5 & imm_13u & T5 & imm_8_12 & imm_7u & U2_5_6 & D5 [u2 = imm_7u | (imm_13u << 1);] {
    	if(U2_5_6 == 0) goto <end>;
		local EA:4 = S5 + (T5 << u2);
		D5 = *[ram]:1 EA;
	<end>
    }
    :"if(!" U2_5_6 ")" D5 "=memub(" S5 "+" T5 "<<" u2 ")" is imm_21_27=0b0001001 & S5 & imm_13u & T5 & imm_8_12 & imm_7u & U2_5_6 & D5 [u2 = imm_7u | (imm_13u << 1);] {
    	if(U2_5_6 != 0) goto <end>;
		local EA:4 = S5 + (T5 << u2);
		D5 = *[ram]:1 EA;
	<end>
    }
    :"if(" U2_5_6_pred_new ")" D5 "=memub(" S5 "+" T5 "<<" u2 ")" is imm_21_27=0b0010001 & S5 & imm_13u & T5 & imm_8_12 & imm_7u & U2_5_6_pred_new & D5 [u2 = imm_7u | (imm_13u << 1);] {
    	if(U2_5_6_pred_new == 0) goto <end>;
		local EA:4 = S5 + (T5 << u2);
		D5 = *[ram]:1 EA;
	<end>
    }
    :"if(!" U2_5_6_pred_new ")" D5 "=memub(" S5 "+" T5 "<<" u2 ")" is imm_21_27=0b0011001 & S5 & imm_13u & T5 & imm_8_12 & imm_7u & U2_5_6_pred_new & D5 [u2 = imm_7u | (imm_13u << 1);] {
    	if(U2_5_6_pred_new != 0) goto <end>;
		local EA:4 = S5 + (T5 << u2);
		D5 = *[ram]:1 EA;
	<end>
    }
}
with slot: iclass=0b0100 {
    :"if (" T2_11_12_pred ") " D5 "=memub(" S5 "+" imm_5_10u ")" is imm_21_27=0b0001001 & S5 & imm_13=0 & T2_11_12_pred & imm_5_10u & D5  {
    	if(T2_11_12_pred == 0) goto <end>;
		local EA:4 = S5 + imm_5_10u;
		D5 = *[ram]:1 EA;
	<end>
    }
    :"if (" T2_11_12_pred_new ") " D5 "=memub(" S5 "+" imm_5_10u ")" is imm_21_27=0b0011001 & S5 & imm_13=0 & T2_11_12_pred_new & imm_5_10u & D5  {
    	if(T2_11_12_pred_new == 0) goto <end>;
		local EA:4 = S5 + imm_5_10u;
		D5 = *[ram]:1 EA;
	<end>
    }
    :"if (!" T2_11_12_pred ") " D5 "=memub(" S5 "+" imm_5_10u ")" is imm_21_27=0b0101001 & S5 & imm_13=0 & T2_11_12_pred & imm_5_10u & D5  {
    	if(T2_11_12_pred != 0) goto <end>;
		local EA:4 = S5 + imm_5_10u;
		D5 = *[ram]:1 EA;
	<end>
    }
    :"if (!" T2_11_12_pred_new ") " D5 "=memub(" S5 "+" imm_5_10u ")" is imm_21_27=0b0111001 & S5 & imm_13=0 & T2_11_12_pred_new & imm_5_10u & D5  {
    	if(T2_11_12_pred_new != 0) goto <end>;
		local EA:4 = S5 + imm_5_10u;
		D5 = *[ram]:1 EA;
	<end>
    }
}
with slot: iclass=0b1001 {
    :"rd=membuc9" is imm_21_27=0b1011001 & S5 & imm_11_13=0b100 & imm_9_10 & imm_5_8 & D5  {
        _stub();
    }
    :"rd=membuc10" is imm_21_27=0b1011001 & S5 & imm_11_13=0b101 & imm_9_10 & imm_5_8 & D5  {
        _stub();
    }
    :"rd=membuc11" is imm_21_27=0b1011001 & S5 & imm_11_13=0b110 & imm_9_10 & imm_5_8 & D5  {
        _stub();
    }
    :"if(!" T2_9_10_pred_new ")" D5 "=memub("S5 "++" imm_5_8 ")" is imm_21_27=0b1011001 & S5 & imm_11_13=0b111 & T2_9_10_pred_new & imm_5_8 & D5  {
    	if(T2_9_10_pred_new != 0) goto <end>;
	D5 = *[ram]:1 S5;
	S5 = S5 + imm_5_8;
	<end>
    }

    :"ldcondub13" is imm_21_27=0b1111001 & imm_16_20 & imm_11_13=0b100 & imm_9_10 & imm_8 & imm_7=1 & imm_5_6=0 & D5 {
    	_stub();
    }
    :"ldcondub14" is imm_21_27=0b1111001 & imm_16_20 & imm_11_13=0b101 & imm_9_10 & imm_8 & imm_7=1 & imm_5_6=0 & D5 {
    	_stub();
    }
    :"ldcondub15" is imm_21_27=0b1111001 & imm_16_20 & imm_11_13=0b110 & imm_9_10 & imm_8 & imm_7=1 & imm_5_6=0 & D5 {
    	_stub();
    }
    :"ldcondub16" is imm_21_27=0b1111001 & imm_16_20 & imm_11_13=0b111 & imm_9_10 & imm_8 & imm_7=1 & imm_5_6=0 & D5 {
    	_stub();
    }
}

#ld:load uhw
with slot: iclass=0b0011 {
    :D5"=memuh(" S5 "+" T5 "<<" u2")" is imm_21_27=0b1010011 & S5 & imm_13u & T5 & imm_7u & imm_5_6=0 & D5 [ u2 = (imm_7u) | (imm_13u << 1);]  {
        local EA:4 = S5 + (T5  << u2);
        D5 = *[ram]:2 EA;
    }
}
with slot: iclass=0b0100 {
    :D5"=memuh(gp+"u16")" is imm_27=1 & imm_25_26u & imm_21_24=0b1011 & imm_16_20u & imm_5_13u & D5  [u16 = (imm_5_13u) | (imm_16_20u << 9) | (imm_25_26u << 14);]{
        local EA:4 = GP + u16;
        D5 = *[ram]:2 EA;
    }
}
#with wslot: iclass64=0b0100 {
    #:D564"=memuh("u16")" is imm64_27=1 & imm64_25_26u & imm64_21_24=0b1011 & imm64_16_20u & imm64_5_13u & D564 & immw_lou & immw_his & imm64_5_10u  [u16 = (imm64_5_10u)| (immw_lou << 6) | (immw_his << 20);]{
        #local EA:4 = u16;
        #D564 = *[ram]:2 EA;
    #}
#}
with slot: iclass=0b1001 {
    :D5"=memuh("S5"+"s11")" is imm_27=0 & imm_25_26 & imm_21_24=0b1011 & S5 & imm_5_13u & D5 [s11 = (imm_5_13u) | (imm_25_26 << 9);] {
    local EA:4 = S5 + s11;
    D5 = *[ram]:2 EA;
    }
    :"D5=memuh(S5++imm_5_8:circ(imm_13))" is imm_21_27=0b1001011 & S5 & imm_13 & imm_12=0 & imm_10_11=0 & imm_9=0 & imm_5_8 & D5 {
        _stub();
    }
    :"D5=memuh(S5++I:circ(imm_13))" is imm_21_27=0b1001011 & S5 & imm_13 & imm_12=0 & imm_10_11=0 & imm_9=1 & imm_8=0 & imm_7=0 & imm_5_6=0 & D5 {
        _stub();
    }

    :"D5=memuh(S5=U6)" is imm_21_27=0b1011011 & S5 & imm_12_13=0b01 & imm_8_11u & imm_7=0 & imm_5_6u & D5  { #[U6 = (imm_5_6u) | (imm_8_11u << 2);] {
        _stub();
    }
    :D5 "=memuh(" S5 "++" s4 ")" is imm_21_27=0b1011011 & S5 & imm_12_13=0b00 & imm_9_11=0 & imm_5_8 & D5 [s4 = imm_5_8 << 1;] {
        local EA:4 = S5;
        S5 = S5+s4;
        D5 = *[ram]:2 EA;
    }
    :D5 "=memuh(" S5 "<<" u2 "+" u6 ")" is imm_21_27=0b1101011 & S5 & imm_13u & imm_12=1 & imm_8_11 & imm_7u & imm_5_6 & D5 [u2 = imm_7u | (imm_13u << 1); u6 = imm_5_6  | (imm_8_11 << 2);] {
        local EA:4 = (S5 << u2) + u6;
        D5 = *[ram]:2 EA;
    }
    :"rd=memuh9" is imm_21_27=0b1101011 & S5 & imm_13 & imm_12=0 & imm_8_11=0 & imm_7=0 & imm_5_6=0 & D5 {
        _stub();
    }
    :"rd=memuh10" is imm_21_27=0b1111011 & S5 & imm_13 & imm_12=0 & imm_8_11=0 & imm_7=0 & imm_5_6=0 & D5 {
        _stub();
    }
}

# imm ext

#ld:load uhw cond
with slot: iclass=0b0011 {

    :"if(" U2_5_6 ")" D5 "=memuh(" S5 "+" T5 "<<" u2 ")" is imm_21_27=0b0000011 & S5 & imm_13u & T5 & imm_8_12 & imm_7u & U2_5_6 & D5 [u2 = imm_7u | (imm_13u << 1);] {
    	if(U2_5_6 == 0) goto <end>;
		local EA:4 = S5 + (T5 << u2);
		D5 = *[ram]:2 EA;
	<end>
    }
    :"if(!" U2_5_6 ")" D5 "=memuh(" S5 "+" T5 "<<" u2 ")" is imm_21_27=0b0001011 & S5 & imm_13u & T5 & imm_8_12 & imm_7u & U2_5_6 & D5 [u2 = imm_7u | (imm_13u << 1);] {
    	if(U2_5_6 != 0) goto <end>;
		local EA:4 = S5 + (T5 << u2);
		D5 = *[ram]:2 EA;
	<end>
    }
    :"if(" U2_5_6_pred_new ")" D5 "=memuh(" S5 "+" T5 "<<" u2 ")" is imm_21_27=0b0010011 & S5 & imm_13u & T5 & imm_8_12 & imm_7u & U2_5_6_pred_new & D5 [u2 = imm_7u | (imm_13u << 1);] {
    	if(U2_5_6_pred_new == 0) goto <end>;
		local EA:4 = S5 + (T5 << u2);
		D5 = *[ram]:2 EA;
	<end>
    }
    :"if(!" U2_5_6_pred_new ")" D5 "=memuh(" S5 "+" T5 "<<" u2 ")" is imm_21_27=0b0011011 & S5 & imm_13u & T5 & imm_8_12 & imm_7u & U2_5_6_pred_new & D5 [u2 = imm_7u | (imm_13u << 1);] {
    	if(U2_5_6_pred_new != 0) goto <end>;
		local EA:4 = S5 + (T5 << u2);
		D5 = *[ram]:2 EA;
	<end>
    }
}
with slot: iclass=0b0100 {
    :"if(" T2_11_12_pred ")" D5 "=memuh(" S5 "+" u6 ")" is imm_21_27=0b0001011 & S5 & imm_13=0 & T2_11_12_pred & imm_5_10u & D5 [u6 = imm_5_10u << 1;] {
    	if( T2_11_12_pred == 0) goto <end>;
	local EA:4 = S5 + u6;
	D5 = *[ram]:2 EA;
	<end>
    }
    :"if(" T2_11_12_pred_new ")" D5 "=memuh(" S5 "+" u6 ")" is imm_21_27=0b0011011 & S5 & imm_13=0 & T2_11_12_pred_new & imm_5_10u & D5 [u6 = imm_5_10u << 1;] {
    	if( T2_11_12_pred_new == 0) goto <end>;
	local EA:4 = S5 + u6;
	D5 = *[ram]:2 EA;
	<end>
    }
    :"if(!" T2_11_12_pred ")" D5 "=memuh(" S5 "+" u6 ")" is imm_21_27=0b0101011 & S5 & imm_13=0 & T2_11_12_pred & imm_5_10u & D5 [u6 = imm_5_10u << 1;] {
    	if( T2_11_12_pred != 0) goto <end>;
	local EA:4 = S5 + u6;
	D5 = *[ram]:2 EA;
	<end>
    }
    :"if(!" T2_11_12_pred_new ")" D5 "=memuh(" S5 "+" u6 ")"  is imm_21_27=0b0111011 & S5 & imm_13=0 & T2_11_12_pred_new & imm_5_10u & D5 [u6 = imm_5_10u << 1;] {
    	if( T2_11_12_pred_new != 0) goto <end>;
	local EA:4 = S5 + u6;
	D5 = *[ram]:2 EA;
	<end>
    }
}
with slot: iclass=0b1001 {
    :"rd=memhuc9" is imm_21_27=0b1011011 & S5 & imm_11_13=0b100 & imm_11_12 & imm_5_8 & D5  {
        _stub();
    }
    :"rd=memhuc10" is imm_21_27=0b1011011 & S5 & imm_11_13=0b101 & imm_11_12 & imm_5_8 & D5  {
        _stub();
    }
    :"rd=memhuc11" is imm_21_27=0b1011011 & S5 & imm_11_13=0b110 & imm_11_12 & imm_5_8 & D5  {
        _stub();
    }
    :"rd=memhuc12" is imm_21_27=0b1011011 & S5 & imm_11_13=0b111 & imm_11_12 & imm_5_8 & D5  {
        _stub();
    }

    :"ldconduh13" is imm_21_27=0b1111011 & imm_16_20 & imm_11_13=0b100 & imm_9_10 & imm_8 & imm_7=1 & imm_5_6=0 & D5 {
    	_stub();
    }
    :"ldconduh14" is imm_21_27=0b1111011 & imm_16_20 & imm_11_13=0b101 & imm_9_10 & imm_8 & imm_7=1 & imm_5_6=0 & D5 {
    	_stub();
    }
    :"ldconduh15" is imm_21_27=0b1111011 & imm_16_20 & imm_11_13=0b110 & imm_9_10 & imm_8 & imm_7=1 & imm_5_6=0 & D5 {
    	_stub();
    }
    :"if(!"T2_9_10_pred_new") "D5"=memuh("u6")" is imm_21_27=0b1111011 & imm_16_20u & imm_11_13=0b111 & T2_9_10_pred_new & imm_8u & imm_7=1 & imm_5_6=0 & D5 [u6 = imm_8u | (imm_16_20u << 1);] {
        if(T2_9_10_pred_new != 0) goto <end>;
        local EA:4 = u6;
        local tmp:2 = *[ram]:2 EA;
        D5 = zext(tmp);
        <end>
    }
}

#LD:Load word
with slot: iclass=0b0011 {
    :D5"=memw("S5"+"T5"<<"u2")" is imm_21_27=0b1010100 & S5 & imm_13u & T5 & imm_7u & imm_5_6=0 & D5 [ u2 = (imm_7u) | (imm_13u << 1);]  {
        local EA:4 = S5 + (T5 << u2);
        D5 = *[ram]:4 EA;
    }
}
with slot: iclass=0b0100 {
    :D5"=memw(GP+"v")" is imm_27=1 & imm_25_26 & imm_21_24=0b1100 & imm_16_20u & imm_5_13u & D5 & hasext0=0 [v = (imm_5_13u | (imm_16_20u << 9) | (imm_25_26 << 14)) << 2; ]  {
        local EA:4 = GP + v;
        D5 = *[ram]:4 EA;
    }
    :D5"=memw("v")" is imm_27=1 & imm_25_26 & imm_21_24=0b1100 & imm_16_20u & imm_5_13u & D5 & hasext0=1 & immext0used=0 & immext0 & imm_5_10u [v = (immext0) | imm_5_10u; immext0used=1; ]  {
        local EA:4 = v;
        D5 = *[ram]:4 EA;
    }
}
with slot: iclass=0b1001 {
    :D5"=memw("S5"+"s11")" is imm_27=0 & imm_25_26 & imm_21_24=0b1100 & S5 & imm_5_13u & D5 & hasext0=0 [s11 = (imm_5_13u | (imm_25_26 << 9))<<2;] {
        local EA:4 = S5 + s11;
        D5 = *[ram]:4 EA;
    }
    :D5"=memw("S5"+"s11")" is imm_27=0 & imm_25_26 & imm_21_24=0b1100 & S5 & imm_5_13u & D5 & hasext0=1 & immext0used=0 & immext0 & imm_5_10u [s11 = (immext0) | imm_5_10u; immext0used=1;] {
        local EA:4 = S5 + s11;
        D5 = *[ram]:4 EA;
    }

    :"rd=memw3" is imm_21_27=0b1001100 & S5 & imm_13 & imm_12=0 & imm_10_11=0 & imm_9=0 & imm_5_8 & D5  {
        _stub();
    }
    :"rd=memw4" is imm_21_27=0b1001100 & S5 & imm_13 & imm_12=0 & imm_10_11=0 & imm_9=1 & imm_5_8 & D5  {
        _stub();
    }
    :D5 "=memw(" S5 "=" u6")" is imm_21_27=0b1011100 & S5 & imm_12_13=0b01 & imm_8_11u & imm_7=0 & imm_5_6u & D5 & hasext0=0 [u6 = imm_5_6u | (imm_8_11u<<2);] {
    	local EA:4 = u6;
	D5 = *[ram]:4 EA;
	S5 = EA;
    }
    :D5 "=memw(" S5 "=" u6")" is imm_21_27=0b1011100 & S5 & imm_12_13=0b01 & imm_8_11u & imm_7=0 & imm_5_6u & D5 & hasext0=1 & immext0used=0 [u6 = immext0 | (imm_5_6u | (imm_8_11u<<2)); immext0used=1;] {
    	local EA:4 = u6;
	D5 = *[ram]:4 EA;
	S5 = EA;
    }
    :D5 "=memw(" S5 "++" s4 ")" is imm_21_27=0b1011100 & S5 & imm_12_13=0b00 & imm_9_11=0 & imm_5_8 & D5  [s4 = imm_5_8 << 2;] {
        local EA:4 = S5;
        S5 = S5+s4;
        D5 = *[ram]:4 EA;
    }
    :D5 "=memw(" S5 "<<" u2 "+" u6 ")" is imm_21_27=0b1101100 & S5 & imm_13u & imm_12=1 & imm_8_11 & imm_7u & imm_5_6 & D5 [u2 = imm_7u | (imm_13u << 1); u6 = imm_5_6  | (imm_8_11 << 2);] {
        local EA:4 = (S5 << u2) + u6;
        D5 = *[ram]:4 EA;
    }
    :"rd=memw8" is imm_21_27=0b1101100 & S5 & imm_13 & imm_12=0 & imm_8_11=0 & imm_7=0 & imm_5_6=0 & D5  {
        _stub();
    }
    :"rd=memw9" is imm_21_27=0b1111100 & S5 & imm_13 & imm_12=0 & imm_8_11=0 & imm_7=0 & imm_5_6=0 & D5  {
        _stub();
    }
}

#LD:Load ac word
with slot: iclass=0b1001 {
    :"memw_aq" is imm_21_27=0b0010000 & S5 & imm_11_13=0b001 & imm_8_10=0 & imm_5_7=0b000 & D5 {
    	_stub();
    }
}


#LD:Load word cond
with slot: iclass=0b0011 {
    :"if(" U2_5_6 ")" D5 "=memw(" S5 "+" T5 "<<" u2 ")" is imm_21_27=0b0000100 & S5 & imm_13u & T5 & imm_8_12 & imm_7u & U2_5_6 & D5 [u2 = imm_7u | (imm_13u << 1);] {
    	if(U2_5_6 == 0) goto <end>;
		local EA:4 = S5 + (T5 << u2);
		D5 = *[ram]:4 EA;
	<end>
    }
    :"if(!" U2_5_6 ")" D5 "=memw(" S5 "+" T5 "<<" u2 ")" is imm_21_27=0b0001100 & S5 & imm_13u & T5 & imm_8_12 & imm_7u & U2_5_6 & D5 [u2 = imm_7u | (imm_13u << 1);] {
    	if(U2_5_6 != 0) goto <end>;
		local EA:4 = S5 + (T5 << u2);
		D5 = *[ram]:4 EA;
	<end>
    }
    :"if(" U2_5_6_pred_new ")" D5 "=memw(" S5 "+" T5 "<<" u2 ")" is imm_21_27=0b0010100 & S5 & imm_13u & T5 & imm_8_12 & imm_7u & U2_5_6_pred_new & D5 [u2 = imm_7u | (imm_13u << 1);] {
    	if(U2_5_6_pred_new == 0) goto <end>;
		local EA:4 = S5 + (T5 << u2);
		D5 = *[ram]:4 EA;
	<end>
    }
    :"if(!" U2_5_6_pred_new ")" D5 "=memw(" S5 "+" T5 "<<" u2 ")" is imm_21_27=0b0011100 & S5 & imm_13u & T5 & imm_8_12 & imm_7u & U2_5_6_pred_new & D5 [u2 = imm_7u | (imm_13u << 1);] {
    	if(U2_5_6_pred_new != 0) goto <end>;
		local EA:4 = S5 + (T5 << u2);
		D5 = *[ram]:4 EA;
	<end>
    }
}
with slot: iclass=0b0100 {
    :"if(" T2_11_12_pred ")" D5 "=memw(" S5 "+" u6 ")" is imm_21_27=0b0001100 & S5 & imm_13=0 & T2_11_12_pred & imm_5_10u & D5 [u6 = imm_5_10u<<2;] {
        local cond:1 = T2_11_12_pred != 0;
    	if(!cond) goto <end>;
	local EA:4 = S5 + u6;
	D5 = *[ram]:4 EA;
	<end>
    }
    :"if(" T2_11_12_pred_new ")" D5 "=memw(" S5 "+" u6 ")" is imm_21_27=0b0011100 & S5 & imm_13=0 & T2_11_12_pred_new & imm_5_10u & D5 [u6 = imm_5_10u<<2;] {
        local cond:1 = T2_11_12_pred_new != 0;
    	if(!cond) goto <end>;
	local EA:4 = S5 + u6;
	D5 = *[ram]:4 EA;
	<end>
    }
    :"if(!" T2_11_12_pred ")" D5 "=memw(" S5 "+" u6 ")" is imm_21_27=0b0101100 & S5 & imm_13=0 & T2_11_12_pred & imm_5_10u & D5 [u6 = imm_5_10u<<2;] {
        local cond:1 = T2_11_12_pred != 0;
    	if(cond) goto <end>;
	local EA:4 = S5 + u6;
	D5 = *[ram]:4 EA;
	<end>
    }
    :"if(!" T2_11_12_pred_new ")" D5 "=memw(" S5 "+" u6 ")" is imm_21_27=0b0111100 & S5 & imm_13=0 & T2_11_12_pred_new & imm_5_10u & D5 [u6 = imm_5_10u<<2;] {
        local cond:1 = T2_11_12_pred_new != 0;
    	if(cond) goto <end>;
	local EA:4 = S5 + u6;
	D5 = *[ram]:4 EA;
	<end>
    }
}
with slot: iclass=0b1001 {
    :"lwcond9()" is imm_21_27=0b1011100 & S5 & imm_11_13=0b100 & imm_9_10 & imm_5_8 & D5  {
        _stub();
    }
    :"lwcond10()" is imm_21_27=0b1011100 & S5 & imm_11_13=0b101 & imm_9_10 & imm_5_8 & D5  {
        _stub();
    }
    :"lwcond11()" is imm_21_27=0b1011100 & S5 & imm_11_13=0b110 & imm_9_10 & imm_5_8 & D5  {
        _stub();
    }
    :"lwcond11()" is imm_21_27=0b1011100 & S5 & imm_11_13=0b111 & imm_9_10 & imm_5_8 & D5  {
        _stub();
    }

    :"if(" T2_9_10_pred ")" D5 "=memw(" u6 ")" is imm_21_27=0b1111100 & imm_16_20u & imm_11_13=0b100 & T2_9_10_pred & imm_8u & imm_7=1 & imm_5_6=0 & D5 [u6 = imm_8u | (imm_16_20u << 1);] {
    	if(T2_9_10_pred == 0) goto <end>;
		local EA:4 = u6;
		D5 = *[ram]:4 EA;
	<end>
    }
    :"if(!" T2_9_10_pred ")" D5 "=memw(" u6 ")" is imm_21_27=0b1111100 & imm_16_20u & imm_11_13=0b101 & T2_9_10_pred & imm_8u & imm_7=1 & imm_5_6=0 & D5 [u6 = imm_8u | (imm_16_20u << 1);] {
    	if(T2_9_10_pred != 0) goto <end>;
		local EA:4 = u6;
		D5 = *[ram]:4 EA;
	<end>
    }
    :"if(" T2_9_10_pred_new ")" D5 "=memw(" u6 ")" is imm_21_27=0b1111100 & imm_16_20u & imm_11_13=0b110 & T2_9_10_pred_new & imm_8u & imm_7=1 & imm_5_6=0 & D5 [u6 = imm_8u | (imm_16_20u << 1);] {
    	if(T2_9_10_pred_new == 0) goto <end>;
		local EA:4 = u6;
		D5 = *[ram]:4 EA;
	<end>
    }
    :"if(!" T2_9_10_pred_new ")" D5 "=memw(" u6 ")" is imm_21_27=0b1111100 & imm_16_20u & imm_11_13=0b111 & T2_9_10_pred_new & imm_8u & imm_7=1 & imm_5_6=0 & D5 [u6 = imm_8u | (imm_16_20u << 1);] {
    	if(T2_9_10_pred_new != 0) goto <end>;
		local EA:4 = u6;
		D5 = *[ram]:4 EA;
	<end>
    }
}

#LD:Dealloc
with slot: iclass=0b1001 {
    :D5_pair"=deallocframe("S5"):raw" is imm_21_27=0b0000000 & S5 & imm_13=0 & imm_5_12=0 & D5_pair & imm_0=0 {
        local EA:4 = S5;
        local tmp:8 = *[ram]:8 EA;
        D5_pair = tmp;
        SP=EA+8;
    }
}

#LD:Dealloc return
with slot: iclass=0b1001 {
    slot:D5_pair"=dealloc_return("S5"):raw" is imm_21_27=0b0110000 & S5 & imm_10_13=0 & imm_5_9=0 & D5_pair & imm_0=0 {
        local EA:4 = S5;
        local tmp:8 = *[ram]:8 EA;
        D5_pair = tmp;

        local tmp2:8 = tmp>>32;
        local tmp3:4 = tmp2:4;

        SP = EA+8;
#TODO
        return [tmp3];
    }
}

#TODO
#LD:Ld and unpack by to hw TODO

# MEMOP/byte
with slot: iclass=0b0011 {
    :"memb("S5"+"imm_7_12u")+="D5 is imm_24_27=0b1110 & imm_23=0 & imm_21_22=0b00 & S5 & imm_13=0 & imm_7_12u & imm_5_6=0b00 & D5 {
        local EA:4 = S5 + imm_7_12u;
        local tmp:1 = *[ram]:1 EA;
        tmp = tmp + D5:1;
        *[ram]:1 EA = tmp;
    }
    :"memb("S5"+"imm_7_12u")-="D5 is imm_24_27=0b1110 & imm_23=0 & imm_21_22=0b00 & S5 & imm_13=0 & imm_7_12u & imm_5_6=0b01 & D5 {
        local EA:4 = S5 + imm_7_12u;
        local tmp:1 = *[ram]:1 EA;
        tmp = tmp - D5:1;
        *[ram]:1 EA = tmp;
    }
    :"memb("S5"+"imm_7_12u")&="D5 is imm_24_27=0b1110 & imm_23=0 & imm_21_22=0b00 & S5 & imm_13=0 & imm_7_12u & imm_5_6=0b10 & D5 {
        local EA:4 = S5 + imm_7_12u;
        local tmp:1 = *[ram]:1 EA;
        tmp = tmp & D5:1;
        *[ram]:1 EA = tmp;
    }
    :"memb("S5"+"imm_7_12u")|="D5 is imm_24_27=0b1110 & imm_23=0 & imm_21_22=0b00 & S5 & imm_13=0 & imm_7_12u & imm_5_6=0b11 & D5 {
        local EA:4 = S5 + imm_7_12u;
        local tmp:1 = *[ram]:1 EA;
        tmp = tmp | D5:1;
        *[ram]:1 EA = tmp;
    }


    :"memb("S5"+"imm_7_12u")+="imm_0_4u is imm_24_27=0b1111 & imm_23=0 & imm_21_22=0b00 & S5 & imm_13=0 & imm_7_12u & imm_5_6=0b00 & imm_0_4u {
        local EA:4 = S5 + imm_7_12u;
        local tmp:1 = *[ram]:1 EA;
        tmp = tmp + imm_0_4u;
        *[ram]:1 EA = tmp;
    }
    :"memb("S5"+"imm_7_12u")-="imm_0_4u is imm_24_27=0b1111 & imm_23=0 & imm_21_22=0b00 & S5 & imm_13=0 & imm_7_12u & imm_5_6=0b01 & imm_0_4u {
        local EA:4 = S5 + imm_7_12u;
        local tmp:1 = *[ram]:1 EA;
        tmp = tmp - imm_0_4u;
        *[ram]:1 EA = tmp;
    }
    :"memb("S5"+"imm_7_12u")=clrbit("imm_0_4u")" is imm_24_27=0b1111 & imm_23=0 & imm_21_22=0b00 & S5 & imm_13=0 & imm_7_12u & imm_5_6=0b10 & imm_0_4u {
        local EA:4 = S5 + imm_7_12u;
        local tmp:1 = *[ram]:1 EA;
        tmp = tmp & (~(1 << imm_0_4u));
        *[ram]:1 EA = tmp;
    }
    :"memb("S5"+"imm_7_12u")=setbit("imm_0_4u")" is imm_24_27=0b1111 & imm_23=0 & imm_21_22=0b00 & S5 & imm_13=0 & imm_7_12u & imm_5_6=0b11 & imm_0_4u {
        local EA:4 = S5 + imm_7_12u;
        local tmp:1 = *[ram]:1 EA;
        tmp = tmp & (1 << imm_0_4u);
        *[ram]:1 EA = tmp;
    }
}

# MEMOP/hw
with slot: iclass=0b0011 {
    :"memh("S5"+"u6")+="D5 is imm_24_27=0b1110 & imm_23=0 & imm_21_22=0b01 & S5 & imm_13=0 & imm_7_12u & imm_5_6=0b00 & D5  [ u6 = imm_7_12u << 1;] {
        local EA:4 = S5 + u6;
        local tmp:2 = *[ram]:2 EA;
        tmp = tmp + D5:2;
        *[ram]:2 EA = tmp;
    }
    :"memh("S5"+"u6")-="D5 is imm_24_27=0b1110 & imm_23=0 & imm_21_22=0b01 & S5 & imm_13=0 & imm_7_12u & imm_5_6=0b01 & D5 [ u6 = imm_7_12u << 1;] {
        local EA:4 = S5 + u6;
        local tmp:2 = *[ram]:2 EA;
        tmp = tmp - D5:2;
        *[ram]:2 EA = tmp;
    }
    :"memh("S5"+"u6")&="D5 is imm_24_27=0b1110 & imm_23=0 & imm_21_22=0b01 & S5 & imm_13=0 & imm_7_12u & imm_5_6=0b10 & D5 [ u6 = imm_7_12u << 1;] {
        local EA:4 = S5 + u6;
        local tmp:2 = *[ram]:2 EA;
        tmp = tmp & D5:2;
        *[ram]:2 EA = tmp;
    }
    :"memh("S5"+"u6")|="D5 is imm_24_27=0b1110 & imm_23=0 & imm_21_22=0b01 & S5 & imm_13=0 & imm_7_12u & imm_5_6=0b11 & D5 [ u6 = imm_7_12u << 1;] {
        local EA:4 = S5 + u6;
        local tmp:2 = *[ram]:2 EA;
        tmp = tmp | D5:2;
        *[ram]:2 EA = tmp;
    }

    :"memh("S5"+"u6")+="imm_0_4u is imm_24_27=0b1111 & imm_23=0 & imm_21_22=0b01 & S5 & imm_13=0 & imm_7_12u & imm_5_6=0b00 & imm_0_4u [ u6 = imm_7_12u << 1;]{
        local EA:4 = S5 + u6;
        local tmp:2 = *[ram]:2 EA;
        tmp = tmp + imm_0_4u;
        *[ram]:2 EA = tmp;
    }
    :"memh("S5"+"u6")-="imm_0_4u is imm_24_27=0b1111 & imm_23=0 & imm_21_22=0b01 & S5 & imm_13=0 & imm_7_12u & imm_5_6=0b01 & imm_0_4u [ u6 = imm_7_12u << 1;]{
        local EA:4 = S5 + u6;
        local tmp:2 = *[ram]:2 EA;
        tmp = tmp - imm_0_4u;
        *[ram]:2 EA = tmp;
    }
    :"memh("S5"+"u6")=clrbit("imm_0_4u")" is imm_24_27=0b1111 & imm_23=0 & imm_21_22=0b01 & S5 & imm_13=0 & imm_7_12u & imm_5_6=0b10 & imm_0_4u [ u6 = imm_7_12u << 1;]{
        local EA:4 = S5 + u6;
        local tmp:2 = *[ram]:2 EA;
        tmp = tmp & (~(1 << imm_0_4u));
        *[ram]:2 EA = tmp;
    }
    :"memh("S5"+"u6")=setbit("imm_0_4u")" is imm_24_27=0b1111 & imm_23=0 & imm_21_22=0b01 & S5 & imm_13=0 & imm_7_12u & imm_5_6=0b11 & imm_0_4u [ u6 = imm_7_12u << 1;]{
        local EA:4 = S5 + u6;
        local tmp:2 = *[ram]:2 EA;
        tmp = tmp & (1 << imm_0_4u);
        *[ram]:2 EA = tmp;
    }
}


# MEMOP/word
with slot: iclass=0b0011 {
    :"memw("S5"+"u6")+="D5 is imm_24_27=0b1110 & imm_23=0 & imm_21_22=0b10 & S5 & imm_13=0 & imm_7_12u & imm_5_6=0b00 & D5  [ u6 = imm_7_12u << 2;] {
        local EA:4 = S5 + u6;
        local tmp:4 = *[ram]:4 EA;
        tmp = tmp + D5:4;
        *[ram]:4 EA = tmp;
    }
    :"memw("S5"+"u6")-="D5 is imm_24_27=0b1110 & imm_23=0 & imm_21_22=0b10 & S5 & imm_13=0 & imm_7_12u & imm_5_6=0b01 & D5 [ u6 = imm_7_12u << 2;] {
        local EA:4 = S5 + u6;
        local tmp:4 = *[ram]:4 EA;
        tmp = tmp - D5:4;
        *[ram]:4 EA = tmp;
    }
    :"memw("S5"+"u6")&="D5 is imm_24_27=0b1110 & imm_23=0 & imm_21_22=0b10 & S5 & imm_13=0 & imm_7_12u & imm_5_6=0b10 & D5 [ u6 = imm_7_12u << 2;] {
        local EA:4 = S5 + u6;
        local tmp:4 = *[ram]:4 EA;
        tmp = tmp & D5:4;
        *[ram]:4 EA = tmp;
    }
    :"memw("S5"+"u6")|="D5 is imm_24_27=0b1110 & imm_23=0 & imm_21_22=0b10 & S5 & imm_13=0 & imm_7_12u & imm_5_6=0b11 & D5 [ u6 = imm_7_12u << 2;] {
        local EA:4 = S5 + u6;
        local tmp:4 = *[ram]:4 EA;
        tmp = tmp | D5:4;
        *[ram]:4 EA = tmp;
    }

    :"memw("S5"+"u6")+="imm_0_4u is imm_24_27=0b1111 & imm_23=0 & imm_21_22=0b10 & S5 & imm_13=0 & imm_7_12u & imm_5_6=0b00 & imm_0_4u [ u6 = imm_7_12u << 2;]{
        local EA:4 = S5 + u6;
        local tmp:4 = *[ram]:4 EA;
        tmp = tmp + imm_0_4u;
        *[ram]:4 EA = tmp;
    }
    :"memw("S5"+"u6")-="imm_0_4u is imm_24_27=0b1111 & imm_23=0 & imm_21_22=0b10 & S5 & imm_13=0 & imm_7_12u & imm_5_6=0b01 & imm_0_4u [ u6 = imm_7_12u << 2;]{
        local EA:4 = S5 + u6;
        local tmp:4 = *[ram]:4 EA;
        tmp = tmp - imm_0_4u;
        *[ram]:4 EA = tmp;
    }
    :"memw("S5"+"u6")=clrbit("imm_0_4u")" is imm_24_27=0b1111 & imm_23=0 & imm_21_22=0b10 & S5 & imm_13=0 & imm_7_12u & imm_5_6=0b10 & imm_0_4u [ u6 = imm_7_12u << 2;]{
        local EA:4 = S5 + u6;
        local tmp:4 = *[ram]:4 EA;
        tmp = tmp & (~(1 << imm_0_4u));
        *[ram]:4 EA = tmp;
    }
    :"memw("S5"+"u6")=setbit("imm_0_4u")" is imm_24_27=0b1111 & imm_23=0 & imm_21_22=0b10 & S5 & imm_13=0 & imm_7_12u & imm_5_6=0b11 & imm_0_4u [ u6 = imm_7_12u << 2;]{
        local EA:4 = S5 + u6;
        local tmp:4 = *[ram]:4 EA;
        tmp = tmp & (1 << imm_0_4u);
        *[ram]:4 EA = tmp;
    }

}

# NV/J
# TODO: this should be dotnew, for now this will work-ish
with slot: iclass=0b0010 {
    :"if(cmp.eq("S3_new_16_18","T5") jmp:nt "r9 is imm_22_27=0b000000 & imm_20_21 & imm_19=0 & S3_new_16_18 & imm_13=0 & T5 & imm_1_7u & imm_0=0 [ r9 = inst_start + ((imm_1_7u | (imm_20_21 << 7)) << 2); ] {
	if(S3_new_16_18 != T5) goto <end>;
	jump(r9);
	<end>
    }
    :"if(cmp.eq("S3_new_16_18","T5") jmp:t "r9 is imm_22_27=0b000000 & imm_20_21 & imm_19=0 & S3_new_16_18 & imm_13=1 & T5 & imm_1_7u & imm_0=0 [ r9 = inst_start + ((imm_1_7u | (imm_20_21 << 7)) << 2); ]{
	if(S3_new_16_18 != T5) goto <end>;
	jump(r9);
	<end>
    }
    :"if(!cmp.eq("S3_new_16_18","T5") jmp:nt "r9 is imm_22_27=0b000001 & imm_20_21 & imm_19=0 & S3_new_16_18 & imm_13=0 & T5 & imm_1_7u & imm_0=0 [ r9 = inst_start + ((imm_1_7u | (imm_20_21 << 7)) << 2); ]{
	if(S3_new_16_18 == T5) goto <end>;
	jump(r9);
	<end>
    }
    :"if(!cmp.eq("S3_new_16_18","T5") jmp:t "r9 is imm_22_27=0b000001 & imm_20_21 & imm_19=0 & S3_new_16_18 & imm_13=1 & T5 & imm_1_7u & imm_0=0 [ r9 = inst_start + ((imm_1_7u | (imm_20_21 << 7)) << 2); ]{
	if(S3_new_16_18 == T5) goto <end>;
	jump(r9);
	<end>
    }

    :"if(cmp.gt("S3_new_16_18","T5") jmp:nt "r9 is imm_22_27=0b000010 & imm_20_21 & imm_19=0 & S3_new_16_18 & imm_13=0 & T5 & imm_1_7u & imm_0=0 [ r9 = inst_start + ((imm_1_7u | (imm_20_21 << 7)) << 2); ]{
	if(S3_new_16_18 s<= T5) goto <end>;
	jump(r9);
	<end>
    }
    :"if(cmp.gt("S3_new_16_18","T5") jmp:t "r9 is imm_22_27=0b000010 & imm_20_21 & imm_19=0 & S3_new_16_18 & imm_13=1 & T5 & imm_1_7u & imm_0=0 [ r9 = inst_start + ((imm_1_7u | (imm_20_21 << 7)) << 2); ]{
	if(S3_new_16_18 s<= T5) goto <end>;
	jump(r9);
	<end>
    }
    :"if(!cmp.gt("S3_new_16_18","T5") jmp:nt "r9 is imm_22_27=0b000011 & imm_20_21 & imm_19=0 & S3_new_16_18 & imm_13=0 & T5 & imm_1_7u & imm_0=0 [ r9 = inst_start + ((imm_1_7u | (imm_20_21 << 7)) << 2); ]{
	if(S3_new_16_18 s> T5) goto <end>;
	jump(r9);
	<end>
    }
    :"if(!cmp.gt("S3_new_16_18","T5") jmp:t "r9 is imm_22_27=0b000011 & imm_20_21 & imm_19=0 & S3_new_16_18 & imm_13=1 & T5 & imm_1_7u & imm_0=0 [ r9 = inst_start + ((imm_1_7u | (imm_20_21 << 7)) << 2); ]{
	if(S3_new_16_18 s> T5) goto <end>;
	jump(r9);
	<end>
    }

    :"if(cmp.gtu("S3_new_16_18","T5") jmp:nt "r9 is imm_22_27=0b000100 & imm_20_21 & imm_19=0 & S3_new_16_18 & imm_13=0 & T5 & imm_1_7u & imm_0=0 [ r9 = inst_start + ((imm_1_7u | (imm_20_21 << 7)) << 2); ]{
	if(S3_new_16_18 s<= T5) goto <end>;
	jump(r9);
	<end>
    }
    :"if(cmp.gtu("S3_new_16_18","T5") jmp:t "r9 is imm_22_27=0b000100 & imm_20_21 & imm_19=0 & S3_new_16_18 & imm_13=1 & T5 & imm_1_7u & imm_0=0 [ r9 = inst_start + ((imm_1_7u | (imm_20_21 << 7)) << 2); ]{
	if(S3_new_16_18 <= T5) goto <end>;
	jump(r9);
	<end>
    }

    :"if(!cmp.gtu("S3_new_16_18","T5") jmp:nt "r9 is imm_22_27=0b000101 & imm_20_21 & imm_19=0 & S3_new_16_18 & imm_13=0 & T5 & imm_1_7u & imm_0=0 [ r9 = inst_start + ((imm_1_7u | (imm_20_21 << 7)) << 2); ]{
	if(S3_new_16_18 > T5) goto <end>;
	jump(r9);
	<end>
    }
#np
    :"if(!cmp.gtu("S3_new_16_18","T5") jmp:t "r9 is imm_22_27=0b000101 & imm_20_21 & imm_19=0 & S3_new_16_18 & imm_13=1 & T5 & imm_1_7u & imm_0=0 [ r9 = inst_start + ((imm_1_7u | (imm_20_21 << 7)) << 2); ]{
	if(S3_new_16_18 > T5) goto <end>;
	jump(r9);
	<end>
    }





    :"if(cmp.gt(" T5 "," S3_new_16_18 ") jmp:nt "r9 is imm_22_27=0b000110 & imm_20_21 & imm_19=0 & S3_new_16_18 & imm_13=0 & T5 & imm_1_7u & imm_0=0 [ r9 = inst_start + ((imm_1_7u | (imm_20_21 << 7)) << 2); ]{
	if(T5 s<= S3_new_16_18) goto <end>;
	jump(r9);
	<end>
    }
    :"if(cmp.gt("S3_new_16_18","T5") jmp:t "r9 is imm_22_27=0b000110 & imm_20_21 & imm_19=0 & S3_new_16_18 & imm_13=1 & T5 & imm_1_7u & imm_0=0 [ r9 = inst_start + ((imm_1_7u | (imm_20_21 << 7)) << 2); ]{
	if(T5 s<= S3_new_16_18) goto <end>;
	jump(r9);
	<end>
    }
    :"if(cmp.gt(" T5 "," S3_new_16_18 ") jmp:nt "r9 is imm_22_27=0b000111 & imm_20_21 & imm_19=0 & S3_new_16_18 & imm_13=0 & T5 & imm_1_7u & imm_0=0 [ r9 = inst_start + ((imm_1_7u | (imm_20_21 << 7)) << 2); ]{
	if(T5 s> S3_new_16_18) goto <end>;
	jump(r9);
	<end>
    }
    :"if(cmp.gt("S3_new_16_18","T5") jmp:t "r9 is imm_22_27=0b000111 & imm_20_21 & imm_19=0 & S3_new_16_18 & imm_13=1 & T5 & imm_1_7u & imm_0=0 [ r9 = inst_start + ((imm_1_7u | (imm_20_21 << 7)) << 2); ]{
	if(T5 s> S3_new_16_18) goto <end>;
	jump(r9);
	<end>
    }
    :"if(cmp.gtu("S3_new_16_18","T5") jmp:t "r9 is imm_22_27=0b001000 & imm_20_21 & imm_19=0 & S3_new_16_18 & imm_13=0 & T5 & imm_1_7u & imm_0=0 [ r9 = inst_start + ((imm_1_7u | (imm_20_21 << 7)) << 2); ]{
	if(S3_new_16_18 <= T5) goto <end>;
	jump(r9);
	<end>
    }
    :"if(cmp.gtu("S3_new_16_18","T5") jmp:t "r9 is imm_22_27=0b001000 & imm_20_21 & imm_19=0 & S3_new_16_18 & imm_13=1 & T5 & imm_1_7u & imm_0=0 [ r9 = inst_start + ((imm_1_7u | (imm_20_21 << 7)) << 2); ]{
	if(S3_new_16_18 <= T5) goto <end>;
	jump(r9);
	<end>
    }
    :"if(!cmp.gtu("S3_new_16_18","T5") jmp:t "r9 is imm_22_27=0b001001 & imm_20_21 & imm_19=0 & S3_new_16_18 & imm_13=0 & T5 & imm_1_7u & imm_0=0 [ r9 = inst_start + ((imm_1_7u | (imm_20_21 << 7)) << 2); ]{
	if(S3_new_16_18 > T5) goto <end>;
	jump(r9);
	<end>
    }
    :"if(!cmp.gtu("S3_new_16_18","T5") jmp:t "r9 is imm_22_27=0b001001 & imm_20_21 & imm_19=0 & S3_new_16_18 & imm_13=1 & T5 & imm_1_7u & imm_0=0 [ r9 = inst_start + ((imm_1_7u | (imm_20_21 << 7)) << 2); ]{
	if(S3_new_16_18 > T5) goto <end>;
	jump(r9);
	<end>
    }

#ns
    :"if(cmp.eq(" S3_new_16_18 "," imm_8_12u ") jump:nt" r9  is imm_22_27=0b010000 & imm_20_21 & imm_19=0 & S3_new_16_18 & imm_13=0 & imm_8_12u & imm_1_7u & imm_0=0 [ r9 = inst_start + ((imm_1_7u | (imm_20_21 << 7)) << 2); ]{
	if(S3_new_16_18 != imm_8_12u) goto <end>;
	jump(r9);
	<end>
    }
    :"if(cmp.eq(" S3_new_16_18 "," imm_8_12u ") jump:t" r9  is imm_22_27=0b010000 & imm_20_21 & imm_19=0 & S3_new_16_18 & imm_13=1 & imm_8_12u & imm_1_7u & imm_0=0 [ r9 = inst_start + ((imm_1_7u | (imm_20_21 << 7)) << 2); ]{
	if(S3_new_16_18 != imm_8_12u) goto <end>;
	jump(r9);
	<end>
    }
    :"if(!cmp.eq(" S3_new_16_18 "," imm_8_12u ") jump:t" r9  is imm_22_27=0b010001 & imm_20_21 & imm_19=0 & S3_new_16_18 & imm_13=0 & imm_8_12u & imm_1_7u & imm_0=0 [ r9 = inst_start + ((imm_1_7u | (imm_20_21 << 7)) << 2); ]{
	if(S3_new_16_18 == imm_8_12u) goto <end>;
	jump(r9);
	<end>
    }
    :"if(!cmp.eq(" S3_new_16_18 "," imm_8_12u ") jump:nt" r9  is imm_22_27=0b010001 & imm_20_21 & imm_19=0 & S3_new_16_18 & imm_13=1 & imm_8_12u & imm_1_7u & imm_0=0 [ r9 = inst_start + ((imm_1_7u | (imm_20_21 << 7)) << 2); ]{
	if(S3_new_16_18 == imm_8_12u) goto <end>;
	jump(r9);
	<end>
    }

    :"if(cmp.gt(" S3_new_16_18 "," imm_8_12u ") jump:nt" r9  is imm_22_27=0b010010 & imm_20_21 & imm_19=0 & S3_new_16_18 & imm_13=0 & imm_8_12u & imm_1_7u & imm_0=0 [ r9 = inst_start + ((imm_1_7u | (imm_20_21 << 7)) << 2); ]{
	if(S3_new_16_18 <= imm_8_12u) goto <end>;
	jump(r9);
	<end>
    }
    :"if(cmp.gt(" S3_new_16_18 "," imm_8_12u ") jump:t" r9  is imm_22_27=0b010010 & imm_20_21 & imm_19=0 & S3_new_16_18 & imm_13=1 & imm_8_12u & imm_1_7u & imm_0=0 [ r9 = inst_start + ((imm_1_7u | (imm_20_21 << 7)) << 2); ]{
	if(S3_new_16_18 <= imm_8_12u) goto <end>;
	jump(r9);
	<end>
    }
    :"if(!cmp.gt(" S3_new_16_18 "," imm_8_12u ") jump:nt" r9  is imm_22_27=0b010011 & imm_20_21 & imm_19=0 & S3_new_16_18 & imm_13=0 & imm_8_12u & imm_1_7u & imm_0=0 [ r9 = inst_start + ((imm_1_7u | (imm_20_21 << 7)) << 2); ]{
	if(S3_new_16_18 > imm_8_12u) goto <end>;
	jump(r9);
	<end>
    }
    :"if(!cmp.gt(" S3_new_16_18 "," imm_8_12u ") jump:t" r9  is imm_22_27=0b010011 & imm_20_21 & imm_19=0 & S3_new_16_18 & imm_13=1 & imm_8_12u & imm_1_7u & imm_0=0 [ r9 = inst_start + ((imm_1_7u | (imm_20_21 << 7)) << 2); ]{
	if(S3_new_16_18 > imm_8_12u) goto <end>;
	jump(r9);
	<end>
    }

    :"if(cmp.gtu(" S3_new_16_18 "," imm_8_12u ") jump:nt" r9  is imm_22_27=0b010100 & imm_20_21 & imm_19=0 & S3_new_16_18 & imm_13=0 & imm_8_12u & imm_1_7u & imm_0=0 [ r9 = inst_start + ((imm_1_7u | (imm_20_21 << 7)) << 2); ]{
	if(S3_new_16_18 <= imm_8_12u) goto <end>;
	jump(r9);
	<end>
    }
    :"if(cmp.gtu(" S3_new_16_18 "," imm_8_12u ") jump:t" r9  is imm_22_27=0b010100 & imm_20_21 & imm_19=0 & S3_new_16_18 & imm_13=1 & imm_8_12u & imm_1_7u & imm_0=0 [ r9 = inst_start + ((imm_1_7u | (imm_20_21 << 7)) << 2); ]{
	if(S3_new_16_18 <= imm_8_12u) goto <end>;
	jump(r9);
	<end>
    }
    :"if(!cmp.gtu(" S3_new_16_18 "," imm_8_12u ") jump:nt" r9  is imm_22_27=0b010101 & imm_20_21 & imm_19=0 & S3_new_16_18 & imm_13=0 & imm_8_12u & imm_1_7u & imm_0=0 [ r9 = inst_start + ((imm_1_7u | (imm_20_21 << 7)) << 2); ]{
	if(S3_new_16_18 > imm_8_12u) goto <end>;
	jump(r9);
	<end>
    }
    :"if(!cmp.gtu(" S3_new_16_18 "," imm_8_12u ") jump:t" r9  is imm_22_27=0b010101 & imm_20_21 & imm_19=0 & S3_new_16_18 & imm_13=1 & imm_8_12u & imm_1_7u & imm_0=0 [ r9 = inst_start + ((imm_1_7u | (imm_20_21 << 7)) << 2); ]{
	if(S3_new_16_18 > imm_8_12u) goto <end>;
	jump(r9);
	<end>
    }

    :"if(tstbit(" S3_new_16_18 ",0) jump:nt" r9  is imm_22_27=0b010110 & imm_20_21 & imm_19=0 & S3_new_16_18 & imm_13=0 & imm_8_12=0 & imm_1_7u & imm_0=0 [ r9 = inst_start + ((imm_1_7u | (imm_20_21 << 7)) << 2); ]{
    	local tmp:1 = (S3_new_16_18 & 1) != 0;
	if(!tmp) goto <end>;
	jump(r9);
	<end>
    }
    :"if(tstbit(" S3_new_16_18 ",0) jump:t" r9  is imm_22_27=0b010110 & imm_20_21 & imm_19=0 & S3_new_16_18 & imm_13=1 & imm_8_12=0 & imm_1_7u & imm_0=0 [ r9 = inst_start + ((imm_1_7u | (imm_20_21 << 7)) << 2); ]{
    	local tmp:1 = (S3_new_16_18 & 1) != 0;
	if(!tmp) goto <end>;
	jump(r9);
	<end>
    }
    :"if(!tstbit(" S3_new_16_18 ",0) jump:nt" r9  is imm_22_27=0b010111 & imm_20_21 & imm_19=0 & S3_new_16_18 & imm_13=0 & imm_8_12=0 & imm_1_7u & imm_0=0 [ r9 = inst_start + ((imm_1_7u | (imm_20_21 << 7)) << 2); ]{
    	local tmp:1 = (S3_new_16_18 & 1) != 0;
	if(tmp) goto <end>;
	jump(r9);
	<end>
    }
    :"if(!tstbit(" S3_new_16_18 ",0) jump:t" r9  is imm_22_27=0b010111 & imm_20_21 & imm_19=0 & S3_new_16_18 & imm_13=1 & imm_8_12=0 & imm_1_7u & imm_0=0 [ r9 = inst_start + ((imm_1_7u | (imm_20_21 << 7)) << 2); ]{
    	local tmp:1 = (S3_new_16_18 & 1) != 0;
	if(tmp) goto <end>;
	jump(r9);
	<end>
    }
    :"if(cmp.eq(" S3_new_16_18 ",-1) jump:nt" r9  is imm_22_27=0b011000 & imm_20_21 & imm_19=0 & S3_new_16_18 & imm_13=0 & imm_8_12=0 & imm_1_7u & imm_0=0 [ r9 = inst_start + ((imm_1_7u | (imm_20_21 << 7)) << 2); ]{
	if(S3_new_16_18 != -1) goto <end>;
	jump(r9);
	<end>
    }
    :"if(cmp.eq(" S3_new_16_18 ",-1) jump:t" r9  is imm_22_27=0b011000 & imm_20_21 & imm_19=0 & S3_new_16_18 & imm_13=1 & imm_8_12=0 & imm_1_7u & imm_0=0 [ r9 = inst_start + ((imm_1_7u | (imm_20_21 << 7)) << 2); ]{
	if(S3_new_16_18 != -1) goto <end>;
	jump(r9);
	<end>
    }
    :"if(!cmp.eq(" S3_new_16_18 ",-1) jump:nt" r9  is imm_22_27=0b011001 & imm_20_21 & imm_19=0 & S3_new_16_18 & imm_13=0 & imm_8_12=0 & imm_1_7u & imm_0=0 [ r9 = inst_start + ((imm_1_7u | (imm_20_21 << 7)) << 2); ]{
	if(S3_new_16_18 == -1) goto <end>;
	jump(r9);
	<end>
    }
    :"if(!cmp.eq(" S3_new_16_18 ",-1) jump:t" r9  is imm_22_27=0b011001 & imm_20_21 & imm_19=0 & S3_new_16_18 & imm_13=1 & imm_8_12=0 & imm_1_7u & imm_0=0 [ r9 = inst_start + ((imm_1_7u | (imm_20_21 << 7)) << 2); ]{
	if(S3_new_16_18 == -1) goto <end>;
	jump(r9);
	<end>
    }

    :"if(cmp.gt(" S3_new_16_18 ",-1) jump:nt" r9  is imm_22_27=0b011010 & imm_20_21 & imm_19=0 & S3_new_16_18 & imm_13=0 & imm_8_12=0 & imm_1_7u & imm_0=0 [ r9 = inst_start + ((imm_1_7u | (imm_20_21 << 7)) << 2); ]{
	if(S3_new_16_18 s<= -1) goto <end>;
	jump(r9);
	<end>
    }
    :"if(cmp.gt(" S3_new_16_18 ",-1) jump:t" r9  is imm_22_27=0b011010 & imm_20_21 & imm_19=0 & S3_new_16_18 & imm_13=1 & imm_8_12=0 & imm_1_7u & imm_0=0 [ r9 = inst_start + ((imm_1_7u | (imm_20_21 << 7)) << 2); ]{
	if(S3_new_16_18 s<= -1) goto <end>;
	jump(r9);
	<end>
    }
    :"if(!cmp.gt(" S3_new_16_18 ",-1) jump:nt" r9  is imm_22_27=0b011011 & imm_20_21 & imm_19=0 & S3_new_16_18 & imm_13=0 & imm_8_12=0 & imm_1_7u & imm_0=0 [ r9 = inst_start + ((imm_1_7u | (imm_20_21 << 7)) << 2); ]{
	if(S3_new_16_18 s> -1) goto <end>;
	jump(r9);
	<end>
    }
    :"if(!cmp.gt(" S3_new_16_18 ",-1) jump:t" r9  is imm_22_27=0b011011 & imm_20_21 & imm_19=0 & S3_new_16_18 & imm_13=1 & imm_8_12=0 & imm_1_7u & imm_0=0 [ r9 = inst_start + ((imm_1_7u | (imm_20_21 << 7)) << 2); ]{
	if(S3_new_16_18 s> -1) goto <end>;
	jump(r9);
	<end>
    }
}

# NV/ST:ST new-value byte
with slot: iclass=0b0011 {
    :"membnew1" is imm_21_27=0b1011101 & S5 & imm_13 & T5 & imm_7 & imm_5_6=0 & imm_3_4=0b00 & imm_0_2 {
    _stub();
    }
}
with slot: iclass=0b0100 {
    :"membnew2" is imm_27=1 & imm_25_26 & imm_21_24=0b0101 & imm_16_20 & imm_13 & imm_11_12=0b00 & imm_8_10 & imm_0_7 {
    _stub();
    }
}
with slot: iclass=0b1010 {
    :"memb(" S5 "+" s11 ")=" T3_new_8_10 is imm_27=0 & imm_25_26 & imm_21_24=0b1101 & S5 & imm_13u & imm_11_12=0b00 & T3_new_8_10 & imm_0_7u [s11 = imm_0_7u | (imm_13u<<8) | (imm_25_26 << 9);]{
    	local EA:4 = S5 + s11;
	*[ram]:1 EA = T3_new_8_10;
    }
    :"membnew4" is imm_21_27=0b1001101 & S5 & imm_13 & imm_11_12=0b00 & imm_8_10 & imm_7=0 & imm_2_6=0 & imm_1=1 & imm_0=0 {
    _stub();
    }
    :"membnew5" is imm_21_27=0b1001101 & S5 & imm_13 & imm_11_12=0b00 & imm_8_10 & imm_7=0 & imm_3_6 & imm_2=0 & imm_1=0 & imm_0=0 {
    _stub();
    }
    :"membnew6" is imm_21_27=0b1011101 & S5 & imm_11_13=0b000 & imm_8_10 & imm_7=1 & imm_6=0 & imm_0_5 {
    _stub();
    }
    :"memb(" S5 "++" imm_3_6 ")=" T3_new_8_10 is imm_21_27=0b1011101 & S5 & imm_11_13=0b000 & T3_new_8_10 & imm_7=0 & imm_3_6 & imm_2=0 & imm_1=0 & imm_0=0 {
    	local EA:4 = S5;
	S5 = S5 + imm_3_6;
	*[ram]:1 EA = T3_new_8_10;
    }
    :"membnew8" is imm_21_27=0b1101101 & S5 & imm_13 & imm_11_12=0b00 & imm_8_10 & imm_7=1 & imm_6 & imm_0_5 {
    _stub();
    }
    :"membnew9" is imm_21_27=0b1101101 & S5 & imm_13 & imm_11_12=0b00 & imm_8_10 & imm_7=0 & imm_0_6 {
    _stub();
    }
    :"membnew10" is imm_21_27=0b1111101 & S5 & imm_13 & imm_11_12=0b00 & imm_8_10 & imm_7=0 & imm_0_6 {
    _stub();
    }
}

# NV/ST:ST new-value byte cond
with slot: iclass=0b0011 {
    :"stnvcond00()" is imm_21_27=0b0100101 & S5 & imm_13 & T5 & imm_7 & imm_5_6 & imm_3_4=0b00 & T3_0_2  {
        _stub();
    }
    :"stnvcond01()" is imm_21_27=0b0101101 & S5 & imm_13 & T5 & imm_7 & imm_5_6 & imm_3_4=0b00 & T3_0_2  {
        _stub();
    }
    :"stnvcond02()" is imm_21_27=0b0110101 & S5 & imm_13 & T5 & imm_7 & imm_5_6 & imm_3_4=0b00 & T3_0_2  {
        _stub();
    }
    :"stnvcond03()" is imm_21_27=0b0111101 & S5 & imm_13 & T5 & imm_7 & imm_5_6 & imm_3_4=0b00 & T3_0_2  {
        _stub();
    }
}
with slot: iclass=0b0100 {
    :"if(pv)memb" is imm_21_27=0b0000101 & S5 & imm_13 & imm_11_12=0b00 & imm_8_10 & imm_3_7 & imm_2=0 & imm_0_1 {
    _stub();
    }
    :"if(pv.new)memb" is imm_21_27=0b0010101 & S5 & imm_13 & imm_11_12=0b00 & imm_8_10 & imm_3_7 & imm_2=0 & imm_0_1 {
    _stub();
    }
    :"if(!pv)memb" is imm_21_27=0b0100101 & S5 & imm_13 & imm_11_12=0b00 & imm_8_10 & imm_3_7 & imm_2=0 & imm_0_1 {
    _stub();
    }
    :"if(!pv.new)memb" is imm_21_27=0b0110101 & S5 & imm_13 & imm_11_12=0b00 & imm_8_10 & imm_3_7 & imm_2=0 & imm_0_1 {
    _stub();
    }
}
with slot: iclass=0b1010 {
    :"if(pv)memb" is imm_21_27=0b1011101 & S5 & imm_13=1 & imm_11_12=0b00 & imm_8_10 & imm_7=0 & imm_3_6 & imm_2=0 & imm_0_1 {
    _stub();
    }
    :"if(pv.new)memb" is imm_21_27=0b1011101 & S5 & imm_13=1 & imm_11_12=0b00 & imm_8_10 & imm_7=0 & imm_3_6 & imm_2=1 & imm_0_1 {
    _stub();
    }
    :"if(!pv)memb" is imm_21_27=0b1011101 & S5 & imm_13=1 & imm_11_12=0b00 & imm_8_10 & imm_7=1 & imm_3_6 & imm_2=0 & imm_0_1 {
    _stub();
    }
    :"if(!pv.new)memb" is imm_21_27=0b1011101 & S5 & imm_13=1 & imm_11_12=0b00 & imm_8_10 & imm_7=1 & imm_3_6 & imm_2=1 & imm_0_1 {
    _stub();
    }

    :"if(pv)memb" is imm_21_27=0b1111101 & imm_18_20=0 & imm_16_17 & imm_11_13=0b000 & imm_8_10 & imm_7=1 & imm_3_6 & imm_2=0 & imm_0_1 {
    _stub();
    }
    :"if(!pv)memb" is imm_21_27=0b1111101 & imm_18_20=0 & imm_16_17 & imm_11_13=0b000 & imm_8_10 & imm_7=1 & imm_3_6 & imm_2=1 & imm_0_1 {
    _stub();
    }
    :"if(pv.new)memb" is imm_21_27=0b1111101 & imm_18_20=0 & imm_16_17 & imm_11_13=0b100 & imm_8_10 & imm_7=1 & imm_3_6 & imm_2=0 & imm_0_1 {
    _stub();
    }
    :"if(!pv.new)memb" is imm_21_27=0b1111101 & imm_18_20=0 & imm_16_17 & imm_11_13=0b100 & imm_8_10 & imm_7=1 & imm_3_6 & imm_2=1 & imm_0_1 {
    _stub();
    }
}

# NV/ST:ST new-value half word
with slot: iclass=0b0011 {
    :"memh(" S5 "+" T5 "<<" u2 ")=" T3_0_2_new is imm_21_27=0b1011101 & S5 & imm_13u & T5 & imm_7u & imm_5_6=0 & imm_3_4=0b01 & T3_0_2_new[ u2 = imm_7u | (imm_13u << 1);] {
        local EA:4 = S5 + (T5 << u2);
        *[ram]:2 EA = T3_0_2_new;
    }
}
with slot: iclass=0b0100 {
    :"memhnew2" is imm_27=1 & imm_25_26 & imm_21_24=0b0101 & imm_16_20 & imm_13 & imm_11_12=0b01 & imm_8_10 & imm_0_7 {
    _stub();
    }
}
with slot: iclass=0b1010 {
    :"memh(" S5 "+" s11 ")=" T3_new_8_10 is imm_27=0 & imm_25_26 & imm_21_24=0b1101 & S5 & imm_13u & imm_11_12=0b01 & T3_new_8_10 & imm_0_7u [ s11 = imm_0_7u | (imm_13u << 8) | (imm_25_26 << 9); ] {
        local EA:4 = S5 + s11;
        *[ram]:2 EA = T3_new_8_10;
    }
    :"memhnew4" is imm_21_27=0b1001101 & S5 & imm_13 & imm_11_12=0b01 & imm_8_10 & imm_7=0 & imm_2_6=0 & imm_1=1 & imm_0=0 {
    _stub();
    }
    :"memhnew5" is imm_21_27=0b1001101 & S5 & imm_13 & imm_11_12=0b01 & imm_8_10 & imm_7=0 & imm_3_6 & imm_2=0 & imm_1=0 & imm_0=0 {
    _stub();
    }
    :"memhnew6" is imm_21_27=0b1011101 & S5 & imm_11_13=0b001 & imm_8_10 & imm_7=1 & imm_6=0 & imm_0_5 {
    _stub();
    }
    :"memh(" S5 "++" s4 ")=" T3_new_8_10 is imm_21_27=0b1011101 & S5 & imm_11_13=0b001 & T3_new_8_10 & imm_7=0 & imm_3_6 & imm_2=0 & imm_1=0 & imm_0=0 [ s4 = imm_3_6 << 1;] {
        local EA:4 = S5;
        S5 = S5 + s4;
        *[ram]:2 EA = T3_new_8_10;
    }
    :"memhnew8" is imm_21_27=0b1101101 & S5 & imm_13 & imm_11_12=0b01 & imm_8_10 & imm_7=1 & imm_6 & imm_0_5 {
    _stub();
    }
    :"memhnew9" is imm_21_27=0b1101101 & S5 & imm_13 & imm_11_12=0b01 & imm_8_10 & imm_7=0 & imm_0_6 {
    _stub();
    }
    :"memhnew10" is imm_21_27=0b1111101 & S5 & imm_13 & imm_11_12=0b01 & imm_8_10 & imm_7=0 & imm_0_6 {
    _stub();
    }
}
# NV/ST:ST new-value half word cond
with slot: iclass=0b0011 {
    :"stnvcondh00()" is imm_21_27=0b0100101 & S5 & imm_13 & T5 & imm_7 & imm_5_6 & imm_3_4=0b01 & T3_0_2  {
        _stub();
    }
    :"stnvcondh01()" is imm_21_27=0b0101101 & S5 & imm_13 & T5 & imm_7 & imm_5_6 & imm_3_4=0b01 & T3_0_2  {
        _stub();
    }
    :"stnvcondh02()" is imm_21_27=0b0110101 & S5 & imm_13 & T5 & imm_7 & imm_5_6 & imm_3_4=0b01 & T3_0_2  {
        _stub();
    }
    :"stnvcondh03()" is imm_21_27=0b0111101 & S5 & imm_13 & T5 & imm_7 & imm_5_6 & imm_3_4=0b01 & T3_0_2  {
        _stub();
    }
}
with slot: iclass=0b0100 {
    :"stnvcondh04()" is imm_21_27=0b0000101 & S5 & imm_13 & imm_11_12=0b01 & imm_8_10 & imm_3_7 & imm_2=0 & imm_0_1 {
    _stub();
    }
    :"stnvcondh05()" is imm_21_27=0b0010101 & S5 & imm_13 & imm_11_12=0b01 & imm_8_10 & imm_3_7 & imm_2=0 & imm_0_1 {
    _stub();
    }
    :"stnvcondh06()" is imm_21_27=0b0100101 & S5 & imm_13 & imm_11_12=0b01 & imm_8_10 & imm_3_7 & imm_2=0 & imm_0_1 {
    _stub();
    }
    :"stnvcondh07()" is imm_21_27=0b0110101 & S5 & imm_13 & imm_11_12=0b01 & imm_8_10 & imm_3_7 & imm_2=0 & imm_0_1 {
    _stub();
    }
}
with slot: iclass=0b1010 {
    :"stnvcondh08()" is imm_21_27=0b1011101 & S5 & imm_13=1 & imm_11_12=0b01 & imm_8_10 & imm_7=0 & imm_3_6 & imm_2=0 & imm_0_1 {
    _stub();
    }
    :"stnvcondh09()" is imm_21_27=0b1011101 & S5 & imm_13=1 & imm_11_12=0b01 & imm_8_10 & imm_7=0 & imm_3_6 & imm_2=1 & imm_0_1 {
    _stub();
    }
    :"stnvcondh10()" is imm_21_27=0b1011101 & S5 & imm_13=1 & imm_11_12=0b01 & imm_8_10 & imm_7=1 & imm_3_6 & imm_2=0 & imm_0_1 {
    _stub();
    }
    :"stnvcondh11()" is imm_21_27=0b1011101 & S5 & imm_13=1 & imm_11_12=0b01 & imm_8_10 & imm_7=1 & imm_3_6 & imm_2=1 & imm_0_1 {
    _stub();
    }

    :"stnvcondh12()" is imm_21_27=0b1111101 & imm_18_20=0 & imm_16_17 & imm_11_13=0b001 & imm_8_10 & imm_7=1 & imm_3_6 & imm_2=0 & imm_0_1 {
    _stub();
    }
    :"stnvcondh13()" is imm_21_27=0b1111101 & imm_18_20=0 & imm_16_17 & imm_11_13=0b001 & imm_8_10 & imm_7=1 & imm_3_6 & imm_2=1 & imm_0_1 {
    _stub();
    }
    :"stnvcondh14()" is imm_21_27=0b1111101 & imm_18_20=0 & imm_16_17 & imm_11_13=0b101 & imm_8_10 & imm_7=1 & imm_3_6 & imm_2=0 & imm_0_1 {
    _stub();
    }
    :"stnvcondh15()" is imm_21_27=0b1111101 & imm_18_20=0 & imm_16_17 & imm_11_13=0b101 & imm_8_10 & imm_7=1 & imm_3_6 & imm_2=1 & imm_0_1 {
    _stub();
    }
}

# NV/ST:ST new-value word
with slot: iclass=0b0011 {
    :"memw(" S5 "+" T5 "<<" u2 ")=" T3_0_2_new is imm_21_27=0b1011101 & S5 & imm_13u & T5 & imm_7u & imm_5_6=0 & imm_3_4=0b10 & T3_0_2_new[ u2 = imm_7u | (imm_13u << 1);] {
        local EA:4 = S5 + (T5 << u2);
        *[ram]:4 EA = T3_0_2_new;
    }
}
with slot: iclass=0b0100 {
    :"memw(GP+"u16")="T3_new_8_10 is imm_27=1 & imm_25_26u & imm_21_24=0b0101 & imm_16_20u & imm_13u & imm_11_12=0b10 & T3_new_8_10 & imm_0_7u & hasext0=0 [u16 = imm_0_7u | imm_13u << 8 | imm_16_20u<<9 | imm_25_26u <<14;] {
    	local EA:4 = GP + u16;
	*[ram]:4 EA = T3_new_8_10;
    }
    :"memw("v")="T3_new_8_10 is imm_27=1 & imm_25_26u & imm_21_24=0b0101 & imm_16_20u & imm_13u & imm_11_12=0b10 & T3_new_8_10 & imm_0_7u & hasext0=1 & immext0used=0 & immext0 & imm_0_5u [v = imm_0_5u | immext0; immext0used=1;] {
    	local EA:4 = v;
	*[ram]:4 EA = T3_new_8_10;
    }
}
with slot: iclass=0b1010 {
    :"memw(" S5 "+" s11 ")=" T3_new_8_10 is imm_27=0 & imm_25_26 & imm_21_24=0b1101 & S5 & imm_13u & imm_11_12=0b10 & T3_new_8_10 & imm_0_7u [s11 = (imm_0_7u | (imm_13u << 8) | (imm_25_26 << 9)) << 2; ]{
    	local EA:4 = S5 + s11;
	*[ram]:4 EA = T3_new_8_10;	
    }
    :"memwnew4" is imm_21_27=0b1001101 & S5 & imm_13 & imm_11_12=0b10 & imm_8_10 & imm_7=0 & imm_2_6=0 & imm_1=1 & imm_0=0 {
    _stub();
    }
    :"memwnew5" is imm_21_27=0b1001101 & S5 & imm_13 & imm_11_12=0b10 & imm_8_10 & imm_7=0 & imm_3_6 & imm_2=0 & imm_1=0 & imm_0=0 {
    _stub();
    }
    :"memwnew6" is imm_21_27=0b1011101 & S5 & imm_11_13=0b010 & imm_8_10 & imm_7=1 & imm_6=0 & imm_0_5 {
    _stub();
    }
    :"memw(" S5 "++" s4 ")=" T3_new_8_10 is imm_21_27=0b1011101 & S5 & imm_11_13=0b010 & T3_new_8_10 & imm_7=0 & imm_3_6 & imm_2=0 & imm_1=0 & imm_0=0 [ s4 = imm_3_6 << 1;] {
        local EA:4 = S5;
        S5 = S5 + s4;
        *[ram]:4 EA = T3_new_8_10;
    }
    :"memwnew8" is imm_21_27=0b1101101 & S5 & imm_13 & imm_11_12=0b10 & imm_8_10 & imm_7=1 & imm_6 & imm_0_5 {
    _stub();
    }
    :"memwnew9" is imm_21_27=0b1101101 & S5 & imm_13 & imm_11_12=0b10 & imm_8_10 & imm_7=0 & imm_0_6 {
    _stub();
    }
    :"memwnew10" is imm_21_27=0b1111101 & S5 & imm_13 & imm_11_12=0b10 & imm_8_10 & imm_7=0 & imm_0_6 {
    _stub();
    }
}

# NV/ST:ST new-value word cond
with slot: iclass=0b0011 {
    :"stnvcondw00()" is imm_21_27=0b0100101 & S5 & imm_13 & T5 & imm_7 & imm_5_6 & imm_3_4=0b10 & T3_0_2  {
        _stub();
    }
    :"stnvcondw01()" is imm_21_27=0b0101101 & S5 & imm_13 & T5 & imm_7 & imm_5_6 & imm_3_4=0b10 & T3_0_2  {
        _stub();
    }
    :"stnvcondw02()" is imm_21_27=0b0110101 & S5 & imm_13 & T5 & imm_7 & imm_5_6 & imm_3_4=0b10 & T3_0_2  {
        _stub();
    }
    :"stnvcondw03()" is imm_21_27=0b0111101 & S5 & imm_13 & T5 & imm_7 & imm_5_6 & imm_3_4=0b10 & T3_0_2  {
        _stub();
    }
}
with slot: iclass=0b0100 {
    :"if(" D2_pred ") memw(" S5 "+" u6 ")=" T3_new_8_10 is imm_21_27=0b0000101 & S5 & imm_13u & imm_11_12=0b10 & T3_new_8_10 & imm_3_7u & imm_2=0 & D2_pred [ u6 = (imm_3_7u | (imm_13u <<5) ) << 2;]{
    	if(D2_pred == 0) goto <end>;
		local EA:4 = S5 + u6;
		*[ram]:4 EA = T3_new_8_10;
	<end>
    }
    :"if(" D2_pred_new ") memw(" S5 "+" u6 ")=" T3_new_8_10 is imm_21_27=0b0010101 & S5 & imm_13u & imm_11_12=0b10 & T3_new_8_10 & imm_3_7u & imm_2=0 & D2_pred_new [ u6 = (imm_3_7u | (imm_13u <<5) ) << 2;]{
    	if(D2_pred_new == 0) goto <end>;
		local EA:4 = S5 + u6;
		*[ram]:4 EA = T3_new_8_10;
	<end>
    }
    :"if(!" D2_pred ") memw(" S5 "+" u6 ")=" T3_new_8_10 is imm_21_27=0b0100101 & S5 & imm_13u & imm_11_12=0b10 & T3_new_8_10 & imm_3_7u & imm_2=0 & D2_pred [ u6 = (imm_3_7u | (imm_13u <<5) ) << 2;]{
    	if(D2_pred != 0) goto <end>;
		local EA:4 = S5 + u6;
		*[ram]:4 EA = T3_new_8_10;
	<end>
    }
    :"if(!" D2_pred_new ") memw(" S5 "+" u6 ")=" T3_new_8_10 is imm_21_27=0b0110101 & S5 & imm_13u & imm_11_12=0b10 & T3_new_8_10 & imm_3_7u & imm_2=0 & D2_pred_new [ u6 = (imm_3_7u | (imm_13u <<5) ) << 2;]{
    	if(D2_pred_new != 0) goto <end>;
		local EA:4 = S5 + u6;
		*[ram]:4 EA = T3_new_8_10;
	<end>
    }
}
with slot: iclass=0b1010 {
    :"stnvcondw08()" is imm_21_27=0b1011101 & S5 & imm_13=1 & imm_11_12=0b10 & imm_8_10 & imm_7=0 & imm_3_6 & imm_2=0 & imm_0_1 {
    _stub();
    }
    :"stnvcondw09()" is imm_21_27=0b1011101 & S5 & imm_13=1 & imm_11_12=0b10 & imm_8_10 & imm_7=0 & imm_3_6 & imm_2=1 & imm_0_1 {
    _stub();
    }
    :"stnvcondw10()" is imm_21_27=0b1011101 & S5 & imm_13=1 & imm_11_12=0b10 & imm_8_10 & imm_7=1 & imm_3_6 & imm_2=0 & imm_0_1 {
    _stub();
    }
    :"stnvcondw11()" is imm_21_27=0b1011101 & S5 & imm_13=1 & imm_11_12=0b10 & imm_8_10 & imm_7=1 & imm_3_6 & imm_2=1 & imm_0_1 {
    _stub();
    }

    :"stnvcondw12()" is imm_21_27=0b1111101 & imm_18_20=0 & imm_16_17 & imm_11_13=0b010 & imm_8_10 & imm_7=1 & imm_3_6 & imm_2=0 & imm_0_1 {
    _stub();
    }
    :"stnvcondw13()" is imm_21_27=0b1111101 & imm_18_20=0 & imm_16_17 & imm_11_13=0b010 & imm_8_10 & imm_7=1 & imm_3_6 & imm_2=1 & imm_0_1 {
    _stub();
    }
    :"stnvcondw14()" is imm_21_27=0b1111101 & imm_18_20=0 & imm_16_17 & imm_11_13=0b110 & imm_8_10 & imm_7=1 & imm_3_6 & imm_2=0 & imm_0_1 {
    _stub();
    }
    :"stnvcondw15()" is imm_21_27=0b1111101 & imm_18_20=0 & imm_16_17 & imm_11_13=0b110 & imm_8_10 & imm_7=1 & imm_3_6 & imm_2=1 & imm_0_1 {
    _stub();
    }
}



#with slot: iclass=0b0011 {
#    :"memw()=setbit" is imm_24_27=0b1111 & imm_23=0 & imm_21_22=0b01 & S5 & imm_13=0 & imm_7_12 & imm_5_6=0b11 & T5 {
#    _stub();
#    }
#}


# ST:Store dword
with slot: iclass=0b0011 {
    :"memd(" S5 "+" T5 "<<" u2 ")=" D5_pair is imm_21_27=0b1011110 & S5 & imm_13u & T5 & imm_7u & imm_5_6=0 & D5_pair [u2 = (imm_7u | (imm_13u << 1)) << 3; ]  {
    	local EA:4 = (S5 + T5) << u2;
    	*[ram]:8 EA = D5_pair;
    }
}
with slot: iclass=0b0100 {
    :"memd1" is imm_27=1 & imm_25_26 & imm_21_24=0b0110 & imm_16_20 & imm_13 & T5 & imm_0_7 {
	    _stub();
    }
}
with slot: iclass=0b1010 {
    :"memd("S5"+#"s11")="T5_pair is imm_27=0 & imm_25_26 & imm_21_24=0b1110 & S5 & imm_13u & T5_pair & imm_0_7u [ s11 = ((imm_0_7u) | (imm_13u << 8) | (imm_25_26 << 9)) << 3;] {
        local EA:4 = S5 + s11;
        *[ram]:8 EA = T5_pair;
    }

     :"memd3" is imm_21_27=0b1001110 & S5 & imm_13 & T5 & imm_7=0 & imm_2_6=0 & imm_1=1 & imm_0=0 {
	    _stub();
     }
     :"memd4" is imm_21_27=0b1001110 & S5 & imm_13 & T5 & imm_7=0 & imm_3_6 & imm_2=0 & imm_1=0 & imm_0=0 {
	    _stub();
     }
     :"memd5" is imm_21_27=0b1011110 & S5 & imm_13=0 & T5 & imm_7=1 & imm_6=0 & imm_0_5 {
	    _stub();
     }
     :"memd("S5"++#"s4")="T5_pair is imm_21_27=0b1011110 & S5 & imm_13=0 & T5_pair & imm_7=0 & imm_3_6 & imm_2=0 & imm_1=0 & imm_0=0 [ s4 = imm_3_6 << 3;] {
        local EA:4 = S5;
        S5 = S5 + s4;
        *[ram]:8 EA = T5_pair;
     }
     :"memd7" is imm_21_27=0b1101110 & S5 & imm_13 & T5 & imm_7=1 & imm_6 & imm_0_5 {
	    _stub();
     }
     :"memd8" is imm_21_27=0b1101110 & S5 & imm_13 & T5 & imm_7=0 & imm_0_6=0 {
	    _stub();
     }
     :"memd9" is imm_21_27=0b1111110 & S5 & imm_13 & T5 & imm_7=0 & imm_0_6=0 {
	    _stub();
     }
}

# ST:Store rel dw
with slot: iclass=0b0101 {
    :"memdrl0" is imm_21_27=0b0000111 & S5 & imm_13=0 & T5 & imm_6_7=0 & imm_2_5=0b0010 & imm_0_1  {
    _stub();
    }
    :"memdrl1" is imm_21_27=0b0000111 & S5 & imm_13=0 & T5 & imm_6_7=0 & imm_2_5=0b1010 & imm_0_1  {
    _stub();
    }
}

# ST:Store dw cond
with slot: iclass=0b0011 {
    :"stcondd00" is imm_21_27=0b0100110 & S5 & imm_13 & imm_8_12 & imm_7 & imm_5_6 & D5  {
    _stub();
    }
    :"stcondd01" is imm_21_27=0b0101110 & S5 & imm_13 & imm_8_12 & imm_7 & imm_5_6 & D5  {
    _stub();
    }
    :"stcondd02" is imm_21_27=0b0110110 & S5 & imm_13 & imm_8_12 & imm_7 & imm_5_6 & D5  {
    _stub();
    }
    :"stcondd03" is imm_21_27=0b0111110 & S5 & imm_13 & imm_8_12 & imm_7 & imm_5_6 & D5  {
    _stub();
    }
}
with slot: iclass=0b0100 {
    :"if("D2_pred") memd("S5"+#"u6")="T5_pair is imm_21_27=0b0000110 & S5 & imm_13 & T5_pair & imm_3_7 & imm_2=0 & D2_pred [u6 =(imm_3_7 | (imm_13 << 5)) << 3;] {
        if(D2_pred == 0) goto <end>;
        local EA:4 = S5 + u6;
        *[ram]:8 EA = T5_pair;
        <end>
    }
    :"if("D2_pred_new") memd("S5"+#"u6")="T5_pair is imm_21_27=0b0010110 & S5 & imm_13 & T5_pair & imm_3_7 & imm_2=0 & D2_pred_new [u6 =(imm_3_7 | (imm_13 << 5)) << 3;] {
        if(D2_pred_new == 0) goto <end>;
        local EA:4 = S5 + u6;
        *[ram]:8 EA = T5_pair;
        <end>
    }
    :"if(!"D2_pred") memd("S5"+#"u6")="T5_pair is imm_21_27=0b0100110 & S5 & imm_13 & T5_pair & imm_3_7 & imm_2=0 & D2_pred [u6 =(imm_3_7 | (imm_13 << 5)) << 3;] {
        if(D2_pred != 0) goto <end>;
        local EA:4 = S5 + u6;
        *[ram]:8 EA = T5_pair;
        <end>
    }
    :"if(!"D2_pred_new") memd("S5"+#"u6")="T5_pair is imm_21_27=0b0110110 & S5 & imm_13 & T5_pair & imm_3_7 & imm_2=0 & D2_pred_new [u6 =(imm_3_7 | (imm_13 << 5)) << 3;] {
        if(D2_pred_new != 0) goto <end>;
        local EA:4 = S5 + u6;
        *[ram]:8 EA = T5_pair;
        <end>
    }
}
with slot: iclass=0b1010 {
    :"stcondd08()" is imm_21_27=0b1011110 & S5 & imm_13=1 & imm_11_12=0b10 & imm_8_10 & imm_7=0 & imm_3_6 & imm_2=0 & imm_0_1 {
    _stub();
    }
    :"stcondd09()" is imm_21_27=0b1011110 & S5 & imm_13=1 & imm_11_12=0b10 & imm_8_10 & imm_7=0 & imm_3_6 & imm_2=1 & imm_0_1 {
    _stub();
    }
    :"stcondd10()" is imm_21_27=0b1011110 & S5 & imm_13=1 & imm_11_12=0b10 & imm_8_10 & imm_7=1 & imm_3_6 & imm_2=0 & imm_0_1 {
    _stub();
    }
    :"stcondd11()" is imm_21_27=0b1011110 & S5 & imm_13=1 & imm_11_12=0b10 & imm_8_10 & imm_7=1 & imm_3_6 & imm_2=1 & imm_0_1 {
    _stub();
    }

    :"if(" D2_pred ") memd(" u6 ")=" T5_pair is imm_21_27=0b1111110 & imm_18_20=0 & imm_16_17u & imm_11_13=0b010 & T5_pair & imm_7=1 & imm_3_6u & imm_2=0 & D2_pred [u6 = imm_3_6u | (imm_16_17u << 4);] {
    	if(D2_pred == 0) goto <end>;
	local EA:4 = u6;
        *[ram]:8 EA = T5_pair;
	<end>
    }
    :"if(" D2_pred_new ") memd(" u6 ")=" T5_pair is imm_21_27=0b1111110 & imm_18_20=0 & imm_16_17u & imm_11_13=0b010 & T5_pair & imm_7=1 & imm_3_6u & imm_2=1 & D2_pred_new [u6 = imm_3_6u | (imm_16_17u << 4);] {
    	if(D2_pred_new == 0) goto <end>;
	local EA:4 = u6;
        *[ram]:8 EA = T5_pair;
	<end>
    }
    :"if(!" D2_pred ") memd(" u6 ")=" T5_pair is imm_21_27=0b1111110 & imm_18_20=0 & imm_16_17u & imm_11_13=0b110 & T5_pair & imm_7=1 & imm_3_6u & imm_2=0 & D2_pred [u6 = imm_3_6u | (imm_16_17u << 4);] {
    	if(D2_pred != 0) goto <end>;
	local EA:4 = u6;
        *[ram]:8 EA = T5_pair;
	<end>
    }
    :"if(!" D2_pred_new ") memd(" u6 ")=" T5_pair is imm_21_27=0b1111110 & imm_18_20=0 & imm_16_17u & imm_11_13=0b110 & T5_pair & imm_7=1 & imm_3_6u & imm_2=1 & D2_pred_new [u6 = imm_3_6u | (imm_16_17u << 4);] {
    	if(D2_pred_new != 0) goto <end>;
	local EA:4 = u6;
        *[ram]:8 EA = T5_pair;
	<end>
    }
}


# ST:Store by
with slot: iclass=0b0011 {
    :"memb(" S5 "+" T5 "<<" u2 ")=" D5 is imm_21_27=0b1011000 & S5 & imm_13u & T5 & imm_7u & imm_5_6=0 & D5 [u2 = imm_7u | (imm_13u << 1); ]  {
    	local EA:4 = (S5 + T5) << u2;
    	*[ram]:1 EA = D5;
    }
    :"memb("S5"+#"imm_7_12")=#"S8 is imm_25_27=0b110 & imm_23_24=0 & imm_21_22=0b00 & S5 & imm_13 & imm_7_12 & imm_0_6 [ S8 = (imm_0_6) | (imm_13 << 7);]{
        local EA:4 = S5 + imm_7_12;
        *[ram]:1 EA = S8;
    }
}
with slot: iclass=0b0100 {
    :"memb(GP+"u16")="T5 is imm_27=1 & imm_25_26u & imm_21_24=0b0000 & imm_16_20u & imm_13u & T5 & imm_0_7u & hasext0=0 [u16 = imm_0_7u | imm_13u << 8 | imm_16_20u<<9 | imm_25_26u <<14;] {
    	local EA:4 = GP + u16;
	*[ram]:1 EA = T5;
    }
    :"memb("v")="T5 is imm_27=1 & imm_25_26u & imm_21_24=0b0000 & imm_16_20u & imm_13u & T5 & imm_0_7u & hasext0=1 & immext0 & immext0used=0 & imm_0_5u [v = imm_0_5u | immext0; immext0used=1; ] {
    	local EA:4 = GP + v;
	*[ram]:1 EA = T5;
    }
}
with slot: iclass=0b1010 {
    :"memb("S5"+"s11")="T5 is imm_27=0 & imm_25_26 & imm_21_24=0b1000 & S5 & imm_13 & T5 & imm_0_7 [ s11 = (imm_0_7) | (imm_13 << 9) | (imm_25_26 << 10);]{
        local EA:4 = S5 + s11;
        *[ram]:1 EA = T5;
    }
    :"stb5" is imm_21_27=0b1001000 & S5 & imm_13 & imm_8_12 & imm_7=0 & imm_2_6=0 & imm_1=1 & imm_0=0  {
    _stub();
    }
    :"stb6" is imm_21_27=0b1001000 & S5 & imm_13 & imm_8_12 & imm_7=0 & imm_2_6=0 & imm_1=0 & imm_0=0  {
    _stub();
    }
    :"stb7" is imm_21_27=0b1011000 & S5 & imm_13=0 & imm_8_12 & imm_7=1 & imm_2_6=0 & imm_0_5  {
    _stub();
    }
    :"memw(" S5 "++" s4 ")=" T5 is imm_21_27=0b1011000 & S5 & imm_13=0 & T5 & imm_7=0 & imm_3_6 & imm_2=0 & imm_1=0 & imm_0=0  [s4 = imm_3_6 << 2;] {
        local EA:4 = S5;
        S5 = S5+s4;
        *[ram]:1 EA = T5;
    }
    :"memb(" S5 "<<" u2 "+" U6 ")=" T5 is imm_21_27=0b1101000 & S5 & imm_13u & T5 & imm_12=1 & imm_8_11u & imm_7u & imm_5_6u & D5 [ u2 = imm_7u | (imm_13u << 1); U6 = imm_5_6u | (imm_8_11u << 2);] {
        local EA:4 = (S5 << u2) + U6;
        *[ram]:1 EA = T5;
    }
    :"stb10" is imm_21_27=0b1101000 & S5 & imm_13 & imm_8_12 & imm_7=0 & imm_0_6=0 {
    _stub();
    }
    :"stb11" is imm_21_27=0b1111000 & S5 & imm_13 & imm_8_12 & imm_7=0 & imm_0_6=0 {
    _stub();
    }
}

# ST:Store by cond
with slot: iclass=0b0011 {
    :"stcondb00" is imm_21_27=0b0100000 & S5 & imm_13 & imm_8_12 & imm_7 & imm_5_6 & D5  {
    _stub();
    }
    :"stcondb01" is imm_21_27=0b0101000 & S5 & imm_13 & imm_8_12 & imm_7 & imm_5_6 & D5  {
    _stub();
    }
    :"stcondb02" is imm_21_27=0b0110000 & S5 & imm_13 & imm_8_12 & imm_7 & imm_5_6 & D5  {
    _stub();
    }
    :"stcondb03" is imm_21_27=0b0111000 & S5 & imm_13 & imm_8_12 & imm_7 & imm_5_6 & D5  {
    _stub();
    }
}
with slot: iclass=0b0011 {
#    :"if("D2_pred" memb("S5"+#"u6")="T5_pair is imm_21_27=0b1000000 & S5 & imm_13 & T5_pair & imm_3_7 & imm_2=0 & D2_pred [u6 =(imm_3_7 | (imm_13 << 5)) << 3;] {
#    _stub();
#    }
    :"if(" U2_5_6 ") memb(" S5 "+" u6 ")=" s6 is imm_21_27=0b1000000 & S5 & imm_13 & imm_7_12u & U2_5_6 & imm_0_4u [s6 = imm_0_4u | (imm_13 << 5); u6 = imm_7_12u << 0;] {
    	if (U2_5_6 == 0) goto <end>;
		local EA:4 = S5 + u6;
		*[ram]:1 EA = s6;
	<end>
    }
    :"if(" U2_5_6_pred_new ") memb(" S5 "+" u6 ")=" s6 is imm_21_27=0b1000100 & S5 & imm_13 & imm_7_12u & U2_5_6_pred_new & imm_0_4u [s6 = imm_0_4u | (imm_13 << 5); u6 = imm_7_12u << 0;] {
    	if (U2_5_6_pred_new == 0) goto <end>;
		local EA:4 = S5 + u6;
		*[ram]:1 EA = s6;
	<end>
    }
    :"if(!" U2_5_6 ") memb(" S5 "+" u6 ")=" s6 is imm_21_27=0b1001000 & S5 & imm_13 & imm_7_12u & U2_5_6 & imm_0_4u [s6 = imm_0_4u | (imm_13 << 5); u6 = imm_7_12u << 0;] {
    	if (U2_5_6 != 0) goto <end>;
		local EA:4 = S5 + u6;
		*[ram]:1 EA = s6;
	<end>
    }
    :"if(!" U2_5_6_pred_new ") memb(" S5 "+" u6 ")=" s6 is imm_21_27=0b1001100 & S5 & imm_13 & imm_7_12u & U2_5_6_pred_new & imm_0_4u [s6 = imm_0_4u | (imm_13 << 5); u6 = imm_7_12u << 0;] {
    	if (U2_5_6_pred_new != 0) goto <end>;
		local EA:4 = S5 + u6;
		*[ram]:1 EA = s6;
	<end>
    }
}
with slot: iclass=0b0100 {
    :"if("D2_pred") memb("S5"+#"u6")="T5 is imm_21_27=0b0000000 & S5 & imm_13 & T5 & imm_3_7 & imm_2=0 & D2_pred [u6 =(imm_3_7 | (imm_13 << 5)) << 3;] {
        if(D2_pred == 0) goto <bad>;
            local EA:4 = S5 + u6;
            *[ram]:1 EA = T5;
        <bad>
    }
    :"if("D2_pred_new") memb("S5"+#"u6")="T5 is imm_21_27=0b0010000 & S5 & imm_13 & T5 & imm_3_7 & imm_2=0 & D2_pred_new [u6 =(imm_3_7 | (imm_13 << 5)) << 3;] {
        if(D2_pred_new == 0) goto <bad>;
            local EA:4 = S5 + u6;
            *[ram]:1 EA = T5;
        <bad>
    }
    :"stconb10" is imm_21_27=0b0100000 & S5 & imm_13 & T5 & imm_3_7 & imm_2=0 & D2_pred  {
    _stub();
    }
    :"stconb11" is imm_21_27=0b0110000 & S5 & imm_13 & T5 & imm_3_7 & imm_2=0 & D2_pred  {
    _stub();
    }
}
with slot: iclass=0b1010 {
    :"if(" D2_pred ") memb(" S5 "++" s4 ")=" T5 is imm_21_27=0b1011000 & S5 & imm_13=1 & T5 & imm_7=0 & imm_3_6 & imm_2=0 & D2_pred [ s4 = imm_3_6 << 0;] {
    	if (D2_pred == 0) goto <end>;
		local EA:4 = S5;
		S5 = S5 + s4;
		*[ram]:1 EA = T5;
	<end>
    }
    :"if(" D2_pred_new ") memb(" S5 "++" s4 ")=" T5 is imm_21_27=0b1011000 & S5 & imm_13=1 & T5 & imm_7=0 & imm_3_6 & imm_2=1 & D2_pred_new [ s4 = imm_3_6 << 0;] {
    	if (D2_pred_new == 0) goto <end>;
		local EA:4 = S5;
		S5 = S5 + s4;
		*[ram]:1 EA = T5;
	<end>
    }
    :"if(!" D2_pred ") memb(" S5 "++" s4 ")=" T5 is imm_21_27=0b1011000 & S5 & imm_13=1 & T5 & imm_7=1 & imm_3_6 & imm_2=0 & D2_pred [ s4 = imm_3_6 << 0;] {
    	if (D2_pred != 0) goto <end>;
		local EA:4 = S5;
		S5 = S5 + s4;
		*[ram]:1 EA = T5;
	<end>
    }
    :"if(!" D2_pred_new ") memb(" S5 "++" s4 ")=" T5 is imm_21_27=0b1011000 & S5 & imm_13=1 & T5 & imm_7=1 & imm_3_6 & imm_2=1 & D2_pred_new [ s4 = imm_3_6 << 0;] {
    	if (D2_pred_new != 0) goto <end>;
		local EA:4 = S5;
		S5 = S5 + s4;
		*[ram]:1 EA = T5;
	<end>
    }

    :"stcondb12()" is imm_21_27=0b1111000 & imm_18_20=0 & imm_16_17 & imm_13=0 & T5 & imm_7=1 & imm_3_6 & imm_2=0 & imm_0_1 {
    _stub();
    }
    :"stcondb13()" is imm_21_27=0b1111000 & imm_18_20=0 & imm_16_17 & imm_13=0 & T5 & imm_7=1 & imm_3_6 & imm_2=1 & imm_0_1 {
    _stub();
    }
    :"stcondb14()" is imm_21_27=0b1111000 & imm_18_20=0 & imm_16_17 & imm_13=1 & T5 & imm_7=1 & imm_3_6 & imm_2=0 & imm_0_1 {
    _stub();
    }
    :"stcondb15()" is imm_21_27=0b1111000 & imm_18_20=0 & imm_16_17 & imm_13=1 & T5 & imm_7=1 & imm_3_6 & imm_2=1 & imm_0_1 {
    _stub();
    }
}

# ST:Store HW 
with slot: iclass=0b0011 {
    :"memh(" S5 "+" T5 "<<" u2 ")=" D5 is imm_21_27=0b1011010 & S5 & imm_13u & T5 & imm_7u & imm_5_6=0 & D5 [u2 = (imm_7u | (imm_13u << 1)) << 0; ]  {
    	local EA:4 = (S5 + T5) << u2;
    	*[ram]:2 EA = D5;
    }
    :"memh1" is imm_21_27=0b1011011 & S5 & imm_13 & T5 & imm_7 & imm_5_6=0 & D5 {
        _stub();
    }
    :"memh(" S5 "+" u6 ")=" s8 is imm_25_27=0b110 & imm_23_24=0 & imm_21_22=0b01 & S5 & imm_13 & imm_7_12u & imm_0_6u [ u6 = imm_7_12u << 1; s8 = imm_0_6u | (imm_13 << 7);] {
        local EA:4 = S5 + u6;
        *[ram]:2 EA = s8;
    }
}
with slot: iclass=0b0100 {
    :"memh(GP+"u16")="T5 is imm_27=1 & imm_25_26u & imm_21_24=0b0010 & imm_16_20u & imm_13u & T5 & imm_0_7u [u16 = (imm_0_7u | imm_13u << 8 | imm_16_20u<<9 | imm_25_26u <<14) << 1;] {
    	local EA:4 = GP + u16;
	*[ram]:2 EA = T5;
    }
    :"memh4" is imm_27=1 & imm_25_26 & imm_21_24=0b0011 & imm_16_20 & imm_13 & T5 & imm_0_7 {
        _stub();
    }
}
with slot: iclass=0b1010 {
    :"memh("S5"+#"s11")="T5 is imm_27=0 & imm_25_26 & imm_21_24=0b1010 & S5 & imm_13 & T5 & imm_0_7 [s11 = (imm_0_7 | (imm_13 << 8) | (imm_25_26 << 9)) << 1; ]{
        local EA:4 = S5 + s11;
        *[ram]:2 EA = T5:2;
    }
    :"memh6" is imm_27=0 & imm_25_26 & imm_21_24=0b1011 & imm_16_20 & imm_13 & T5 & imm_0_7 {
        _stub();
    }

    :"memh7" is imm_21_27=0b1001010 & S5 & imm_13 & T5 & imm_7=0 & imm_2_6=0 & imm_1=1 & imm_0=0 {
        _stub();
    }
    :"memh8" is imm_21_27=0b1001010 & S5 & imm_13 & T5 & imm_7=0 & imm_3_6 & imm_2=0 & imm_1=0 & imm_0=0 {
        _stub();
    }
    :"memh9" is imm_21_27=0b1001011 & S5 & imm_13 & T5 & imm_7=0 & imm_2_6=0 & imm_1=1 & imm_0=0 {
        _stub();
    }
    :"memh10" is imm_21_27=0b1001011 & S5 & imm_13 & T5 & imm_7=0 & imm_3_6 & imm_1=0 & imm_0=0 {
        _stub();
    }

    :"memh11" is imm_21_27=0b1011010 & S5 & imm_13=0 & T5 & imm_7=1 & imm_6=0 & imm_0_5 {
        _stub();
    }

    :"memh(" S5 "++" s4 ")=" T5 is imm_21_27=0b1011010 & S5 & imm_13=0 & T5 & imm_7=0 & imm_3_6 & imm_2=0 & imm_1=0 & imm_0=0  [s4 = imm_3_6 << 1;] {
        local EA:4 = S5;
        S5 = S5+s4;
        *[ram]:2 EA = T5;
    }

    :"memh13" is imm_21_27=0b1011011 & S5 & imm_13=0 & T5 & imm_7=1 & imm_6=0 & imm_0_5 {
        _stub();
    }

    :"memh14" is imm_21_27=0b1011011 & S5 & imm_13=0 & T5 & imm_7=0 & imm_3_6 & imm_2=0 & imm_1=0 & imm_0=0 {
        _stub();
    }

    :"memh15" is imm_21_27=0b1101010 & S5 & imm_13 & T5 & imm_7=1 & imm_6 & imm_0_5 {
        _stub();
    }

    :"memh16" is imm_21_27=0b1101010 & S5 & imm_13 & T5 & imm_7=0 & imm_0_6=0 {
        _stub();
    }

    :"memh17" is imm_21_27=0b1101011 & S5 & imm_13 & T5 & imm_7=1 & imm_6 & imm_0_5 {
        _stub();
    }

    :"memh18" is imm_21_27=0b1101011 & S5 & imm_13 & T5 & imm_7=0 & imm_0_6 {
        _stub();
    }
    :"memh19" is imm_21_27=0b1111010 & S5 & imm_13 & T5 & imm_7=0 & imm_0_6 {
        _stub();
    }
    :"memh20" is imm_21_27=0b1111011 & S5 & imm_13 & T5 & imm_7=0 & imm_0_6 {
        _stub();
    }
}


# ST:Store HW cond
with slot: iclass=0b0011 {
    :"sthwcond00" is imm_21_27=0b0100010 & S5 & imm_13 & T5 & imm_7 & imm_5_6 & D5 {
    _stub();
    }
    :"sthwcond01" is imm_21_27=0b0100011 & S5 & imm_13 & T5 & imm_7 & imm_5_6 & D5 {
    _stub();
    }
    :"sthwcond02" is imm_21_27=0b0101010 & S5 & imm_13 & T5 & imm_7 & imm_5_6 & D5 {
    _stub();
    }
    :"sthwcond03" is imm_21_27=0b0101011 & S5 & imm_13 & T5 & imm_7 & imm_5_6 & D5 {
    _stub();
    }
    :"sthwcond04" is imm_21_27=0b0110010 & S5 & imm_13 & T5 & imm_7 & imm_5_6 & D5 {
    _stub();
    }
    :"sthwcond05" is imm_21_27=0b0110011 & S5 & imm_13 & T5 & imm_7 & imm_5_6 & D5 {
    _stub();
    }
    :"sthwcond06" is imm_21_27=0b0111010 & S5 & imm_13 & T5 & imm_7 & imm_5_6 & D5 {
    _stub();
    }
    :"sthwcond07" is imm_21_27=0b0111011 & S5 & imm_13 & T5 & imm_7 & imm_5_6 & D5 {
    _stub();
    }

    :"sthwcond08" is imm_21_27=0b1000001 & S5 & imm_13 & imm_7_12 & imm_5_6 & imm_0_4 {
    _stub();
    }
    :"sthwcond09" is imm_21_27=0b1000101 & S5 & imm_13 & imm_7_12 & imm_5_6 & imm_0_4 {
    _stub();
    }
    :"sthwcond10" is imm_21_27=0b1001001 & S5 & imm_13 & imm_7_12 & imm_5_6 & imm_0_4 {
    _stub();
    }
    :"sthwcond11" is imm_21_27=0b1001101 & S5 & imm_13 & imm_7_12 & imm_5_6 & imm_0_4 {
    _stub();
    }
}
with slot: iclass=0b0100 {
    :"sthwcond12" is imm_21_27=0b0000010 & S5 & imm_13 & T5 & imm_3_7 & imm_2=0 & imm_0_1 {
    _stub();
    }
    :"sthwcond13" is imm_21_27=0b0000011 & S5 & imm_13 & T5 & imm_3_7 & imm_2=0 & imm_0_1 {
    _stub();
    }
    :"sthwcond14" is imm_21_27=0b0010010 & S5 & imm_13 & T5 & imm_3_7 & imm_2=0 & imm_0_1 {
    _stub();
    }
    :"sthwcond15" is imm_21_27=0b0010011 & S5 & imm_13 & T5 & imm_3_7 & imm_2=0 & imm_0_1 {
    _stub();
    }
    :"sthwcond16" is imm_21_27=0b0100010 & S5 & imm_13 & T5 & imm_3_7 & imm_2=0 & imm_0_1 {
    _stub();
    }
    :"sthwcond17" is imm_21_27=0b0100011 & S5 & imm_13 & T5 & imm_3_7 & imm_2=0 & imm_0_1 {
    _stub();
    }
    :"sthwcond18" is imm_21_27=0b0110010 & S5 & imm_13 & T5 & imm_3_7 & imm_2=0 & imm_0_1 {
    _stub();
    }
    :"sthwcond19" is imm_21_27=0b0110011 & S5 & imm_13 & T5 & imm_3_7 & imm_2=0 & imm_0_1 {
    _stub();
    }
}
with slot: iclass=0b1010 {
    :"if(" D2_pred ") memh(" S5 "++" s4 ")=" T5 is imm_21_27=0b1011010 & S5 & imm_13=1 & T5 & imm_7=0 & imm_3_6 & imm_2=0 & D2_pred [s4 = imm_3_6 << 1;] {
    	if(D2_pred == 0) goto <end>;
	local EA:4 = S5;
	S5 = S5 + s4;
	*[ram] EA = T5;
	<end>
    }
    :"if(" D2_pred_new ") memh(" S5 "++" s4 ")=" T5 is imm_21_27=0b1011010 & S5 & imm_13=1 & T5 & imm_7=0 & imm_3_6 & imm_2=1 & D2_pred_new [s4 = imm_3_6 << 1;] {
    	if(D2_pred_new == 0) goto <end>;
	local EA:4 = S5;
	S5 = S5 + s4;
	*[ram] EA = T5;
	<end>
    }
    :"if(!" D2_pred ") memh(" S5 "++" s4 ")=" T5 is imm_21_27=0b1011010 & S5 & imm_13=1 & T5 & imm_7=1 & imm_3_6 & imm_2=0 & D2_pred [s4 = imm_3_6 << 1;] {
    	if(D2_pred != 0) goto <end>;
	local EA:4 = S5;
	S5 = S5 + s4;
	*[ram] EA = T5;
	<end>
    }
    :"if(!" D2_pred_new ") memh(" S5 "++" s4 ")=" T5 is imm_21_27=0b1011010 & S5 & imm_13=1 & T5 & imm_7=1 & imm_3_6 & imm_2=1 & D2_pred_new [s4 = imm_3_6 << 1;] {
    	if(D2_pred_new != 0) goto <end>;
	local EA:4 = S5;
	S5 = S5 + s4;
	*[ram] EA = T5;
	<end>
    }
    :"sthwcond24" is imm_21_27=0b1011011 & S5 & imm_13=1 & T5 & imm_7=0 & imm_3_6 & imm_2=0 & imm_0_1 {
    _stub();
    }
    :"sthwcond25" is imm_21_27=0b1011011 & S5 & imm_13=1 & T5 & imm_7=0 & imm_3_6 & imm_2=1 & imm_0_1 {
    _stub();
    }
    :"sthwcond26" is imm_21_27=0b1011011 & S5 & imm_13=1 & T5 & imm_7=1 & imm_3_6 & imm_2=0 & imm_0_1 {
    _stub();
    }
    :"sthwcond27" is imm_21_27=0b1011011 & S5 & imm_13=1 & T5 & imm_7=1 & imm_3_6 & imm_2=1 & imm_0_1 {
    _stub();
    }

    :"sthwcond28" is imm_21_27=0b1111010 & imm_18_20=0 & imm_16_17 & imm_13=0 & T5 & imm_7=1 & imm_3_6 & imm_2=0 & imm_0_1 {
    _stub();
    }
    :"sthwcond29" is imm_21_27=0b1111010 & imm_18_20=0 & imm_16_17 & imm_13=0 & T5 & imm_7=1 & imm_3_6 & imm_2=1 & imm_0_1 {
    _stub();
    }
    :"sthwcond30" is imm_21_27=0b1111010 & imm_18_20=0 & imm_16_17 & imm_13=1 & T5 & imm_7=1 & imm_3_6 & imm_2=0 & imm_0_1 {
    _stub();
    }
    :"sthwcond31" is imm_21_27=0b1111010 & imm_18_20=0 & imm_16_17 & imm_13=1 & T5 & imm_7=1 & imm_3_6 & imm_2=1 & imm_0_1 {
    _stub();
    }
    :"sthwcond32" is imm_21_27=0b1111011 & imm_18_20=0 & imm_16_17 & imm_13=0 & T5 & imm_7=1 & imm_3_6 & imm_2=0 & imm_0_1 {
    _stub();
    }
    :"sthwcond33" is imm_21_27=0b1111011 & imm_18_20=0 & imm_16_17 & imm_13=0 & T5 & imm_7=1 & imm_3_6 & imm_2=1 & imm_0_1 {
    _stub();
    }
    :"sthwcond34" is imm_21_27=0b1111011 & imm_18_20=0 & imm_16_17 & imm_13=1 & T5 & imm_7=1 & imm_3_6 & imm_2=0 & imm_0_1 {
    _stub();
    }
    :"sthwcond35" is imm_21_27=0b1111011 & imm_18_20=0 & imm_16_17 & imm_13=1 & T5 & imm_7=1 & imm_3_6 & imm_2=1 & imm_0_1 {
    _stub();
    }
}

# ST:Release
with slot: iclass=0b1010 {
    :"rel0" is imm_21_27=0b0000111 & S5 & imm_13=0 & T5 & imm_6_7=0 & imm_2_5=0b0011 & imm_0_1  {
    _stub();
    }
    :"rel1" is imm_21_27=0b0000111 & S5 & imm_13=0 & T5 & imm_6_7=0 & imm_2_5=0b1011 & imm_0_1  {
    _stub();
    }
}

# ST:Store word
with slot: iclass=0b0011 {
    :"memw("S5"+"T5"<<"u2")=" D5 is imm_21_27=0b1011100 & S5 & imm_13u & T5 & imm_7u & imm_5_6=0 & D5 [ u2 = imm_7u | (imm_13u << 1);] { 
        local EA:4 = S5 + (T5 << u2);
        *[ram]:4 EA = D5;
    }
    :"memw("S5"+"U6")="S8 is imm_25_27=0b110 & imm_23_24=0 & imm_21_22=0b10 & S5 & imm_7_12u & imm_0_6u & imm_13 & (hasext0=0 | immext0used=1) [ U6 = imm_7_12u << 2; S8=imm_0_6u | (imm_13 << 8);] {
        local EA:4 = S5 + U6;
        *[ram]:4 EA = S8;
    }
    :"memw("S5"+"U6")="S8 is imm_25_27=0b110 & imm_23_24=0 & imm_21_22=0b10 & S5 & imm_7_12u & imm_0_6u & imm_13 & hasext0=1 & immext0used=0 & immext0 & imm_0_5u [ U6 = imm_7_12u << 2; S8=imm_0_5u | immext0; immext0used=1; ] {
        local EA:4 = S5 + U6;
        *[ram]:4 EA = S8;
    }
}
#with wslot: iclass64=0b0011 {
    #:"memw("S564"+"U6")="v is imm64_25_27=0b110 & imm64_23_24=0 & imm64_21_22=0b10 & S564 & imm64_7_12u & imm64_0_6 & imm64_13 & immw_his & immw_lou & imm64_0_5u [ U6 = imm64_7_12u << 2; v = imm64_0_5u |  (immw_lou << 6) | (immw_his << 20);     ] { #  << 2; S8=imm_0_6 | (imm_13 << 8);] {
        #local EA:4 = S564 + U6;
        #*[ram]:4 EA = v;
#
    #}
#}
with slot: iclass=0b0100 {
    :"memw(GP + "s11")="T5 is imm_27=1 & imm_25_26 & imm_21_24=0b0100 & imm_16_20u & imm_13u & T5 & imm_0_7u & hasext0=0 [s11 = (imm_0_7u | (imm_13u << 8) | (imm_16_20u << 9) | (imm_25_26 << 14)) << 2;] {
        local EA:4 = GP + s11;
        *[ram]:4 EA = T5;
    }
    :"memw("v")="T5 is imm_27=1 & imm_25_26 & imm_21_24=0b0100 & imm_16_20u & imm_13u & T5 & imm_0_7u & hasext0=1 & immext0used=0 & immext0 & imm_0_5u [v = (imm_0_5u) | immext0 ; immext0used=1; ] {
        local EA:4 = v;
        *[ram]:4 EA = T5;
    }
}
#with wslot: iclass64=0b0100 {
    #:"immext memw(gp + "s11")="T564 is imm64_27=1 & imm64_25_26 & imm64_21_24=0b0100 & imm64_16_20 & imm64_13 & T564 & imm64_0_7 & immw_his & immw_lou & imm64_0_6u [s11 = (imm64_0_6u | (immw_lou << 6) | (immw_his<<20));] {
        #local tmp:2 = s11 << 3;
       #local tmp1:2 = tmp s>> 3;
     ## local EA:4 = GP + sext(tmp1);
    #   *[ram]:4 EA = T5;
    #}
#}
with slot: iclass=0b1010 {
    :"memw("S5" + "s11")="T5 is imm_27=0 & imm_25_26 & imm_21_24=0b1100 & S5 & imm_13u & T5 & imm_0_7u [s11 = (imm_0_7u | (imm_13u << 8) | (imm_25_26 << 9)) << 2;] {
        local EA:4 = S5 + s11;
        *[ram]:4 EA = T5;
    }
    :"memw(X5 ++ I:circ(Mu))=" is imm_21_27=0b1001100 & S5 & imm_13 & T5 & imm_7=0 & imm_2_6=0 & imm_1=1 & imm_0=0 {
        _stub();
    }
    :"memw(X5 ++ s4:2:circ(Mu))=" is imm_21_27=0b1001100 & S5 & imm_13 & T5 & imm_7=0 & imm_2_6=0 & imm_1=0 & imm_0=0 {
        _stub();
    }
    :"memw(Re=U6)=" is imm_21_27=0b1011100 & S5 & imm_13=0 & T5 & imm_7=1 & imm_6=0 & imm_0_6  {
        _stub();
    }
    :"memw(" S5 "++" s4 ")=" T5 is imm_21_27=0b1011100 & S5 & imm_13=0 & T5 & imm_7=0 & imm_3_6 & imm_2=0 & imm_1=0 & imm_0=0  [s4 = imm_3_6 << 2;] {
        local EA:4 = S5;
        S5 = S5+s4;
        *[ram]:4 EA = T5;
    }

    :"memw(" S5 "<<" u2 "+" imm_0_5u ")=" T5 is imm_21_27=0b1101100 & S5 & imm_13u & T5 & imm_7=1 & imm_6u & imm_0_5u [u2 = imm_6u | (imm_13u << 1); ] {
        local EA:4 = (S5 << u2) + T5;
	*[ram]:4 EA = T5;
    }
    :"memw(Rx++Mu)=" is imm_21_27=0b1101100 & S5 & imm_13 & T5 & imm_7=0 & imm_0_6=0 {
        _stub();
    }
    :"memw(Rx++Mu:brev)=" is imm_21_27=0b1111100 & S5 & imm_13 & T5 & imm_7=0 & imm_0_6=0 {
        _stub();
    }
}

# ST:Store-release word
with slot: iclass=0b1010 {
    :"memwrl0" is imm_21_27=0b0000101 & S5 & imm_13=0 & T5 & imm_6_7=0 & imm_2_5=0b0010 & imm_0_1  {
    _stub();
    }
    :"memwrl1" is imm_21_27=0b0000101 & S5 & imm_13=0 & T5 & imm_6_7=0 & imm_2_5=0b1010 & imm_0_1  {
    _stub();
    }
}

# ST:Store word cond
with slot: iclass=0b0011 {
    :"if(" U2_5_6 ") memw(" S5 "+" T5 "<<" u2 ")=" D5 is imm_21_27=0b0100100 & S5 & imm_13u & T5 & imm_7u & U2_5_6 & D5 [u2 = imm_7u | (imm_13u << 1);] {
    	if (U2_5_6 == 0) goto <end>;
		local EA:4 = S5 + (T5 << u2);
		*[ram]:4 EA = D5;
	<end>
    }
    :"if(!" U2_5_6 ") memw(" S5 "+" T5 "<<" u2 ")=" D5 is imm_21_27=0b0101100 & S5 & imm_13u & T5 & imm_7u & U2_5_6 & D5 [u2 = imm_7u | (imm_13u << 1);] {
    	if (U2_5_6 == 0) goto <end>;
		local EA:4 = S5 + (T5 << u2);
		*[ram]:4 EA = D5;
	<end>
    }
    :"if(" U2_5_6_pred_new ") memw(" S5 "+" T5 "<<" u2 ")=" D5 is imm_21_27=0b0110100 & S5 & imm_13u & T5 & imm_7u & U2_5_6_pred_new & D5 [u2 = imm_7u | (imm_13u << 1);] {
    	if (U2_5_6_pred_new == 0) goto <end>;
		local EA:4 = S5 + (T5 << u2);
		*[ram]:4 EA = D5;
	<end>
    }
    :"if(!" U2_5_6_pred_new ") memw(" S5 "+" T5 "<<" u2 ")=" D5 is imm_21_27=0b0111100 & S5 & imm_13u & T5 & imm_7u & U2_5_6_pred_new & D5 [u2 = imm_7u | (imm_13u << 1);] {
    	if (U2_5_6_pred_new != 0) goto <end>;
		local EA:4 = S5 + (T5 << u2);
		*[ram]:4 EA = D5;
	<end>
    }

    :"if(" U2_5_6 ") memw(" S5 "+" u6 ")=" s6 is imm_21_27=0b1000010 & S5 & imm_13 & imm_7_12u & U2_5_6 & imm_0_4u [s6 = imm_0_4u | (imm_13 << 5); u6 = imm_7_12u << 2;] {
    	if (U2_5_6 == 0) goto <end>;
		local EA:4 = S5 + u6;
		*[ram]:4 EA = s6;
	<end>
    }
    :"if(!" U2_5_6 ") memw(" S5 "+" u6 ")=" s6 is imm_21_27=0b1000110 & S5 & imm_13 & imm_7_12u & U2_5_6 & imm_0_4u [s6 = imm_0_4u | (imm_13 << 5); u6 = imm_7_12u << 2;] {
    	if (U2_5_6 != 0) goto <end>;
		local EA:4 = S5 + u6;
		*[ram]:4 EA = s6;
	<end>
    }
    :"if(" U2_5_6_pred_new ") memw(" S5 "+" u6 ")=" s6 is imm_21_27=0b1001010 & S5 & imm_13 & imm_7_12u & U2_5_6_pred_new & imm_0_4u [s6 = imm_0_4u | (imm_13 << 5); u6 = imm_7_12u << 2;] {
    	if (U2_5_6_pred_new == 0) goto <end>;
		local EA:4 = S5 + u6;
		*[ram]:4 EA = s6;
	<end>
    }
    :"if(!" U2_5_6_pred_new ") memw(" S5 "+" u6 ")=" s6 is imm_21_27=0b1001110 & S5 & imm_13 & imm_7_12u & U2_5_6_pred_new & imm_0_4u [s6 = imm_0_4u | (imm_13 << 5); u6 = imm_7_12u << 2;] {
    	if (U2_5_6_pred_new != 0) goto <end>;
		local EA:4 = S5 + u6;
		*[ram]:4 EA = s6;
	<end>
    }
}
with slot: iclass=0b0100 {
    :"if(" D2_pred ") memw(" S5 "+" u6 ")=" T5 is imm_21_27=0b0000100 & S5 & imm_13u & T5 & imm_3_7u & imm_2=0 & D2_pred [ u6 = (imm_3_7u | (imm_13u << 5)) << 2;] {
    	if (D2_pred == 0) goto <end>;
		local EA:4 = S5 + u6;
		*[ram]:4 EA = T5;
	<end>
    }
    :"if(" D2_pred_new ") memw(" S5 "+" u6 ")=" T5 is imm_21_27=0b0010100 & S5 & imm_13u & T5 & imm_3_7u & imm_2=0 & D2_pred_new [ u6 = (imm_3_7u | (imm_13u << 5)) << 2;] {
    	if (D2_pred_new == 0) goto <end>;
		local EA:4 = S5 + u6;
		*[ram]:4 EA = T5;
	<end>
    }
    :"if(!" D2_pred ") memw(" S5 "+" u6 ")=" T5 is imm_21_27=0b0100100 & S5 & imm_13u & T5 & imm_3_7u & imm_2=0 & D2_pred [ u6 = (imm_3_7u | (imm_13u << 5)) << 2;] {
    	if (D2_pred != 0) goto <end>;
		local EA:4 = S5 + u6;
		*[ram]:4 EA = T5;
	<end>
    }
    :"if(!" D2_pred_new ") memw(" S5 "+" u6 ")=" T5 is imm_21_27=0b0110100 & S5 & imm_13u & T5 & imm_3_7u & imm_2=0 & D2_pred_new [ u6 = (imm_3_7u | (imm_13u << 5)) << 2;] {
    	if (D2_pred_new != 0) goto <end>;
		local EA:4 = S5 + u6;
		*[ram]:4 EA = T5;
	<end>
    }
}

with slot: iclass=0b1010 {
    :"if(" D2_pred ") memw(" S5 "++" s4 ")=" T5 is imm_21_27=0b1011100 & S5 & imm_13=1 & T5 & imm_7=0 & imm_3_6 & imm_2=0 & D2_pred [ s4 = imm_3_6 << 2;] {
    	if (D2_pred == 0) goto <end>;
		local EA:4 = S5;
		S5 = S5 + s4;
		*[ram]:4 EA = T5;
	<end>
    }
    :"if(" D2_pred_new ") memw(" S5 "++" s4 ")=" T5 is imm_21_27=0b1011100 & S5 & imm_13=1 & T5 & imm_7=0 & imm_3_6 & imm_2=1 & D2_pred_new [ s4 = imm_3_6 << 2;] {
    	if (D2_pred_new == 0) goto <end>;
		local EA:4 = S5;
		S5 = S5 + s4;
		*[ram]:4 EA = T5;
	<end>
    }
    :"if(!" D2_pred ") memw(" S5 "++" s4 ")=" T5 is imm_21_27=0b1011100 & S5 & imm_13=1 & T5 & imm_7=1 & imm_3_6 & imm_2=0 & D2_pred [ s4 = imm_3_6 << 2;] {
    	if (D2_pred != 0) goto <end>;
		local EA:4 = S5;
		S5 = S5 + s4;
		*[ram]:4 EA = T5;
	<end>
    }
    :"if(!" D2_pred_new ") memw(" S5 "++" s4 ")=" T5 is imm_21_27=0b1011100 & S5 & imm_13=1 & T5 & imm_7=1 & imm_3_6 & imm_2=1 & D2_pred_new [ s4 = imm_3_6 << 2;] {
    	if (D2_pred_new != 0) goto <end>;
		local EA:4 = S5;
		S5 = S5 + s4;
		*[ram]:4 EA = T5;
	<end>
    }

    :"ST16" is imm_21_27=0b1111100 & imm_18_20 & imm_16_17 & imm_13=0 & T5 & imm_7=1 & imm_3_6 & imm_2=0 & imm_0_1 {
        _stub();
    }
    :"ST17" is imm_21_27=0b1111100 & imm_18_20 & imm_16_17 & imm_13=0 & T5 & imm_7=1 & imm_3_6 & imm_2=1 & imm_0_1 {
        _stub();
    }
    :"ST18" is imm_21_27=0b1111100 & imm_18_20 & imm_16_17 & imm_13=1 & T5 & imm_7=1 & imm_3_6 & imm_2=0 & imm_0_1 {
        _stub();
    }
    :"ST19" is imm_21_27=0b1111100 & imm_18_20 & imm_16_17 & imm_13=1 & T5 & imm_7=1 & imm_3_6 & imm_2=1 & imm_0_1 {
        _stub();
    }
}

# ST:Allocate stack frame
with slot: iclass=0b1010 {

    :"allocframe("S5","U11"):raw" is imm_21_27=0b0000100 & S5 & imm_11_13=0b000 & imm_0_10 [ U11 = imm_0_10 << 3; ] {
        local EA:4 = S5 - 8;
        *[ram]:8 EA = LRFP;
        FP = EA;
        S5 = EA - U11;
    }
}

#SYSTEM/GUEST:GCRT
with slot: iclass=0b0110 {
    :"gcrt0" is imm_21_27=0b0010000 & S5 & imm_5_13=0 & D5 {
   	_stub();
    }
    :"gcrt1" is imm_21_27=0b0011000 & S5 & imm_5_13=0 & D5 {
   	_stub();
    }
    :"gcrt3" is imm_21_27=0b1000001 & S5 & imm_5_13=0 & D5 {
   	_stub();
    }
    :"gcrt4" is imm_21_27=0b1010001 & S5 & imm_5_13=0 & D5 {
   	_stub();
    }
}


#SYSTEM/MONITOR:Clr int
define pcodeop ciad;
with slot: iclass=0b0110 {
    :"siad("S5")" is imm_21_27=0b0100000 & S5 & imm_8_13=0 & imm_5_7=0b011 & imm_0_4=0 {
        ciad(S5);
    }
}

#SYSTEM/MONITOR:Swp sgp
with slot: iclass=0b0110 {
    :"crswap(S5,sgp0)" is imm_21_27=0b0101000 & S5 & imm_0_13=0 {
    _stub();
    }
    :"crswap(S5,sgp1)" is imm_21_27=0b0101001 & S5 & imm_0_13=0 {
    _stub();
    }

    :"crswap(S5_pair,sgp1:0)" is imm_22_27=0b110110 & imm_21=0 & S5_pair & imm_5_13=0 & imm_0_4=0b00000 {
    _stub();
    }
}

#SYSTEM/MONITOR:Cancel pend
define pcodeop cswi;
with slot: iclass=0b0110 {
    :"cswi("S5")" is imm_21_27=0b0100000 & S5 & imm_8_13=0 & imm_5_7=0b001 & imm_0_4=0 {
        ciad(S5);
    }
}

#SYSTEM/MONITOR:Data cache kil
define pcodeop dckill;
slot:"dckill" is iclass=0b1010 & imm_21_27=0b0010000 & imm_16_20=0 & imm_0_13=0 {
	dckill();
}

#SYSTEM/MONITOR:Data cache maintenance and monitor
define pcodeop dcache_tag_read;
define pcodeop dcache_clean_idx;
define pcodeop dcache_cleaninv_idx;
define pcodeop dcache_inv_idx;
define pcodeop dcache_tag_write;

with slot: iclass=0b1010 {
    :"dccleanidx(" S5 ")" is imm_21_27=0b0010001 & S5 & imm_0_13=0 {
	dcache_clean_idx(S5);
    }
    :"dcinvidx(" S5 ")" is imm_21_27=0b0010010 & S5 & imm_0_13=0 {
	dcache_inv_idx(S5);
    }
    :"dccleaninvidx(" S5 ")" is imm_21_27=0b0010011 & S5 & imm_0_13=0 {
    	dcache_cleaninv_idx(S5);
    }
    :"dctagw(" S5 "," T5 ")" is imm_21_27=0b0100000 & S5 & imm_13=0 & T5 & imm_0_7 {
    	dcache_tag_write(S5, T5);
    }
    :D5 "= dctagr(" S5 ")" is imm_21_27=0b0100001 & S5 & imm_5_13 & D5 {
    	D5 = dcache_tag_read(S5);
    }
}

#SYSTEM/MONITOR:Read int mask
define pcodeop getimask;
with slot: iclass=0b0110 {
    :D5"=getimask("S5")" is imm_21_27=0b0110000 & S5 & imm_5_13=0 & D5 {
        D5=getimask(S5);
    }
}

#SYSTEM/MONITOR:Acq hw lck
define pcodeop tlblock;
define pcodeop k0lock;
with slot: iclass=0b0110 {
    :"tlblock" is imm_21_27=0b1100001 & imm_16_20=0 & imm_8_13=0 & imm_5_7=0b001 & imm_0_4=0 {
        tlblock();
    }
    :"k0lock" is imm_21_27=0b1100001 & imm_16_20=0 & imm_8_13=0 & imm_5_7=0b011 & imm_0_4=0 {
        k0lock();
    }
}
#SYSTEM/MONITOR:Rel hw lck
define pcodeop tlbunlock;
define pcodeop k0unlock;
with slot: iclass=0b0110 {
    :"tlbunlock" is imm_21_27=0b1100001 & imm_16_20=0 & imm_8_13=0 & imm_5_7=0b010 & imm_0_4=0 {
        tlbunlock();
    }
    :"k0unlock" is imm_21_27=0b1100001 & imm_16_20=0 & imm_8_13=0 & imm_5_7=0b100 & imm_0_4=0 {
        k0unlock();
    }
}
#SYSTEM/MONITOR:Int thrd assign rd
define pcodeop iassignr;
with slot: iclass=0b0110 {
    :D5"=iassignr("S5")" is imm_21_27=0b0110011 & S5 & imm_5_13=0 & D5 {
        D5=iassignr(S5);
    }
}
#SYSTEM/MONITOR:Int thrd assign wr
define pcodeop iassignw;
with slot: iclass=0b0110 {
    :"iassignw("S5")" is imm_21_27=0b0100000 & S5 & imm_8_13=0 & imm_5_7=0b010 & imm_0_4=0 {
    	#todo
        iassignw(S5);
    }
}

#SYSTEM/MONITOR:icache maintain super
define pcodeop icache_data_read;
define pcodeop icache_tag_read;
define pcodeop icache_inv_idx;
with slot: iclass=0b0101 {
    :D5"=icdatar("S5")" is imm_21_27=0b0101101 & S5 & imm_5_13=0 & D5 {
        icache_data_read(S5);
    }

    :D5"=ictagr("S5")" is imm_21_27=0b0101111 & S5 & imm_5_13=0 & D5 {
        icache_tag_read(S5);
    }

    :"icinvidx("S5")" is imm_21_27=0b0110110 & S5 & imm_11_13=0b001 & imm_0_10=0 {
        icache_inv_idx(S5);
    }
}

#SYSTEM/MONITOR:icache maintain op
define pcodeop ickill;
define pcodeop icache_tag_write;
define pcodeop icache_data_write;
with slot: iclass=0b0101 {
	:"ictagw("S5","T5")" is imm_21_27=0b0101110 & S5 & imm_13=0 & T5 & imm_0_7=0 {
		icache_tag_write(S5, T5);
	}
	:"icdataw("S5","T5")" is imm_21_27=0b0101110 & S5 & imm_13=1 & T5 & imm_0_7=0 {
		icache_data_write(S5, T5);
	}

	:"ickill" is imm_21_27=0b0110110 & imm_16_20=0 & imm_11_13=0b010 & imm_0_10=0 {
		ickill();
	}
}

#SYSTEM/MONITOR:l2 cache op by idx
define pcodeop l2cache_clean_idx;
define pcodeop l2cache_inv_idx;
define pcodeop l2cache_clean_invalidate_idx;
with slot: iclass=0b0101 {
	:"l2cleanidx("S5")" is imm_21_27=0b0110001 & S5 & imm_0_13=0 {
		l2cache_clean_idx(S5);
	}
	:"l2invidx("S5")" is imm_21_27=0b0110010 & S5 & imm_0_13=0 {
		l2cache_inv_idx(S5);
	}
	:"l2cleaninvidx("S5")" is imm_21_27=0b0110011 & S5 & imm_0_13=0 {
		l2cache_clean_invalidate_idx(S5);
	}
}

#SYSTEM/MONITOR:l2 cache gbl op
define pcodeop l2cache_inv_all;
define pcodeop l2cache_global_clean_inv;
with slot: iclass=0b1010 {
	:"l2gclean("T5_pair")" is imm_21_27=0b0110101 & imm_16_20=0 & imm_13=0 & T5_pair & imm_0_7=0 {
    _stub();
	}
	:"l2gcleaninv("T5_pair")" is imm_21_27=0b0110110 & imm_16_20=0 & imm_13=0 & T5_pair & imm_0_7=0 {
    _stub();
	}

	:"l2kill" is imm_21_27=0b1000001 & imm_16_20=0 & imm_13=0 & imm_10_12=0b000 & imm_0_9=0 {
	    l2cache_inv_all();
	}
	:"l2gunlock" is imm_21_27=0b1000001 & imm_16_20=0 & imm_13=0 & imm_10_12=0b010 & imm_0_9=0 {
    _stub();
	}
	:"l2gclean" is imm_21_27=0b1000001 & imm_16_20=0 & imm_13=0 & imm_10_12=0b100 & imm_0_9=0 {
    _stub();
	}
	:"l2gcleaninv" is imm_21_27=0b1000001 & imm_16_20=0 & imm_13=0 & imm_10_12=0b110 & imm_0_9=0 {
		l2cache_global_clean_inv();
	}
}

#SYSTEM/MONITOR:l2 cache op by addr
with slot: iclass=0b1010 {
	:D2"=l2locka("S5")" is imm_21_27=0b0000111 & S5 & imm_13=1 & imm_2_12=0 & D2 {
    _stub();
	}
	:"l2unlocka("S5")" is imm_21_27=0b0110011 & S5 & imm_0_13=0 {
    _stub();
	}
}

#SYSTEM/MONITOR:l2 tag rw
with slot: iclass=0b1010 {
	:"l2tagw("S5","T5")" is imm_21_27=0b0100010 & S5 & imm_13=0 & T5 & imm_0_7 {
    _stub();
	}
	:D5"=l2tagr("S5")" is imm_21_27=0b0100011 & S5 & imm_5_13=0 & D5 {
    _stub();
	}
}

#SYSTEM/MONITOR:load from phys
with slot: iclass=0b1001 {
	:"memphys" is imm_21_27=0b0010000 & S5 & imm_8_13 & imm_7=0 & imm_5_6=0b00 & D5 {
		_stub();
	}
}

#SYSTEM/MONITOR:nmi
with slot: iclass=0b0110 {
	:"nmi("S5")" is imm_21_27=0b0100011 & S5 & imm_8_13=0 & imm_5_7=0b010 & imm_0_4=0  {
		_stub();
	}
}

#SYSTEM/MONITOR:resume
with slot: iclass=0b0110 {
	:"resume("S5")" is imm_21_27=0b0100010 & S5 & imm_8_13=0 & imm_5_7=0b001 & imm_0_4=0  {
		_stub();
	}
}

#SYSTEM/MONITOR:ret from except
with slot: iclass=0b0101 {
	:"rte" is imm_21_27=0b0111111 & imm_16_20=0 & imm_12_13=0b00 & imm_8_11=0 & imm_5_7=0b000 & imm_0_4=0  {
		_stub();
	}
}

#SYSTEM/MONITOR:set int mask
with slot: iclass=0b0110 {
	:"setimask" is imm_21_27=0b0100100 & S5 & imm_10_13=0 & imm_8_9 & imm_5_7=0b000 & imm_0_4=0  {
		_stub();
	}
}

#SYSTEM/MONITOR:set prio
with slot: iclass=0b0110 {
	:"setprio" is imm_21_27=0b0100100 & S5 & imm_10_13=0 & imm_8_9 & imm_5_7=0b001 & imm_0_4=0  {
		_stub();
	}
}

#SYSTEM/MONITOR:set int auto dis
with slot: iclass=0b0110 {
	:"siad("S5")" is imm_21_27=0b0100100 & S5 & imm_8_13=0 & imm_5_7=0b011 & imm_0_4=0  {
		_stub();
	}
}

#SYSTEM/MONITOR:Start thread
define pcodeop start;
with slot: iclass=0b0110 {
    :"start("S5")" is imm_21_27=0b0100011 & S5 & imm_8_13=0 & imm_5_7=0b001 & imm_0_4=0 {
        start(S5);
    }
}

#SYSTEM/MONITOR:Stop thread
define pcodeop stop;
with slot: iclass=0b0110 {
    :"stop("S5")" is imm_21_27=0b0100011 & S5 & imm_8_13=0 & imm_5_7=0b000 & imm_0_4=0 {
        stop(S5);
    }
}

#SYSTEM/MONITOR:SWI
define pcodeop swi;
with slot: iclass=0b0110 {
    :"swi("S5")" is imm_21_27=0b0100000 & S5 & imm_8_13=0 & imm_5_7=0b000 & imm_0_4=0 {
        swi(S5);
    }
}

#SYSTEM/MONITOR:TLB
define pcodeop tlbw;
define pcodeop tlbr;
with slot: iclass=0b0110 {
	:"tlbw(" S5_pair "," T5 ")" is imm_21_27=0b1100000 & S5_pair & imm_13=0 & T5 & imm_0_7=0  {
		tlbw(S5_pair, T5);
	}
	:D5_pair "=tlbr(" S5 ")" is imm_21_27=0b1100010 & S5 & imm_5_13=0 & D5_pair {
		D5_pair = tlbr(S5);
	}
	:"tlbp" is imm_21_27=0b1100100 & S5 & imm_5_13=0 & D5 {
		_stub();
	}
	:"tlbinvasid" is imm_21_27=0b1100101 & S5 & imm_5_13=0 & D5 {
		_stub();
	}
	:"ctlbw" is imm_21_27=0b1100110 & S5 & imm_13=0 & T5 & imm_5_7=0 & D5 {
		_stub();
	}
	:"tlboc" is imm_21_27=0b1100111 & S5 & imm_5_13=0 & D5 {
		_stub();
	}
}

#SYSTEM/MONITOR:Control register trans
with slot: iclass=0b0110 {
    :D6_svctrl "=" S5 is imm_22_27=0b011100 & imm_21=0 & S5 & imm_6_13=0 & D6_svctrl {
    	D6_svctrl = S5;
    }
    :"Sdd=Rss" is imm_22_27=0b110100 & imm_21=0 & S5 & imm_6_13=0 & D6_svctrl {
        _stub();
    }
    :D5"="S6_svctrl is imm_23_27=0b11101 & S6_svctrl & imm_5_13=0 & D5 {
    	D5 = S6_svctrl;
    }
    :"D5_pair=S6_svctrl" is imm_23_27=0b11110 & S6_svctrl & imm_5_13=0 & D5_pair {
    	_stub();
    }
}

#SYSTEM/MONITOR:Wait mode
define pcodeop wait;
with slot: iclass=0b0110 {
    slot:"wait("S5")" is imm_21_27=0b0100010 & S5 & imm_8_13=0 & imm_5_7=0b000 & imm_0_4=0 {
        wait(S5);
    }
}

define pcodeop isync;
slot:"isync" is iclass=0b0101 & imm_16_27=0b011111000000 & imm_13=0 & imm_10_12=0 & imm_0_9=0b0000000010 {
	isync();
}





#SYSTEM/USER:Load locked
define pcodeop memw_locked;
define pcodeop memd_locked;
with slot: iclass=0b1001 {
    :D5"=memw_locked("S5")" is imm_21_27=0b0010000 & S5 & imm_12_13=0b00 & imm_5_11=0 & D5 {
        D5 = memw_locked(S5);
    }
    :D5_pair"=memd_locked("S5")" is imm_21_27=0b0010000 & S5 & imm_12_13=0b01 & imm_5_11=0 & D5_pair {
        D5_pair = memd_locked(S5);
    }
}

#SYSTEM/USER:Store locked
define pcodeop memw_locked_store;
define pcodeop memd_locked_store;
with slot: iclass=0b1010 {
    :"memw_locked("S5","D2_pred")="T5 is imm_21_27=0b0000101 & S5 & imm_13=0 & T5 & imm_2_7=0 & D2_pred {
        memw_locked_store(S5, D2_pred, T5);
    }
    :"memd_locked("S5","D2_pred")="T5_pair is imm_21_27=0b0000111 & S5 & imm_13=0 & T5_pair & imm_2_7=0 & D2_pred {
        memw_locked_store(S5, D2_pred, T5_pair);
    }
}

#SYSTEM/USER:Zero cache line
define pcodeop dcache_zero_addr;
with slot: iclass=0b1010 {
    slot:"dczeroa("S5")" is imm_21_27=0b0000110 & S5 & imm_13=0 & imm_0_12=0 {
dcache_zero_addr(S5);
    }
}

#SYSTEM/USER:barrier
define pcodeop barrier;
with slot: iclass=0b1010 {
    slot:"barrier" is imm_21_27=0b1000000 & imm_16_20=0 & imm_0_13=0 {
barrier();
    }
}

#SYSTEM/USER:Breakpoint
define pcodeop brkpt;
with slot: iclass=0b0110 {
    slot:"brkpt" is imm_21_27=0b1100001 & imm_16_20=0 & imm_8_13=0 & imm_5_7=0b000 & imm_0_4=0 {
        brkpt();
    }
}

#SYSTEM/USER:Data cache prefetch
define pcodeop dcache_fetch;
with slot: iclass=0b0110 {
    :"dcfetch("S5"+"u11")" is imm_21_27=0b0100000 & S5 & imm_13=0 & imm_11_12=0 & imm_0_10 [u11 = imm_0_10 << 3; ] {
        dcache_fetch();
    }
}

#SYSTEM/USER:Data cache maintain
define pcodeop dcache_clean_addr;
define pcodeop dcache_cleaninv_addr;
define pcodeop dcache_inv_addr;
with slot: iclass=0b1010 {
    :"dccleana("S5")" is imm_21_27=0b0000000 & S5 & imm_0_13=0  {
        dcache_clean_addr(S5);
    }
    :"dccleaninva("S5")" is imm_21_27=0b0000001 & S5 & imm_0_13=0  {
        dcache_cleaninv_addr(S5);
    }
    :"dcinva("S5")" is imm_21_27=0b0000010 & S5 & imm_0_13=0  {
        dcache_inv_addr(S5);
    }
}

#SYSTEM/USER:diag
define pcodeop diag;
define pcodeop diag0;
define pcodeop diag1;
with slot: iclass=0b01100 {
    :"diag("S5")" is imm_21_27=0b0010010 & S5 & imm_8_13=0 & imm_5_7=0b001 &  imm_0_4=0  {
        diag(S5);
    }

    :"diag0("S5","T5")" is imm_21_27=0b0010010 & S5 & imm_13=0 & T5 & imm_5_7=0b010 & imm_0_4=0  {
        diag0(S5, T5);
    }
    :"diag1("S5","T5")" is imm_21_27=0b0010010 & S5 & imm_13=0 & T5 & imm_5_7=0b011 & imm_0_4=0  {
        diag1(S5, T5);
    }
}

#SYSTEM/USER:Icache maintain
define pcodeop icache_inv_addr;
with slot: iclass=0b1010 {
    :"icinva("S5")" is imm_21_27=0b0110110 & S5 & imm_11_13=0b000 & imm_0_10=0  {
        icache_inv_addr(S5);
    }
}


#SYSTEM/USER:Isync
define pcodeop memory_synch;
with slot: iclass=0b0101 {
    :"isync" is imm_17_27=0b011111000000 & S5 & imm_13=0 & imm_10_12=0 & imm_0_9=0b0000000010  {
        memory_synch(S5);
    }
}

#SYSTEM/USER:L2 fetch todo
define pcodeop l2fetch;
with slot: iclass=0b1010 {
    :"l2fetch("S5","T5")" is imm_21_27=0b0110000 & S5 & imm_13=0 & T5 & imm_0_7=0 {
        l2fetch(S5, T5);
    }
    :"l2fetch("S5","T5_pair")" is imm_21_27=0b0110100 & S5 & imm_13=0 & T5_pair & imm_0_7=0 {
        l2fetch(S5, T5_pair);
    }
}


#SYSTEM/USER:pause
define pcodeop pause;
with slot: iclass=0b0101 {
    :"pause" is imm_22_27=0b010001 & imm_16_21=0 & imm_13=0 & imm_8_12 & imm_5_7=0 & imm_2_4 & imm_0_1=0  {
        pause();
    }
}

#SYSTEM/USER:mem thread sync
define pcodeop syncht;
with slot: iclass=0b1010 {
    :"Rd=dmsyncht" is imm_21_27=0b1000000 & imm_16_20=0 & imm_9_13=0 & imm_5_8=0b0111 & D5 {
	    _stub();
    }

    :"syncht" is imm_21_27=0b1000010 & imm_16_20=0 & imm_0_13=0 {
        syncht();
    }
}

#SYSTEM/USER:trace
define pcodeop trace;
with slot: iclass=0b0110 {
    :"trace" is imm_21_27=0b0010010 & S5 & imm_0_13=0 {
        trace(S5);
    }
}

#SYSTEM/USER:Trap
define pcodeop trap0;
define pcodeop trap1;
with slot: iclass=0b0101 {
    slot:"trap0" is imm_22_27=0b010000 & imm_16_21=0 & imm_13=0 & imm_8_12 & imm_5_7 & imm_2_4 & imm_0_1 {
        trap0();
    }
    slot:"trap1" is imm_22_27=0b010010 & imm_21=0 & S5 & imm_13=0 & imm_8_12 & imm_5_7 & imm_2_4 & imm_0_1 {
        trap1();
    }
}

#SYSTEM/USER:unpause
define pcodeop unpause;
with slot: iclass=0b0101 {
    :"unpause" is imm_21_27=0b0111111 & imm_16_20=0 & imm_12_13=0b01 & imm_8_11=0 & imm_5_7=0b000 & imm_0_4=0 {
        unpause();
    }
}

# XTYPE - pain starts here
# XTYPE/ALU

# XTYPE/ALU:Abs dword
with slot: iclass=0b1000 {
    :D5_pair "=abs(" S5_pair ")" is imm_21_27=0b0000100 & S5_pair & imm_8_13=0 & imm_5_7=0b110 & D5_pair {
    	if (S5_pair s< 0) goto <neg>;
		D5_pair = S5_pair;
		goto <end>;
	<neg>
		D5_pair = -S5_pair;
	<end>
    }
}

# XTYPE/ALU:Abs word
with slot: iclass=0b1000 {
    :D5 "=abs(" S5 ")" is imm_21_27=0b1100100 & S5 & imm_8_13=0 & imm_5_7=0b100 & D5 {
    	if (S5 s< 0) goto <neg>;
		D5 = S5;
		goto <end>;
	<neg>
		D5 = -S5;
	<end>
    }

    :"=abswordsat" is imm_21_27=0b1100100 & S5 & imm_8_13=0 & imm_5_7=0b101 & D5 {
    _stub();
    }
}

# XTYPE/ALU:Add acc
with slot: iclass=0b1101 {
    :T5 "=add(" S5 ", add(" D5 "," s6 "))" is imm_23_27=0b10110 & imm_21_22 & S5 & imm_13u & T5 & imm_5_7u & D5 [ s6 = imm_5_7u | (imm_13u << 3) | (imm_21_22 << 4);] {
    	local EA:4 = D5 + s6;
	T5 = EA + S5;
    }
    :T5 "=add(" S5 ", sub(" s6 "," D5 "))" is imm_23_27=0b10111 & imm_21_22 & S5 & imm_13u & T5 & imm_5_7u & D5 [ s6 = imm_5_7u | (imm_13u << 3) | (imm_21_22 << 4);] {
    	local EA:4 = s6 - D5;
	T5 = EA + S5;
    }
}
with slot: iclass=0b1110 {
    :D5 "+=add(" S5 "," imm_5_12 ")" is imm_23_27=0b00100 & imm_21_22=0b00 & S5 & imm_13=0 & imm_5_12 & D5 {
        local EA:4 = S5 + imm_5_12;
        D5 = D5 + EA;
    }
    :D5"-=add("S5",#"imm_5_12")" is imm_23_27=0b00101 & imm_21_22=0b00 & S5 & imm_13=0 & imm_5_12 & D5 {
        local tmp:4 = S5+imm_5_12;
        D5 = D5 - tmp;
    }

    :D5 "+=add(" S5 "," T5 ")" is imm_21_27=0b1111000 & S5 & imm_13=0 & T5 & imm_5_7=0b001 & D5 {
        local EA:4 = S5 + T5;
        D5 = D5 + EA;
    }
    :D5 "+=add(" S5 "," T5 ")" is imm_21_27=0b1111100 & S5 & imm_13=0 & T5 & imm_5_7=0b001 & D5 {
        local EA:4 = S5 + T5;
        D5 = D5 - EA;
    }
}
# XTYPE/ALU:Add dword
with slot: iclass=0b1101 {
    :D5_pair "=add(" S5_pair "," T5_pair ")" is imm_21_27=0b0011000 & S5_pair & imm_13=0 & T5_pair & imm_5_7=0b111 & D5_pair {
        D5_pair = S5_pair + T5_pair;
    }
    :"=addd1" is imm_21_27=0b0011011 & S5 & imm_13=0 & T5 & imm_5_7=0b101 & D5 {
    _stub();
    }
    :D5_pair "=add(" S5_pair "," T5_pair "):raw:lo" is imm_21_27=0b0011011 & S5_pair & imm_13=0 & T5_pair & imm_5_7=0b110 & D5_pair {
    	D5_pair = T5_pair + sext(S5_pair:4);
    }
    :"=addd3" is imm_21_27=0b0011011 & S5 & imm_13=0 & T5 & imm_5_7=0b111 & D5 {
    _stub();
    }

    :"=addd4" is imm_21_27=0b0101100 & S5 & imm_13=0 & T5 & imm_7=0 & imm_5_6=0 & D5 {
    _stub();
    }
}

# XTYPE/ALU:Add hword
with slot: iclass=0b1101 {
    :D5 "=add(" T5^".L" "," S5^".L" ")" is imm_21_27=0b0101000 & S5 & imm_13=0 & T5 & imm_6_7=0b00 & imm_5=0 & D5 {
    local E:2 = T5:2 + S5:2;
    D5 = sext(E);
    }
    :"=addhw01" is imm_21_27=0b0101000 & S5 & imm_13=0 & T5 & imm_6_7=0b01 & imm_5=0 & D5 {
    _stub();
    }
    :"=addhw02" is imm_21_27=0b0101000 & S5 & imm_13=0 & T5 & imm_6_7=0b10 & imm_5=0 & D5 {
    _stub();
    }
    :"=addhw03" is imm_21_27=0b0101000 & S5 & imm_13=0 & T5 & imm_6_7=0b11 & imm_5=0 & D5 {
    _stub();
    }
    :"=addhw04" is imm_21_27=0b0101010 & S5 & imm_13=0 & T5 & imm_5_7=0b000 & D5 {
    _stub();
    }
    :"=addhw05" is imm_21_27=0b0101010 & S5 & imm_13=0 & T5 & imm_5_7=0b001 & D5 {
    _stub();
    }
    :"=addhw06" is imm_21_27=0b0101010 & S5 & imm_13=0 & T5 & imm_5_7=0b011 & D5 {
    _stub();
    }
    :"=addhw07" is imm_21_27=0b0101010 & S5 & imm_13=0 & T5 & imm_5_7=0b100 & D5 {
    _stub();
    }
    :"=addhw08" is imm_21_27=0b0101010 & S5 & imm_13=0 & T5 & imm_5_7=0b101 & D5 {
    _stub();
    }
    :"=addhw09" is imm_21_27=0b0101010 & S5 & imm_13=0 & T5 & imm_5_7=0b110 & D5 {
    _stub();
    }
    :"=addhw10" is imm_21_27=0b0101010 & S5 & imm_13=0 & T5 & imm_5_7=0b111 & D5 {
    _stub();
    }
}

# XTYPE/ALU:Add or sub dword w/ cary
with slot: iclass=0b1100 {
    :"=addcarry0" is imm_21_27=0b0010110 & S5 & imm_13=0 & T5 & imm_7=0 & imm_5_6 & D5 {
    _stub();
    }
    :"=addcarry1" is imm_21_27=0b0010111 & S5 & imm_13=0 & T5 & imm_7=0 & imm_5_6 & D5 {
    _stub();
    }
}

# XTYPE/ALU:Clip unsign
with slot: iclass=0b1000 {
    :"=clip" is imm_21_27=0b1000110 & S5 & imm_13=0 & imm_8_12 & imm_5_7=0b101 & D5 {
    _stub();
    }
}

# XTYPE/ALU:logical dword
with slot: iclass=0b1000 {
    :D5_pair "=not(" S5_pair ")" is imm_21_27=0b0000100 & S5_pair & imm_8_13=0 & imm_5_7=0b100 & D5_pair {
    	D5_pair = ~S5_pair;
    }
}
with slot: iclass=0b1101 {
    :D5_pair "=and(" S5_pair "," T5_pair ")" is imm_21_27=0b0011111 & S5_pair & imm_13=0 & T5_pair & imm_5_7=0b000 & D5_pair {
    	D5_pair = S5_pair & T5_pair;
    }
    :D5_pair "=and(" S5_pair ",~" T5_pair ")" is imm_21_27=0b0011111 & S5_pair & imm_13=0 & T5_pair & imm_5_7=0b001 & D5_pair {
    	D5_pair = S5_pair & (~T5_pair);
    }
    :D5_pair "=or(" S5_pair "," T5_pair ")" is imm_21_27=0b0011111 & S5_pair & imm_13=0 & T5_pair & imm_5_7=0b010 & D5_pair {
    	D5_pair = S5_pair | T5_pair;
    }
    :D5_pair "=or(" S5_pair ",~" T5_pair ")" is imm_21_27=0b0011111 & S5_pair & imm_13=0 & T5_pair & imm_5_7=0b011 & D5_pair {
    	D5_pair = S5_pair | (~T5_pair);
    }
    :D5_pair "=xor(" S5_pair "," T5_pair ")" is imm_21_27=0b0011111 & S5_pair & imm_13=0 & T5_pair & imm_5_7=0b100 & D5_pair {
    	D5_pair = S5_pair ^ T5_pair;
    }
}

# XTYPE/ALU:logical logical dword
with slot: iclass=0b1100 {
    :D5_pair "^=xor(" S5_pair "," T5_pair ")" is imm_22_27=0b101010 & imm_21=0 & S5_pair & imm_13=0 & T5_pair & imm_5_7=0b000 & D5_pair {
    	D5_pair = D5_pair ^ (S5_pair ^ T5_pair);
    }
}

# XTYPE/ALU:logical logical word
with slot: iclass=0b1101 {
    :"|=and" is imm_22_27=0b101000 & imm_21 & S5 & imm_5_13 & imm_0_4  {
    _stub();
    }
    :S5"=or("D5",and(S5,"s10"))" is imm_22_27=0b101001 & imm_21 & S5 & imm_5_13u & D5 [s10 = imm_5_13u | (imm_21 << 9); ] {
        local EA:4 = S5 & s10;  
        S5 = D5 | EA;
    }
    :D5"|=or("S5","s10")" is imm_22_27=0b101010 & imm_21 & S5 & imm_5_13u & D5 [s10 = imm_5_13u | (imm_21 << 9); ] {
        local EA:4 = S5 | s10;  
        D5 = D5 | EA;
    }
}
#with wslot: iclass64=0b1101 {
    #:S564"=or("D564",and(S564,"s10"))" is imm64_22_27=0b101001 & imm64_21 & S564 & imm64_5_13u & imm64_5_10u & D564 & immw_his & immw_lou [s10 = imm64_5_10u | (immw_lou << 6) | (immw_his << 20) ; ] {
        #local EA:4 = S564 & s10;  
        #S564 = D564 | EA;
    #}
#}
with slot: iclass=0b1110 {
    :D5"|=and("S5","T5")" is imm_21_27=0b1111001 & S5 & imm_13=0 & T5 & imm_5_7=0b000 & D5  {
        local EA:4 = S5 & T5;  
        D5 = D5 | EA;
    }
    :D5"&=and("S5","T5")" is imm_21_27=0b1111001 & S5 & imm_13=0 & T5 & imm_5_7=0b001 & D5  {
        local EA:4 = S5 & T5;  
        D5 = D5 & EA;
    }
    :D5"^=and("S5","T5")" is imm_21_27=0b1111001 & S5 & imm_13=0 & T5 & imm_5_7=0b010 & D5  {
        local EA:4 = S5 & T5;  
        D5 = D5 ^ EA;
    }

    :D5"&=and("S5","T5")" is imm_21_27=0b1111010 & S5 & imm_13=0 & T5 & imm_5_7=0b000 & D5  {
        local EA:4 = S5 & T5;  
        D5 = D5 & EA;
    }
    :D5"&=or("S5","T5")" is imm_21_27=0b1111010 & S5 & imm_13=0 & T5 & imm_5_7=0b001 & D5  {
        local EA:4 = S5 | T5;  
        D5 = D5 & EA;
    }
    :D5"&=xor("S5","T5")" is imm_21_27=0b1111010 & S5 & imm_13=0 & T5 & imm_5_7=0b010 & D5  {
        local EA:4 = S5 ^ T5;  
        D5 = D5 & EA;
    }
    :D5"|=and("S5","T5")" is imm_21_27=0b1111010 & S5 & imm_13=0 & T5 & imm_5_7=0b011 & D5  {
        local EA:4 = S5 & T5;  
        D5 = D5 | EA;
    }
    :D5"^=xor("S5","T5")" is imm_21_27=0b1111100 & S5 & imm_13=0 & T5 & imm_5_7=0b011 & D5  {
        local EA:4 = S5 ^ T5;  
        D5 = D5 ^ EA;
    }
    :D5"|=or("S5","T5")" is imm_21_27=0b1111110 & S5 & imm_13=0 & T5 & imm_5_7=0b000 & D5  {
        local EA:4 = S5 | T5;  
        D5 = D5 | EA;
    }
    :D5"|=xor("S5","T5")" is imm_21_27=0b1111110 & S5 & imm_13=0 & T5 & imm_5_7=0b001 & D5  {
        local EA:4 = S5 ^ T5;  
        D5 = D5 | EA;
    }
    :D5"^=and("S5","T5")" is imm_21_27=0b1111110 & S5 & imm_13=0 & T5 & imm_5_7=0b010 & D5  {
        local EA:4 = S5 & T5;  
        D5 = D5 ^ EA;
    }
    :D5"^=or("S5","T5")" is imm_21_27=0b1111110 & S5 & imm_13=0 & T5 & imm_5_7=0b011 & D5  {
        local EA:4 = S5 | T5;  
        D5 = D5 ^ EA;
    }

}

# XTYPE/ALU:max word
with slot: iclass=0b1101 {
    :D5 "=max(" T5 "," S5 ")" is imm_21_27=0b0101110 & S5 & imm_13=0 & T5 & imm_7=0 & imm_5_6=0 & D5 {
        if (T5 s> S5) goto <p2>;
        D5 = S5;
        goto <end>;
        <p2>
        D5 = T5;
        <end>
    }
    :D5 "=maxu(" T5 "," S5 ")" is imm_21_27=0b0101110 & S5 & imm_13=0 & T5 & imm_7=1 & imm_5_6=0 & D5 {
        if (T5 > S5) goto <p2>;
        D5 = S5;
        goto <end>;
        <p2>
        D5 = T5;
        <end>
    }
}

# XTYPE/ALU:max dword
with slot: iclass=0b1101 {
    :D5_pair "=max(" S5_pair "," T5_pair ")" is imm_21_27=0b0011110 & S5_pair & imm_13=0 & T5_pair & imm_5_7=0b100 & D5_pair {
        if (T5_pair s> S5_pair) goto <p2>;
        D5_pair = S5_pair;
        goto <end>;
        <p2>
        D5_pair = T5_pair;
        <end>
    }
    :D5_pair "=maxu(" S5_pair "," T5_pair ")" is imm_21_27=0b0011110 & S5_pair & imm_13=0 & T5_pair & imm_5_7=0b101 & D5_pair {
        if (T5_pair > S5_pair) goto <p2>;
        D5_pair = S5_pair;
        goto <end>;
        <p2>
        D5_pair = T5_pair;
        <end>
    }
}

# XTYPE/ALU:min word
with slot: iclass=0b1101 {
    :D5 "=min(" T5 "," S5 ")" is imm_21_27=0b0101101 & S5 & imm_13=0 & T5 & imm_7=0 & imm_5_6=0 & D5 {
        if (T5 s< S5) goto <p2>;
        D5 = S5;
        goto <end>;
        <p2>
        D5 = T5;
        <end>
    }
    :D5 "=minu(" T5 "," S5 ")" is imm_21_27=0b0101101 & S5 & imm_13=0 & T5 & imm_7=1 & imm_5_6=0 & D5 {
        if (T5 s< S5) goto <p2>;
        D5 = S5;
        goto <end>;
        <p2>
        D5 = T5;
        <end>
    }
}

# XTYPE/ALU:min dword
with slot: iclass=0b1101 {
    :"mind0" is imm_21_27=0b0011101 & S5 & imm_13=0 & T5 & imm_5_7=0b110 & D5 {
    _stub();
    }
    :D5_pair "=minu(" T5_pair "," S5_pair ")" is imm_21_27=0b0011101 & S5_pair & imm_13=0 & T5_pair & imm_5_7=0b111 & D5_pair {
        if (T5_pair < S5_pair) goto <p2>;
        D5_pair = S5_pair;
        goto <end>;
        <p2>
        D5_pair = T5_pair;
        <end>
    }
}

# XTYPE/ALU:mod wrap
with slot: iclass=0b1101 {
    :"modw" is imm_21_27=0b0011111 & S5 & imm_13=0 & T5 & imm_5_7=0b111 & D5 {
    _stub();
    }
}

# XTYPE/ALU:neg
with slot: iclass=0b1000 {
    :D5_pair "=neg(" S5_pair ")" is imm_21_27=0b0000100 & S5_pair & imm_8_13=0 & imm_5_7=0b101 & D5_pair {
    	D5_pair = -S5_pair;
    }
    :"neg1" is imm_21_27=0b1100100 & S5 & imm_8_13=0 & imm_5_7=0b110 & D5 {
    _stub();
    }
}

# XTYPE/ALU:round
with slot: iclass=0b1000 {
    :"rnd0" is imm_21_27=0b1000110 & S5 & imm_8_13=0 & imm_5_7=0b001 & D5 {
    _stub();
    }
    :"rnd1" is imm_21_27=0b1000111 & S5 & imm_13=0 & imm_8_12 & imm_6_7=0b00 & imm_5=0 & D5 {
    _stub();
    }
    :"rnd2" is imm_21_27=0b1000111 & S5 & imm_13=0 & imm_8_12 & imm_6_7=0b10 & imm_5=0 & D5 {
    _stub();
    }
    :"rnd3" is imm_21_27=0b1000111 & S5 & imm_13=0 & imm_8_12 & imm_6_7=0b11 & imm_5=0 & D5 {
    _stub();
    }
    :"rnd4" is imm_21_27=0b1000111 & S5 & imm_8_13 & imm_6_7=0b01 & imm_5=0 & D5 {
    _stub();
    }
}
with slot: iclass=0b1100 {
    :"rnd5" is imm_22_27=0b011011 & imm_21=0 & S5 & imm_13=0 & T5 & imm_6_7=0b00 & imm_5=0 & D5 {
    _stub();
    }
    :"rnd6" is imm_22_27=0b011011 & imm_21=0 & S5 & imm_13=0 & T5 & imm_6_7=0b01 & imm_5=0 & D5 {
    _stub();
    }
    :"rnd7" is imm_22_27=0b011011 & imm_21=0 & S5 & imm_13=0 & T5 & imm_6_7=0b10 & imm_5=0 & D5 {
    _stub();
    }
    :"rnd8" is imm_22_27=0b011011 & imm_21=0 & S5 & imm_13=0 & T5 & imm_6_7=0b11 & imm_5=0 & D5 {
    _stub();
    }
}

# XTYPE/ALU:sub dword
with slot: iclass=0b1101 {
    :D5_pair "=sub(" T5_pair "," S5_pair ")" is imm_21_27=0b0011001 & S5_pair & imm_13=0 & T5_pair & imm_5_7=0b111 & D5_pair {
        D5_pair = T5_pair - S5_pair;
    }
    :"subd" is imm_21_27=0b0101100 & S5 & imm_13=0 & T5 & imm_7=1 & imm_5_6=0 & D5 {
    _stub();
    }
}

# XTYPE/ALU:sub acc word
with slot: iclass=0b1110 {
    :D5 "+=sub(" T5 "," S5 ")" is imm_21_27=0b1111000 & S5 & imm_13=0 & T5 & imm_5_7=0b011 & D5 {
    	D5 = D5 + (T5 - S5);
    }
}

# XTYPE/ALU:sub hword
with slot: iclass=0b1101 {
    :"subhw00" is imm_21_27=0b0101001 & S5 & imm_13=0 & T5 & imm_6_7=0b00 & imm_5=0 & D5 {
    _stub();
    }
    :"subhw01" is imm_21_27=0b0101001 & S5 & imm_13=0 & T5 & imm_6_7=0b01 & imm_5=0 & D5 {
    _stub();
    }
    :"subhw02" is imm_21_27=0b0101001 & S5 & imm_13=0 & T5 & imm_6_7=0b10 & imm_5=0 & D5 {
    _stub();
    }
    :"subhw03" is imm_21_27=0b0101001 & S5 & imm_13=0 & T5 & imm_6_7=0b11 & imm_5=0 & D5 {
    _stub();
    }
    :"subhw04" is imm_21_27=0b0101011 & S5 & imm_13=0 & T5 & imm_5_7=0b000 & D5 {
    _stub();
    }
    :"subhw05" is imm_21_27=0b0101011 & S5 & imm_13=0 & T5 & imm_5_7=0b001 & D5 {
    _stub();
    }
    :"subhw06" is imm_21_27=0b0101011 & S5 & imm_13=0 & T5 & imm_5_7=0b010 & D5 {
    _stub();
    }
    :"subhw07" is imm_21_27=0b0101011 & S5 & imm_13=0 & T5 & imm_5_7=0b011 & D5 {
    _stub();
    }
    :"subhw08" is imm_21_27=0b0101011 & S5 & imm_13=0 & T5 & imm_5_7=0b100 & D5 {
    _stub();
    }
    :"subhw09" is imm_21_27=0b0101011 & S5 & imm_13=0 & T5 & imm_5_7=0b101 & D5 {
    _stub();
    }
    :"subhw10" is imm_21_27=0b0101011 & S5 & imm_13=0 & T5 & imm_5_7=0b110 & D5 {
    _stub();
    }
    :"subhw11" is imm_21_27=0b0101011 & S5 & imm_13=0 & T5 & imm_5_7=0b111 & D5 {
    _stub();
    }
}

# XTYPE/ALU:sext w->dw
with slot: iclass=0b1000 {
    :D5_pair "=sxtw(" S5 ")" is imm_22_27=0b010001 & imm_21=0 & S5 & imm_8_13=0 & imm_6_7=0b00 & imm_5=0 & D5_pair {
    	D5_pair = sext(S5:2);
    }
}

# XTYPE/ALU:vector abs val hw
with slot: iclass=0b1000 {
    :"vabsh" is imm_21_27=0b0000010 & S5 & imm_8_13=0 & imm_5_7=0b100 & D5 {
    _stub();
    }
    :"vabshsat" is imm_21_27=0b0000010 & S5 & imm_8_13=0 & imm_5_7=0b101 & D5 {
    _stub();
    }
}

# XTYPE/ALU:vector abs val w
with slot: iclass=0b1000 {
    :"vabsw" is imm_21_27=0b0000010 & S5 & imm_8_13=0 & imm_5_7=0b110 & D5 {
    _stub();
    }
    :"vabswsat" is imm_21_27=0b0000010 & S5 & imm_8_13=0 & imm_5_7=0b111 & D5 {
    _stub();
    }
}

# XTYPE/ALU:vector abs diff by
with slot: iclass=0b1110 {
    :"vabsdiffub" is imm_21_27=0b1000101 & S5 & imm_13=0 & T5 & imm_5_7=0b000 & D5 {
    _stub();
    }
    :"vabsdiffb" is imm_21_27=0b1000111 & S5 & imm_13=0 & T5 & imm_5_7=0b000 & D5 {
    _stub();
    }
}

# XTYPE/ALU:vector abs diff hw
with slot: iclass=0b1110 {
    :"vabsdiffh" is imm_21_27=0b1000011 & S5 & imm_13=0 & T5 & imm_5_7=0b000 & D5 {
    _stub();
    }
}

# XTYPE/ALU:vector abs diff w
with slot: iclass=0b1110 {
    :"vabsdiffw" is imm_21_27=0b1000001 & S5 & imm_13=0 & T5 & imm_5_7=0b000 & D5 {
    _stub();
    }
}

# XTYPE/ALU:vector add cmp and sel max by - TODO: not documented??

# XTYPE/ALU:vector add cmp and sel max hw
with slot: iclass=0b1110 {
    :"vacsh" is imm_21_27=0b1010101 & S5 & imm_13=0 & T5 & imm_7=0 & imm_5_6 & D5 {
    _stub();
    }
}

# XTYPE/ALU:vector add hw
with slot: iclass=0b1101 {
    :"vaddh" is imm_21_27=0b0011000 & S5 & imm_13=0 & T5 & imm_5_7=0b010 & D5 {
    _stub();
    }
    :"vaddhsat" is imm_21_27=0b0011000 & S5 & imm_13=0 & T5 & imm_5_7=0b011 & D5 {
    _stub();
    }
    :"vadduhsat" is imm_21_27=0b0011000 & S5 & imm_13=0 & T5 & imm_5_7=0b100 & D5 {
    _stub();
    }
}

# XTYPE/ALU:vector add hw w sat and pck uby
with slot: iclass=0b1100 {
    :"vaddhub" is imm_22_27=0b000101 & imm_21=0 & S5 & imm_13=0 & T5 & imm_5_7=0b001 & D5 {
    _stub();
    }
}

# XTYPE/ALU:vector red add u by
with slot: iclass=0b1110 {
    :"vraddub" is imm_21_27=0b1000010 & S5 & imm_13=0 & T5 & imm_5_7=0b001 & D5 {
    _stub();
    }
    :"rxx=vraddub" is imm_21_27=0b1010010 & S5 & imm_13=0 & T5 & imm_5_7=0b001 & D5 {
    _stub();
    }
}

# XTYPE/ALU:vector red add hw
with slot: iclass=0b1110 {
    :"vradduh" is imm_23_27=0b10010 & imm_21_22=0 & S5 & imm_13=0 & T5 & imm_7=0 & imm_5_6=0b01 & D5 {
    _stub();
    }
    :"vraddh" is imm_23_27=0b10010 & imm_22=0 & imm_21=1 & S5 & imm_13=0 & T5 & imm_5_7=0b111 & D5 {
    _stub();
    }
}

# XTYPE/ALU:vector red add by
with slot: iclass=0b1101 {
    :"vraddub" is imm_21_27=0b0011000 & S5 & imm_13=0 & T5 & imm_5_7=0b000 & D5 {
    _stub();
    }
    :"vraddub" is imm_21_27=0b0011000 & S5 & imm_13=0 & T5 & imm_5_7=0b001 & D5 {
    _stub();
    }
}

# XTYPE/ALU:vector red add w
with slot: iclass=0b1101 {
    :"vraddw" is imm_21_27=0b0011000 & S5 & imm_13=0 & T5 & imm_5_7=0b101 & D5 {
    _stub();
    }
    :"vraddwsat" is imm_21_27=0b0011000 & S5 & imm_13=0 & T5 & imm_5_7=0b110 & D5 {
    _stub();
    }
}

# XTYPE/ALU:vector avg hw
with slot: iclass=0b1101 {
    :"vavgh00" is imm_21_27=0b0011010 & S5 & imm_13=0 & T5 & imm_5_7=0b010 & D5 {
    _stub();
    }
    :"vavgh01" is imm_21_27=0b0011010 & S5 & imm_13=0 & T5 & imm_5_7=0b011 & D5 {
    _stub();
    }
    :"vavgh02" is imm_21_27=0b0011010 & S5 & imm_13=0 & T5 & imm_5_7=0b100 & D5 {
    _stub();
    }
    :"vavgh03" is imm_21_27=0b0011010 & S5 & imm_13=0 & T5 & imm_5_7=0b101 & D5 {
    _stub();
    }
    :"vavgh04" is imm_21_27=0b0011010 & S5 & imm_13=0 & T5 & imm_6_7=0b11 & imm_5=0 & D5 {
    _stub();
    }
    :"vavgh05" is imm_21_27=0b0011100 & S5 & imm_13=0 & T5 & imm_5_7=0b000 & D5 {
    _stub();
    }
    :"vavgh06" is imm_21_27=0b0011100 & S5 & imm_13=0 & T5 & imm_5_7=0b001 & D5 {
    _stub();
    }
    :"vavgh07" is imm_21_27=0b0011100 & S5 & imm_13=0 & T5 & imm_5_7=0b010 & D5 {
    _stub();
    }
}

# XTYPE/ALU:vector avg u by
with slot: iclass=0b1101 {
    :"vavgub" is imm_21_27=0b0011010 & S5 & imm_13=0 & T5 & imm_5_7=0b000 & D5 {
    _stub();
    }
    :"vavgubrnd" is imm_21_27=0b0011010 & S5 & imm_13=0 & T5 & imm_5_7=0b001 & D5 {
    _stub();
    }
}

# XTYPE/ALU:vector avg w
with slot: iclass=0b1101 {
    :"vavgw00" is imm_21_27=0b0011011 & S5 & imm_13=0 & T5 & imm_5_7=0b000 & D5 {
    _stub();
    }
    :"vavgw01" is imm_21_27=0b0011011 & S5 & imm_13=0 & T5 & imm_5_7=0b001 & D5 {
    _stub();
    }
    :"vavgw02" is imm_21_27=0b0011011 & S5 & imm_13=0 & T5 & imm_5_7=0b010 & D5 {
    _stub();
    }
    :"vavgw03" is imm_21_27=0b0011011 & S5 & imm_13=0 & T5 & imm_5_7=0b011 & D5 {
    _stub();
    }
    :"vavgw04" is imm_21_27=0b0011011 & S5 & imm_13=0 & T5 & imm_5_7=0b100 & D5 {
    _stub();
    }
    :"vavgw05" is imm_21_27=0b0011100 & S5 & imm_13=0 & T5 & imm_5_7=0b011 & D5 {
    _stub();
    }
    :"vavgw06" is imm_21_27=0b0011100 & S5 & imm_13=0 & T5 & imm_6_7=0b10 & imm_5=0 & D5 {
    _stub();
    }
    :"vavgw07" is imm_21_27=0b0011100 & S5 & imm_13=0 & T5 & imm_6_7=0b11 & imm_5=0 & D5 {
    _stub();
    }
}

# XTYPE/ALU:vector clip un
with slot: iclass=0b1000 {
    :"vclip" is imm_21_27=0b1000110 & S5 & imm_13=0 & imm_8_12 & imm_5_7=0b110 & D5 {
    _stub();
    }
}

# XTYPE/ALU:vector cond neg
with slot: iclass=0b1100 {
    :"vcnegh" is imm_22_27=0b001111 & imm_21=0 & S5 & imm_13=0 & T5 & imm_6_7=0b01 & imm_5=0 & D5 {
    _stub();
    }
    :"vrcnegh" is imm_21_27=0b1011001 & S5 & imm_13=1 & T5 & imm_5_7=0b111 & D5 {
    _stub();
    }
}

# XTYPE/ALU:vector max by
with slot: iclass=0b1101 {
    :"vmaxub" is imm_21_27=0b0011110 & S5 & imm_13=0 & T5 & imm_5_7=0b000 & D5 {
    _stub();
    }
    :"vmaxb" is imm_21_27=0b0011110 & S5 & imm_13=0 & T5 & imm_5_7=0b110 & D5 {
    _stub();
    }
}

# XTYPE/ALU:vector max hw
with slot: iclass=0b1101 {
    :"vmaxh" is imm_21_27=0b0011110 & S5 & imm_13=0 & T5 & imm_5_7=0b001 & D5 {
    _stub();
    }
    :"vmaxuh" is imm_21_27=0b0011110 & S5 & imm_13=0 & T5 & imm_5_7=0b010 & D5 {
    _stub();
    }
}

# XTYPE/ALU:vector red max hw
with slot: iclass=0b1100 {
    :"vrmaxh" is imm_21_27=0b1011001 & S5 & imm_13=0 & T5 & imm_5_7=0b001 & D5 {
    _stub();
    }
    :"vrmaxuh" is imm_21_27=0b1011001 & S5 & imm_13=1 & T5 & imm_5_7=0b001 & D5 {
    _stub();
    }
}

# XTYPE/ALU:vector red max w
with slot: iclass=0b1100 {
    :"vrmaxw" is imm_21_27=0b1011001 & S5 & imm_13=0 & T5 & imm_5_7=0b010 & D5 {
    _stub();
    }
    :"vrmaxuw" is imm_21_27=0b1011001 & S5 & imm_13=1 & T5 & imm_5_7=0b010 & D5 {
    _stub();
    }
}

# XTYPE/ALU:vector max w
with slot: iclass=0b1101 {
    :"vmaxuw" is imm_21_27=0b0011101 & S5 & imm_13=0 & T5 & imm_5_7=0b101 & D5 {
    _stub();
    }
    :"vmaxw" is imm_21_27=0b0011110 & S5 & imm_13=0 & T5 & imm_5_7=0b011 & D5 {
    _stub();
    }
}

# XTYPE/ALU:vector min b
with slot: iclass=0b1101 {
    :"vminub" is imm_21_27=0b0011101 & S5 & imm_13=0 & T5 & imm_5_7=0b000 & D5 {
    _stub();
    }
    :"vminb" is imm_21_27=0b0011110 & S5 & imm_13=0 & T5 & imm_5_7=0b111 & D5 {
    _stub();
    }
}
with slot: iclass=0b1110 {
    :"vminub2" is imm_21_27=0b1010111 & S5 & imm_13=0 & T5 & imm_7=0 & imm_5_6 & D5 {
    _stub();
    }
}

# XTYPE/ALU:vector min hw
with slot: iclass=0b1101 {
    :"vminh" is imm_21_27=0b0011101 & S5 & imm_13=0 & T5 & imm_5_7=0b001 & D5 {
    _stub();
    }
    :"vminuh" is imm_21_27=0b0011101 & S5 & imm_13=0 & T5 & imm_5_7=0b010 & D5 {
    _stub();
    }
}

# XTYPE/ALU:vector red min hw
with slot: iclass=0b1100 {
    :"vrminh" is imm_21_27=0b1011001 & S5 & imm_13=0 & T5 & imm_5_7=0b101 & D5 {
    _stub();
    }
    :"vrminuh" is imm_21_27=0b1011001 & S5 & imm_13=1 & T5 & imm_5_7=0b101 & D5 {
    _stub();
    }
}

# XTYPE/ALU:vector red min w
with slot: iclass=0b1100 {
    :"vrminw" is imm_21_27=0b1011001 & S5 & imm_13=0 & T5 & imm_5_7=0b110 & D5 {
    _stub();
    }
    :"vrminuw" is imm_21_27=0b1011001 & S5 & imm_13=1 & T5 & imm_5_7=0b110 & D5 {
    _stub();
    }
}

# XTYPE/ALU:vector min w
with slot: iclass=0b1101 {
    :"vminw" is imm_21_27=0b0011101 & S5 & imm_13=0 & T5 & imm_5_7=0b011 & D5 {
    _stub();
    }
    :"vminuw" is imm_21_27=0b0011101 & S5 & imm_13=0 & T5 & imm_5_7=0b100 & D5 {
    _stub();
    }
}

# XTYPE/ALU:vector sum abs diff u
with slot: iclass=0b1110 {
    :"vrsadub" is imm_21_27=0b1000010 & S5 & imm_13=0 & T5 & imm_5_7=0b010 & D5 {
    _stub();
    }
    :"+vrsadub" is imm_21_27=0b1010010 & S5 & imm_13=0 & T5 & imm_5_7=0b010 & D5 {
    _stub();
    }
}

# XTYPE/ALU:vector sub hw
with slot: iclass=0b1101 {
    :"vsubh" is imm_21_27=0b0011001 & S5 & imm_13=0 & T5 & imm_5_7=0b010 & D5 {
    _stub();
    }
    :"vsubhsat" is imm_21_27=0b0011001 & S5 & imm_13=0 & T5 & imm_5_7=0b011 & D5 {
    _stub();
    }
    :"vsubuhsat" is imm_21_27=0b0011001 & S5 & imm_13=0 & T5 & imm_5_7=0b100 & D5 {
    _stub();
    }
}

# XTYPE/ALU:vector sub by
with slot: iclass=0b1101 {
    :"vsubub" is imm_21_27=0b0011001 & S5 & imm_13=0 & T5 & imm_5_7=0b000 & D5 {
    _stub();
    }
    :"vsububsat" is imm_21_27=0b0011001 & S5 & imm_13=0 & T5 & imm_5_7=0b001 & D5 {
    _stub();
    }
}


# XTYPE/ALU:vector sub w
with slot: iclass=0b1101 {
    :"vsubw" is imm_21_27=0b0011001 & S5 & imm_13=0 & T5 & imm_5_7=0b101 & D5 {
    _stub();
    }
    :"vsubwsat" is imm_21_27=0b0011001 & S5 & imm_13=0 & T5 & imm_5_7=0b110 & D5 {
    _stub();
    }
}



# XTYPE/BIT:Count leading
define pcodeop cl0;

with slot: iclass=0b1000 {
    :"clb" is imm_21_27=0b1000010 & S5 & imm_8_13=0 & imm_5_7=0b000 & D5 {
    _stub();
    }
    :D5_pair "=cl0(" S5_pair ")" is imm_21_27=0b1000010 & S5_pair & imm_8_13=0 & imm_5_7=0b010 & D5_pair {
        D5_pair = cl0(S5_pair);
    }
    :"cl1" is imm_21_27=0b1000010 & S5 & imm_8_13=0 & imm_5_7=0b100 & D5 {
    _stub();
    }
    :"normamt" is imm_21_27=0b1000011 & S5 & imm_8_13=0 & imm_5_7=0b000 & D5 {
    _stub();
    }

    :"addclb" is imm_21_27=0b1000011 & S5 & imm_8_13 & imm_5_7=0b010 & D5 {
    _stub();
    }
    :"addclb1" is imm_21_27=0b1100001 & S5 & imm_8_13 & imm_5_7=0b000 & D5 {
    _stub();
    }

    :"clb0" is imm_21_27=0b1100000 & S5 & imm_8_13=0 & imm_5_7=0b100 & D5 {
    _stub();
    }
    :D5 "=cl0(" S5 ")" is imm_21_27=0b1100000 & S5 & imm_8_13=0 & imm_5_7=0b101 & D5 {
        D5 = cl0(S5);
    }
    :"cl1" is imm_21_27=0b1100000 & S5 & imm_8_13=0 & imm_5_7=0b110 & D5 {
    _stub();
    }
    :"normamt2" is imm_21_27=0b1100000 & S5 & imm_8_13=0 & imm_5_7=0b111 & D5 {
    _stub();
    }
}

# XTYPE/BIT:Count pop
define pcodeop popcnt;
with slot: iclass=0b1000 {
    :D5 "=popcnt(" S5 ")" is imm_21_27=0b1000011 & S5 & imm_8_13=0 & imm_5_7=0b011 & D5 {
    	D5 = popcnt(S5);
    }
}

# XTYPE/BIT:Count trail
define pcodeop count_trailing_ones;
with slot: iclass=0b1000 {
    :"ct0" is imm_21_27=0b1000111 & S5 & imm_8_13=0 & imm_5_7=0b010 & D5 {
    _stub();
    }
    :"ct1" is imm_21_27=0b1000111 & S5 & imm_8_13=0 & imm_5_7=0b100 & D5 {
    _stub();
    }
    :D5 "=ct0(" S5 ")" is imm_21_27=0b1100010 & S5 & imm_8_13=0 & imm_5_7=0b100 & D5 {
    	D5 = count_trailing_ones(S5);
    }
    :"ct11" is imm_21_27=0b1100010 & S5 & imm_8_13=0 & imm_5_7=0b101 & D5 {
    _stub();
    }
}

# XTYPE/BIT:Extract bit
with slot: iclass=0b1000 {
    :D5_pair"=extractu("S5_pair","imm_8_13u","U6")" is imm_24_27=0b0001 & imm_21_23u & S5_pair & imm_8_13u & imm_5_7u & D5_pair [ U6 = imm_5_7u | (imm_21_23u << 3);]{
    	local tmp:8 = S5_pair >> U6;
	tmp = tmp << (64-imm_8_13u);
	tmp = tmp >> (64-imm_8_13u);
	D5_pair = tmp;
    }
    :D5_pair"=extract("S5_pair","imm_8_13u","U6")" is imm_24_27=0b1010 & imm_21_23u & S5_pair & imm_8_13u & imm_5_7u & D5_pair [ U6 = imm_5_7u | (imm_21_23u << 3);]{
    	local tmp:8 = S5_pair >> U6;
	tmp = tmp << (64-imm_8_13u);
	tmp = tmp s>> (64-imm_8_13u);
	D5_pair = tmp;
    }
    :D5"=extractu("S5","imm_8_12","U5")" is imm_24_27=0b1101 & imm_23=0 & imm_21_22u & S5 & imm_13=0 & imm_8_12 & imm_5_7u & D5 [ U5 = imm_5_7u | (imm_21_22u << 3);]{
    	local tmp:4 = S5 >> U5;
	tmp = tmp << (32-imm_8_12);
	tmp = tmp s>> (32-imm_8_12);
	D5 = tmp;
    }
    :"extu3" is imm_24_27=0b1101 & imm_23=1 & imm_21_22 & S5 & imm_13=0 & imm_8_12 & imm_5_7 & D5 {
_stub();
    }
}
with slot: iclass=0b1100 {
    :"extu4" is imm_22_27=0b000100 & imm_21=0 & S5 & imm_13=0 & T5 & imm_6_7=0b00 & imm_5=0 & D5 {
_stub();
    }
    :"extu5" is imm_22_27=0b000111 & imm_21=0 & S5 & imm_13=0 & T5 & imm_6_7=0b10 & imm_5=0 & D5 {
_stub();
    }
    :"extu6" is imm_22_27=0b100100 & imm_21=0 & S5 & imm_13=0 & T5 & imm_6_7=0b00 & imm_5=0 & D5 {
_stub();
    }
    :"extu7" is imm_22_27=0b100100 & imm_21=0 & S5 & imm_13=0 & T5 & imm_6_7=0b01 & imm_5=0 & D5 {
_stub();
    }
}

# XTYPE/BIT:Insert bit
with slot: iclass=0b1000 {
    :D5_pair "=insert(" S5_pair "," imm_8_13u "," U6 ")" is imm_24_27=0b0011 & imm_21_23u & S5_pair & imm_8_13u & imm_5_7u & D5_pair [ U6 = imm_5_7u | (imm_21_23u << 3);] {
        D5_pair = D5_pair & ~(((1 << imm_8_13u)-1) << U6);
        D5_pair = D5_pair | ((S5_pair & ((1<<imm_8_13u)-1)) << U6);
    }

    :D5 "=insert(" S5 "," imm_8_12u "," U5 ")" is imm_23_27=0b11110 & imm_21_22u & S5 & imm_13=0 & imm_8_12u & imm_5_7u & D5 [ U5 = imm_5_7u | (imm_21_22u << 3); ] {
        D5 = D5 & ~(((1 << imm_8_12u)-1) << U5);
        D5 = D5 | ((S5 & ((1<<imm_8_12u)-1)) << U5);
    }
}

with slot: iclass=0b1100 {
    :"ins2" is imm_24_27=0b1000 & imm_21_23=0 & S5 & imm_13=0 & T5 & imm_5_7=0 & D5 {
_stub();
    }
    :"ins3" is imm_23_27=0b10100 & imm_21_22=0 & S5 & imm_13=0 & T5 & imm_5_7=0 & D5 {
_stub();
    }
}

# XTYPE/BIT:Interleave
with slot: iclass=0b1000 {
    :"intlve0" is imm_21_27=0b0000110 & S5 & imm_8_13=0 & imm_5_7=0b100 & D5 {
_stub();
    }
    :"intlve1" is imm_21_27=0b0000110 & S5 & imm_8_13=0 & imm_5_7=0b101 & D5 {
_stub();
    }
}

# XTYPE/BIT:Linear feedback
with slot: iclass=0b1100 {
    :"lfs" is imm_22_27=0b000110 & imm_21=0 & S5 & imm_13=0 & T5 & imm_5_7=0b110 & D5 {
_stub();
    }
}

# XTYPE/BIT:Masked parity
with slot: iclass=0b1101 {
    :"par0" is imm_24_27=0b0000 & imm_21_23=0 & S5 & imm_13=0 & T5 & imm_5_7=0 & D5 {
_stub();
    }
    :"par1" is imm_21_27=0b0101111 & S5 & imm_13=0 & T5 & imm_5_7=0 & D5 {
_stub();
    }
}

# XTYPE/BIT:Bit rev
with slot: iclass=0b1000 {
    :"brev" is imm_21_27=0b0000110 & S5 & imm_8_13=0 & imm_5_7=0b110 & D5 {
_stub();
    }
    :"brev" is imm_21_27=0b1100010 & S5 & imm_8_13=0 & imm_5_7=0b110 & D5 {
_stub();
    }
}

# XTYPE/BIT:Set clear toggle bit
with slot: iclass=0b1000 {
    :D5"=setbit("S5","imm_8_12")" is imm_21_27=0b1100110 & S5 & imm_13=0 & imm_8_12 & imm_5_7=0b000 & D5 {
       D5 = S5 | (1 << imm_8_12);
    }
    :D5"=clrbit("S5","imm_8_12")" is imm_21_27=0b1100110 & S5 & imm_13=0 & imm_8_12 & imm_5_7=0b001 & D5 {
       D5 = S5 & ~(1 << imm_8_12);
    }
    :D5"=clrbit("S5","imm_8_12")" is imm_21_27=0b1100110 & S5 & imm_13=0 & imm_8_12 & imm_5_7=0b010 & D5 {
       D5 = S5 ^ (1 << imm_8_12);
    }
}
with slot: iclass=0b1100 {
    :D5 "=setbit(" S5 "," T5 ")" is imm_22_27=0b011010 & imm_21=0 & S5 & imm_13=0 & T5 & imm_6_7=0b00 & imm_5=0 & D5 {
    	#TODO: sign?
    	D5 = S5 | (1 << T5);
    }
    :D5 "=clrbit(" S5 "," T5 ")" is imm_22_27=0b011010 & imm_21=0 & S5 & imm_13=0 & T5 & imm_6_7=0b01 & imm_5=0 & D5 {
    	local tmp:4 = 1 << T5;
    	D5 = S5 & (~tmp);
    }
    :D5 "=togglebit(" S5 "," T5 ")" is imm_22_27=0b011010 & imm_21=0 & S5 & imm_13=0 & T5 & imm_6_7=0b10 & imm_5=0 & D5 {
    	D5 = S5 ^ (1 << T5);
    }
}

# XTYPE/BIT:split Bf
with slot: iclass=0b1000 {
    :D5_pair "=bitsplit(" S5 "," imm_8_12u ")" is imm_21_27=0b1000110 & S5 & imm_13=0 & imm_8_12u & imm_5_7=0b100 & D5_pair  {
	local lo:8 = ((zext(S5) >> imm_8_12u) << 31);
	D5_pair = zext(S5) | lo;
    }
}
with slot: iclass=0b1001 {
    :"bitsplit1" is imm_24_27=0b0100 & imm_22_23=0 & imm_21=1 & S5 & imm_13=0 & imm_8_12 & imm_5_7=0 & D5 {
_stub();
    }
}

# XTYPE/BIT:TI
with slot: iclass=0b1000 {
    :"tableidxb" is imm_22_27=0b011100 & imm_21 & S5 & imm_8_13 & imm_5_7 & D5 {
_stub();
    }
    :"tableidxh" is imm_22_27=0b011101 & imm_21 & S5 & imm_8_13 & imm_5_7 & D5 {
_stub();
    }
    :"tableidxw" is imm_22_27=0b011110 & imm_21 & S5 & imm_8_13 & imm_5_7 & D5 {
_stub();
    }
    :"tableidxd" is imm_22_27=0b011111 & imm_21 & S5 & imm_8_13 & imm_5_7 & D5 {
_stub();
    }
}

# XTYPE/Complex
# XTYPE/Complex: add sub hw
with slot: iclass=0b1100 {
    :"vxaddsubh" is imm_22_27=0b000101 & imm_21=0 & S5 & imm_13=0 & T5 & imm_5_7=0b100 & D5 {
        _stub();
    }
    :"vxsubaddh" is imm_22_27=0b000101 & imm_21=0 & S5 & imm_13=0 & T5 & imm_5_7=0b110 & D5 {
        _stub();
    }
    :"vxaddsubh:rnd" is imm_22_27=0b000111 & imm_21=0 & S5 & imm_13=0 & T5 & imm_6_7=0b00 & imm_5=0 & D5 {
        _stub();
    }
    :"vxsubaddh:rnd" is imm_22_27=0b000111 & imm_21=0 & S5 & imm_13=0 & T5 & imm_6_7=0b01 & imm_5=0 & D5 {
        _stub();
    }
}

# XTYPE/Complex: add sub w
with slot: iclass=0b1100 {
    :"vxaddsubw" is imm_22_27=0b000101 & imm_21=0 & S5 & imm_13=0 & T5 & imm_5_7=0b000 & D5 {
        _stub();
    }
    :"vxasubaddw" is imm_22_27=0b000101 & imm_21=0 & S5 & imm_13=0 & T5 & imm_5_7=0b010 & D5 {
        _stub();
    }
}

# XTYPE/Complex: mul
with slot: iclass=0b1110 {
    :"cmpysat" is imm_24_27=0b0101 & imm_23 & imm_21_22=0b00 & S5 & imm_13=0 & T5 & imm_5_7=0b110 & D5 {
        _stub();
    }
    :"cmpysat1" is imm_24_27=0b0101 & imm_23 & imm_21_22=0b10 & S5 & imm_13=0 & T5 & imm_5_7=0b110 & D5 {
        _stub();
    }

    :"cmpysat2" is imm_24_27=0b0111 & imm_23 & imm_21_22=0b00 & S5 & imm_13=0 & T5 & imm_5_7=0b110 & D5 {
        _stub();
    }
    :"cmpysat3" is imm_24_27=0b0111 & imm_23 & imm_21_22=0b00 & S5 & imm_13=0 & T5 & imm_5_7=0b111 & D5 {
        _stub();
    }
    :"cmpysat4" is imm_24_27=0b0111 & imm_23 & imm_21_22=0b10 & S5 & imm_13=0 & T5 & imm_5_7=0b110 & D5 {
        _stub();
    }
    :"cmpysat5" is imm_24_27=0b0111 & imm_23 & imm_21_22=0b10 & S5 & imm_13=0 & T5 & imm_5_7=0b111 & D5 {
        _stub();
    }
}

# XTYPE/Complex: mul real or i
with slot: iclass=0b1110 {
    :"cmpyi0" is imm_21_27=0b0101000 & S5 & imm_13=0 & T5 & imm_5_7=0b001 & D5 {
        _stub();
    }
    :"cmpyi1" is imm_21_27=0b0101000 & S5 & imm_13=0 & T5 & imm_5_7=0b010 & D5 {
        _stub();
    }

    :"cmpyi2" is imm_21_27=0b0111000 & S5 & imm_13=0 & T5 & imm_5_7=0b001 & D5 {
        _stub();
    }
    :"cmpyi3" is imm_21_27=0b0111000 & S5 & imm_13=0 & T5 & imm_5_7=0b010 & D5 {
        _stub();
    }
}

# XTYPE/Complex: mul rnd pck
with slot: iclass=0b1110 {
    :"cmpy:rnd:sat" is imm_24_27=0b1101 & imm_23 & imm_21_22=0b01 & S5 & imm_13=0 & T5 & imm_5_7=0b110 & D5 {
        _stub();
    }
    :"cmpy:rnd:sat" is imm_24_27=0b1101 & imm_23 & imm_21_22=0b11 & S5 & imm_13=0 & T5 & imm_5_7=0b110 & D5 {
        _stub();
    }
}

# XTYPE/Complex: mul 32 x 16
with slot: iclass=0b1100 {
    :"cmpyiwh" is imm_24_27=0b0101 & imm_21_23=0 & S5 & imm_13=0 & T5 & imm_5_7=0b100 & D5 {
        _stub();
    }
    :"cmpyiwh1" is imm_24_27=0b0101 & imm_21_23=0 & S5 & imm_13=0 & T5 & imm_5_7=0b101 & D5 {
        _stub();
    }
    :"cmpyiwh2" is imm_24_27=0b0101 & imm_21_23=0 & S5 & imm_13=0 & T5 & imm_5_7=0b110 & D5 {
        _stub();
    }
    :"cmpyiwh2" is imm_24_27=0b0101 & imm_21_23=0 & S5 & imm_13=0 & T5 & imm_5_7=0b111 & D5 {
        _stub();
    }
}

# XTYPE/Complex: mul real or i 32
with slot: iclass=0b1110 {
    :"cmpyiw00" is imm_21_27=0b1000011 & S5 & imm_13=0 & T5 & imm_5_7=0b010 & D5 {
        _stub();
    }
    :"cmpyiw01" is imm_21_27=0b1000100 & S5 & imm_13=0 & T5 & imm_5_7=0b010 & D5 {
        _stub();
    }
    :"cmpyiw02" is imm_21_27=0b1000110 & S5 & imm_13=0 & T5 & imm_5_7=0b010 & D5 {
        _stub();
    }
    :"cmpyiw03" is imm_21_27=0b1000111 & S5 & imm_13=0 & T5 & imm_5_7=0b010 & D5 {
        _stub();
    }
    :"cmpyiw04" is imm_21_27=0b1001000 & S5 & imm_13=0 & T5 & imm_5_7=0b100 & D5 {
        _stub();
    }
    :"cmpyiw05" is imm_21_27=0b1001001 & S5 & imm_13=0 & T5 & imm_5_7=0b000 & D5 {
        _stub();
    }
    :"cmpyiw06" is imm_21_27=0b1001010 & S5 & imm_13=0 & T5 & imm_5_7=0b000 & D5 {
        _stub();
    }
    :"cmpyiw07" is imm_21_27=0b1001011 & S5 & imm_13=0 & T5 & imm_5_7=0b000 & D5 {
        _stub();
    }
    :"cmpyiw08" is imm_21_27=0b1001100 & S5 & imm_13=0 & T5 & imm_5_7=0b100 & D5 {
        _stub();
    }
    :"cmpyiw09" is imm_21_27=0b1001101 & S5 & imm_13=0 & T5 & imm_5_7=0b000 & D5 {
        _stub();
    }
    :"cmpyiw10" is imm_21_27=0b1001110 & S5 & imm_13=0 & T5 & imm_5_7=0b000 & D5 {
        _stub();
    }
    :"cmpyiw11" is imm_21_27=0b1001111 & S5 & imm_13=0 & T5 & imm_5_7=0b000 & D5 {
        _stub();
    }
#ns
    :"cmpyiw12" is imm_21_27=0b1010010 & S5 & imm_13=0 & T5 & imm_5_7=0b110 & D5 {
        _stub();
    }
    :"cmpyiw13" is imm_21_27=0b1010011 & S5 & imm_13=0 & T5 & imm_5_7=0b010 & D5 {
        _stub();
    }
    :"cmpyiw14" is imm_21_27=0b1010100 & S5 & imm_13=0 & T5 & imm_5_7=0b010 & D5 {
        _stub();
    }
    :"cmpyiw15" is imm_21_27=0b1010110 & S5 & imm_13=0 & T5 & imm_5_7=0b010 & D5 {
        _stub();
    }
}


# XTYPE/Complex: vec mul complex real or i
with slot: iclass=0b1110 {
    :"vcmpyr" is imm_24_27=0b1000 & imm_23 & imm_21_22=0b01 & S5 & imm_13=0 & T5 & imm_5_7=0b110 & D5 {
        _stub();
    }
    :"vcmpyr1" is imm_24_27=0b1000 & imm_23 & imm_21_22=0b10 & S5 & imm_13=0 & T5 & imm_5_7=0b110 & D5 {
        _stub();
    }
    :"vcmpyr2" is imm_21_27=0b1010001 & S5 & imm_13=0 & T5 & imm_5_7=0b100 & D5 {
        _stub();
    }
    :"vcmpyr3" is imm_21_27=0b1010010 & S5 & imm_13=0 & T5 & imm_5_7=0b100 & D5 {
        _stub();
    }
}

# XTYPE/Complex: vec complex conj
with slot: iclass=0b1000 {
    :"vconj" is imm_21_27=0b0000100 & S5 & imm_8_13=0 & imm_5_7=0b111 & D5 {
        _stub();
    }
}

# XTYPE/Complex: vec complex rot
with slot: iclass=0b1100 {
    :"vcrotate" is imm_22_27=0b001111 & imm_21=0 & S5 & imm_8_13=0 & imm_6_7=0b00 & imm_5=0 & D5 {
        _stub();
    }
}

# XTYPE/Complex: vec reduce complex mul real or i - TODO: this isn't in v73 but is is v5??
with slot: iclass=0b1110 {
    :"vrcmpy0" is imm_21_27=0b1000000 & S5 & imm_13=0 & T5 & imm_5_7=0b000 & D5 {
        _stub();
    }
    :"vrcmpy1" is imm_21_27=0b1000000 & S5 & imm_13=0 & T5 & imm_5_7=0b001 & D5 {
        _stub();
    }
    :"vrcmpy2" is imm_21_27=0b1000010 & S5 & imm_13=0 & T5 & imm_5_7=0b000 & D5 {
        _stub();
    }
    :"vrcmpy3" is imm_21_27=0b1000011 & S5 & imm_13=0 & T5 & imm_5_7=0b001 & D5 {
        _stub();
    }


    :"vrcmpy4" is imm_21_27=0b1010000 & S5 & imm_13=0 & T5 & imm_5_7=0b000 & D5 {
        _stub();
    }
    :"vrcmpy5" is imm_21_27=0b1010000 & S5 & imm_13=0 & T5 & imm_5_7=0b001 & D5 {
        _stub();
    }
    :"vrcmpy6" is imm_21_27=0b1010010 & S5 & imm_13=0 & T5 & imm_5_7=0b000 & D5 {
        _stub();
    }
    :"vrcmpy7" is imm_21_27=0b1010011 & S5 & imm_13=0 & T5 & imm_5_7=0b001 & D5 {
        _stub();
    }
}



# XTYPE/Complex: vec reduce complex mul scalar
with slot: iclass=0b1110 {
    :"vrcmpys0" is imm_21_27=0b1000101 & S5 & imm_13=0 & T5 & imm_5_7=0b100 & D5 {
        _stub();
    }
    :"vrcmpys1" is imm_21_27=0b1000111 & S5 & imm_13=0 & T5 & imm_5_7=0b100 & D5 {
        _stub();
    }
    :"vrcmpys2" is imm_21_27=0b1010101 & S5 & imm_13=0 & T5 & imm_5_7=0b100 & D5 {
        _stub();
    }
    :"vrcmpys3" is imm_21_27=0b1010111 & S5 & imm_13=0 & T5 & imm_5_7=0b100 & D5 {
        _stub();
    }
}

# XTYPE/Complex: vec reduce complex mul scalar rnd pck
with slot: iclass=0b1110 {
    :"vrcmpys0" is imm_23_27=0b10011 & imm_22=0 & imm_21=1 & S5 & imm_13=0 & T5 & imm_5_7=0b110 & D5 {
        _stub();
    }
    :"vrcmpys1" is imm_23_27=0b10011 & imm_22=0 & imm_21=1 & S5 & imm_13=0 & T5 & imm_5_7=0b111 & D5 {
        _stub();
    }
}

# XTYPE/Complex: vec reduce complex rot
with slot: iclass=0b1100 {
    :"vrcrotate" is imm_22_27=0b001111 & imm_21=0 & S5 & imm_13 & T5 & imm_6_7=0b11 & imm_5 & D5 {
        _stub();
    }
    :"vrcrotate1" is imm_21_27=0b1011101 & S5 & imm_13 & T5 & imm_6_7=0 & imm_5 & D5 {
        _stub();
    }
}


# XTYPE/FP: fp add
with slot: iclass=0b1110 {
    :"dfadd" is imm_21_27=0b1000000 & S5 & imm_13=0 & T5 & imm_5_7=0b011 & D5 {
        _stub();
    }
    :"sfadd" is imm_21_27=0b1011000 & S5 & imm_13=0 & T5 & imm_5_7=0b000 & D5 {
        _stub();
    }
}

# XTYPE/FP: fp class
with slot: iclass=0b1000 {
    :"fpclass0" is imm_21_27=0b0101111 & S5 & imm_13=0 & imm_8_12 & imm_1_7=0 & D2 {
        _stub();
    }
}
with slot: iclass=0b1101 {
    :"fpclass1" is imm_21_27=0b1100100 & S5 & imm_13=0 & imm_10_12=0 & imm_5_9 & imm_3_4=0b10 & imm_2=0 & D2 {
        _stub();
    }
}

# XTYPE/FP: fp cmp
with slot: iclass=0b1100 {
    :"fpcmp00" is imm_21_27=0b0111111 & S5 & imm_13=0 & T5 & imm_5_7=0b000 & imm_2_4=0 & D2 {
        _stub();
    }
    :"fpcmp01" is imm_21_27=0b0111111 & S5 & imm_13=0 & T5 & imm_5_7=0b001 & imm_2_4=0 & D2 {
        _stub();
    }
    :"fpcmp02" is imm_21_27=0b0111111 & S5 & imm_13=0 & T5 & imm_5_7=0b011 & imm_2_4=0 & D2 {
        _stub();
    }
    :"fpcmp03" is imm_21_27=0b0111111 & S5 & imm_13=0 & T5 & imm_5_7=0b100 & imm_2_4=0 & D2 {
        _stub();
    }
}
with slot: iclass=0b1101 {
    :"fpcmp04" is imm_21_27=0b0010111 & S5 & imm_13=0 & T5 & imm_5_7=0b000 & imm_2_4=0 & D2 {
        _stub();
    }
    :"fpcmp05" is imm_21_27=0b0010111 & S5 & imm_13=0 & T5 & imm_5_7=0b001 & imm_2_4=0 & D2 {
        _stub();
    }
    :"fpcmp06" is imm_21_27=0b0010111 & S5 & imm_13=0 & T5 & imm_5_7=0b010 & imm_2_4=0 & D2 {
        _stub();
    }
    :"fpcmp07" is imm_21_27=0b0010111 & S5 & imm_13=0 & T5 & imm_5_7=0b011 & imm_2_4=0 & D2 {
        _stub();
    }
}

# XTYPE/FP: fp conv to other
define pcodeop convert_sf2df;
with slot: iclass=0b1000 {
    :D5_pair"=convert_sf2df("S5")" is imm_23_27=0b01001 & imm_21_22=0 & S5 & imm_8_13=0 & imm_5_7=0b000 & D5_pair {
        D5_pair = convert_sf2df(S5);
    }
    :D5"=convert_sf2df("S5_pair")" is imm_21_27=0b1000000 & S5_pair & imm_8_13=0 & imm_5_7=0b001 & D5 {
        D5 = convert_sf2df(S5_pair);
    }
}

# XTYPE/FP: conv int to fp
with slot: iclass=0b1000 {
    :"fpconvifp01" is imm_21_27=0b0000111 & S5 & imm_13=0 & imm_8_12=0  & imm_5_7=0b010 & D5 {
        _stub();
    }
    :"fpconvifp02" is imm_21_27=0b0000111 & S5 & imm_13=0 & imm_8_12=0  & imm_5_7=0b011 & D5 {
        _stub();
    }
    :"fpconvifp03" is imm_23_27=0b01001 & imm_21_22=0 & S5 & imm_13=0 & imm_8_12=0  & imm_5_7=0b001 & D5 {
        _stub();
    }
    :"fpconvifp04" is imm_23_27=0b01001 & imm_21_22=0 & S5 & imm_13=0 & imm_8_12=0  & imm_5_7=0b010 & D5 {
        _stub();
    }
    :"fpconvifp05" is imm_21_27=0b1000001 & S5 & imm_13=0 & imm_8_12=0  & imm_5_7=0b001 & D5 {
        _stub();
    }
    :"fpconvifp06" is imm_21_27=0b1000010 & S5 & imm_13=0 & imm_8_12=0  & imm_5_7=0b001 & D5 {
        _stub();
    }
    :"fpconvifp07" is imm_21_27=0b1011001 & S5 & imm_13=0 & imm_8_12=0  & imm_5_7=0b000 & D5 {
        _stub();
    }
    :"fpconvifp08" is imm_21_27=0b1011010 & S5 & imm_13=0 & imm_8_12=0  & imm_5_7=0b000 & D5 {
        _stub();
    }
}

# XTYPE/FP: conv fp val to int
with slot: iclass=0b1000 {
    :"=fpconvint00()" is imm_21_27=0b0000111 & S5 & imm_13=0 & imm_8_12=0 & imm_5_7=0b000 & D5 {
        _stub();
    }
    :"=fpconvint01()" is imm_21_27=0b0000111 & S5 & imm_13=0 & imm_8_12=0 & imm_5_7=0b001 & D5 {
        _stub();
    }
    :"=fpconvint02()" is imm_21_27=0b0000111 & S5 & imm_13=0 & imm_8_12=0 & imm_5_7=0b110 & D5 {
        _stub();
    }
    :"=fpconvint03()" is imm_21_27=0b0000111 & S5 & imm_13=0 & imm_8_12=0 & imm_5_7=0b111 & D5 {
        _stub();
    }

    :"=fpconvint04()" is imm_23_27=0b01001 & imm_21_22=0 & S5 & imm_13=0 & imm_8_12=0 & imm_5_7=0b011 & D5 {
        _stub();
    }
    :"=fpconvint05()" is imm_23_27=0b01001 & imm_21_22=0 & S5 & imm_13=0 & imm_8_12=0 & imm_5_7=0b100 & D5 {
        _stub();
    }
    :"=fpconvint06()" is imm_23_27=0b01001 & imm_21_22=0 & S5 & imm_13=0 & imm_8_12=0 & imm_5_7=0b101 & D5 {
        _stub();
    }
    :"=fpconvint07()" is imm_23_27=0b01001 & imm_21_22=0 & S5 & imm_13=0 & imm_8_12=0 & imm_5_7=0b110 & D5 {
        _stub();
    }

    :"=fpconvint08()" is imm_21_27=0b1000011 & S5 & imm_13=0 & imm_8_12=0 & imm_5_7=0b001 & D5 {
        _stub();
    }
    :"=fpconvint09()" is imm_21_27=0b1000100 & S5 & imm_13=0 & imm_8_12=0 & imm_5_7=0b001 & D5 {
        _stub();
    }
    :"=fpconvint10()" is imm_21_27=0b1000101 & S5 & imm_13=0 & imm_8_12=0 & imm_5_7=0b001 & D5 {
        _stub();
    }
    :"=fpconvint11()" is imm_21_27=0b1000111 & S5 & imm_13=0 & imm_8_12=0 & imm_5_7=0b001 & D5 {
        _stub();
    }

    :"=fpconvint12()" is imm_21_27=0b1011011 & S5 & imm_13=0 & imm_8_12=0 & imm_5_7=0b000 & D5 {
        _stub();
    }
    :"=fpconvint13()" is imm_21_27=0b1011011 & S5 & imm_13=0 & imm_8_12=0 & imm_5_7=0b001 & D5 {
        _stub();
    }
    :"=fpconvint14()" is imm_21_27=0b1011100 & S5 & imm_13=0 & imm_8_12=0 & imm_5_7=0b000 & D5 {
        _stub();
    }
    :"=fpconvint15()" is imm_21_27=0b1011100 & S5 & imm_13=0 & imm_8_12=0 & imm_5_7=0b001 & D5 {
        _stub();
    }
}

# XTYPE/FP: xtype fp extreame value
with slot: iclass=0b1000 {
    :"=fpext00" is imm_21_27=0b1011101 & S5 & imm_8_13=0 & imm_5_7=0b000 & D5 {
        _stub();
    }
}
with slot: iclass=0b1110 {
    :"=fpext01" is imm_21_27=0b1011110 & S5 & imm_13=0 & T5 & imm_5_7=0b000 & D5 {
        _stub();
    }
    :"=fpext02" is imm_21_27=0b1011110 & S5 & imm_13=0 & T5 & imm_5_7=0b001 & D5 {
        _stub();
    }
}

# XTYPE/FP: xtype fp fma
with slot: iclass=0b1110 {
    :"=fpfma00" is imm_21_27=0b1010000 & S5 & imm_13=0 & T5 & imm_5_7=0b011 & D5 {
        _stub();
    }
    :"=fpfma01" is imm_21_27=0b1010100 & S5 & imm_13=0 & T5 & imm_5_7=0b011 & D5 {
        _stub();
    }
    :"=fpfma02" is imm_21_27=0b1111000 & S5 & imm_13=0 & T5 & imm_5_7=0b100 & D5 {
        _stub();
    }
    :"=fpfma03" is imm_21_27=0b1111000 & S5 & imm_13=0 & T5 &  imm_5_7=0b101 & D5 {
        _stub();
    }
}

# XTYPE/FP: xtype fp fma scale
with slot: iclass=0b1110 {
    :"=fpfmas00" is imm_21_27=0b1111011 & S5 & imm_13=0 & T5 & imm_7=1 & imm_5_6 & D5 {
        _stub();
    }
}

# XTYPE/FP: xtype fp repic
with slot: iclass=0b1000 {
    :"=fprecip" is imm_21_27=0b1011111 & S5 & imm_8_13=0 & imm_7=0 & imm_5_6 & D5 {
        _stub();
    }
}

# XTYPE/FP: xtype fp fma lib
with slot: iclass=0b1110 {
    :"=fpfmalib00" is imm_21_27=0b1111000 & S5 & imm_13=0 & T5 & imm_5_7=0b110 & D5 {
        _stub();
    }
    :"=fpfmalib01" is imm_21_27=0b1111000 & S5 & imm_13=0 & T5 & imm_5_7=0b111 & D5 {
        _stub();
    }
}
# XTYPE/FP: xtype fp mk const
with slot: iclass=0b1101 {
    :"=sfmake00" is imm_22_27=0b011000 & imm_21 & imm_16_20 & imm_5_13 & D5 {
        _stub();
    }
    :"=sfmake01" is imm_22_27=0b011001 & imm_21 & imm_16_20 & imm_5_13 & D5 {
        _stub();
    }
    :"=sfmake02" is imm_22_27=0b100100 & imm_21 & imm_16_20 & imm_5_13 & D5 {
        _stub();
    }
    :"=sfmake03" is imm_22_27=0b100101 & imm_21 & imm_16_20 & imm_5_13 & D5 {
        _stub();
    }
}

# XTYPE/FP: fp max 
with slot: iclass=0b1110 {
    :"=sfmax1" is imm_21_27=0b1000001 & S5 & imm_13=0 & T5 & imm_5_7=0b011 & D5 {
        _stub();
    }
    :"=sfmax" is imm_21_27=0b1011100 & S5 & imm_13=0 & T5 & imm_5_7=0b000 & D5 {
        _stub();
    }
}

# XTYPE/FP: fp min
with slot: iclass=0b1110 {
    :"=sfmin1" is imm_21_27=0b1000110 & S5 & imm_13=0 & T5 & imm_5_7=0b011 & D5 {
        _stub();
    }
    :"=sfmin" is imm_21_27=0b1011100 & S5 & imm_13=0 & T5 & imm_5_7=0b001 & D5 {
        _stub();
    }
}

# XTYPE/FP: fp mul
with slot: iclass=0b1110 {
    :"=sfmul2" is imm_21_27=0b1000010 & S5 & imm_13=0 & T5 & imm_5_7=0b011 & D5 {
        _stub();
    }
    :"=sfmul1" is imm_21_27=0b1000101 & S5 & imm_13=0 & T5 & imm_5_7=0b011 & D5 {
        _stub();
    }
    :"=sfmul" is imm_21_27=0b1011010 & S5 & imm_13=0 & T5 & imm_5_7=0b000 & D5 {
        _stub();
    }
}

# XTYPE/FP: fp recip aprox
with slot: iclass=0b1110 {
    :"=sfrecipapx" is imm_21_27=0b1011111 & S5 & imm_13=0 & T5 & imm_7=1 & imm_5_6 & D5 {
        _stub();
    }
}

# XTYPE/FP: fp sub
with slot: iclass=0b1110 {
    :"=sfsub1" is imm_21_27=0b1000100 & S5 & imm_13=0 & T5 & imm_5_7=0b011 & D5 {
        _stub();
    }
    :"=sfsub" is imm_21_27=0b1011000 & S5 & imm_13=0 & T5 & imm_5_7=0b001 & D5 {
        _stub();
    }
}

# XTYPE/MPY
# XTYPE/MPY: Mul and use lower
with slot: iclass=0b1101 {
    :D5 "=add(" u6 ",mpyi(" S5 "," T5 "))" is imm_23_27=0b01110 & imm_21_22u & S5 & imm_13u & T5 & imm_5_7u & D5 [ u6 = imm_5_7u | (imm_13u << 3) | (imm_21_22u << 4);] {
    	local EA:4 = S5 * T5;
	D5 = u6 + EA;
    }

    :T5 "=add(" u6 ",mpyi(" S5 "," U6 "))" is imm_24_27=0b1000 & imm_23u & imm_21_22u & S5 & imm_13u & T5 & imm_5_7u & imm_0_4u [ u6 = imm_5_7u | (imm_13u << 3) | (imm_21_22u << 4); U6 = imm_0_4u | (imm_23u << 5); ] {
    	local EA:4 = U6 * T5;
	T5 = u6 + EA;
    }

    :T5"=add("D5",mpyi("u6","S5")" is imm_23_27=0b11110 & imm_21_22 & S5 & imm_13 & T5 & imm_5_7 & D5 [ u6 = (imm_5_7 | (imm_13 << 3) | (imm_21_22 << 4)) << 2; ] {
        local tmp:8 = u6;
        local tmp1:8 = sext(S5) * tmp;
        T5 = D5 + tmp1:4;
    }
    :T5 "=add(" D5 ", mpyi(" S5 ", " u6 "))" is imm_23_27=0b11111 & imm_21_22u & S5 & imm_13u & T5 & imm_5_7u & D5 [ u6 = imm_5_7u | (imm_13u << 3) | (imm_21_22u << 4); ] {
        local tmp1:8 = sext(S5) * u6;
	T5 = D5 + tmp1:4;
    }
}
with slot: iclass=0b1110 {
    :T5 "=add(" D5 ", mpyi(" T5_dup ", " S5 "))" is imm_21_27=0b0011000 & S5 & imm_13=0 & T5 & T5_dup & imm_5_7=0 & D5 {
        local tmp1:8 = sext(T5) * sext(S5);
	T5 = D5 + tmp1:4;
    }
    :"=+mpyi("S5","imm_5_12")" is imm_23_27=0b00000 & imm_21_22=0 & S5 & imm_13=0 & imm_5_12 & D5 {
        local tmp:8 = imm_5_12;
        local tmp1:8 = sext(S5) * tmp;
        S5 = tmp1:4; 
    }
    :"=-mpyi(S5,)" is imm_23_27=0b00001 & imm_21_22=0 & S5 & imm_13=0 & imm_5_12 & D5 {
    _stub();
    }

    :D5 "+=mpyi(" S5 "," imm_5_12u ")" is imm_23_27=0b00010 & imm_21_22=0 & S5 & imm_13=0 & imm_5_12u & D5 {
        local tmp0:8 = zext(S5);
        local tmp1:8 = imm_5_12u;
        local mul:8 = tmp0 * tmp1;
        D5 = D5 + mul:4;
    }
    :"-=mpyi(S5,)" is imm_23_27=0b00011 & imm_21_22=0 & S5 & imm_13=0 & imm_5_12 & D5 {
    _stub();
    }
    :D5"=mpyi("S5","T5")" is imm_21_27=0b1101000 & S5 & imm_13=0 & T5 & imm_5_7=0b000 & D5 {
        local tmp:8 = sext(S5)*sext(T5);
        local tmp2:8 = sext(D5) + tmp;
        D5 = tmp2:4;
    }
    :D5"+=mpyi("S5","T5")" is imm_21_27=0b1111000 & S5 & imm_13=0 & T5 & imm_5_7=0b000 & D5 {
        local tmp:8 = sext(S5)*sext(T5);
        local tmp2:8 = sext(D5) + tmp;
        D5 = tmp2:4;
    }
    :D5"-=mpyi("S5","T5")" is imm_21_27=0b1111100 & S5 & imm_13=0 & T5 & imm_5_7=0b000 & D5 {
        local tmp:8 = sext(S5)*sext(T5);
        local tmp2:8 = sext(D5) - tmp;
        D5 = tmp2:4;
    }
}
#with wslot: iclass64=0b1110 {
    #:"immext"D564"=+mpyi("S564","imm64_5_12")" is imm64_23_27=0b00000 & imm64_21_22=0 & S564 & imm64_13=0 & imm64_5_12 & D564 {
        ##local tmp:8 = imm_5_12;
        ##local tmp1:8 = sext(S5) * tmp;
        ##S5 = tmp1:4; 
	#_stub();
    #}
#}
# XTYPE/MPY: vec mul w by sign 32
with slot: iclass=0b1110 {
    :"vmpyweh00" is imm_24_27=0b1000 & imm_23 & imm_21_22=0b00 & S5 & imm_13=0 & T5 & imm_5_7=0b101 & D5 {
    _stub();
    }
    :"vmpyweh01" is imm_24_27=0b1000 & imm_23 & imm_21_22=0b00 & S5 & imm_13=0 & T5 & imm_5_7=0b111 & D5 {
    _stub();
    }
    :"vmpyweh02" is imm_24_27=0b1000 & imm_23 & imm_21_22=0b01 & S5 & imm_13=0 & T5 & imm_5_7=0b101 & D5 {
    _stub();
    }
    :"vmpyweh03" is imm_24_27=0b1000 & imm_23 & imm_21_22=0b01 & S5 & imm_13=0 & T5 & imm_5_7=0b111 & D5 {
    _stub();
    }

    :"vmpyweh04" is imm_24_27=0b1010 & imm_23 & imm_21_22=0b00 & S5 & imm_13=0 & T5 & imm_5_7=0b101 & D5 {
    _stub();
    }
    :"vmpyweh05" is imm_24_27=0b1010 & imm_23 & imm_21_22=0b00 & S5 & imm_13=0 & T5 & imm_5_7=0b111 & D5 {
    _stub();
    }
    :"vmpyweh06" is imm_24_27=0b1010 & imm_23 & imm_21_22=0b01 & S5 & imm_13=0 & T5 & imm_5_7=0b101 & D5 {
    _stub();
    }
    :"vmpyweh07" is imm_24_27=0b1010 & imm_23 & imm_21_22=0b01 & S5 & imm_13=0 & T5 & imm_5_7=0b111 & D5 {
    _stub();
    }
}

# XTYPE/MPY: Mul by unsign 32
with slot: iclass=0b1110 {
    :"vmpyweuh00" is imm_24_27=0b1000 & imm_23 & imm_21_22=0b10 & S5 & imm_13=0 & T5 & imm_5_7=0b101 & D5 {
    _stub();
    }
    :"vmpyweuh01" is imm_24_27=0b1000 & imm_23 & imm_21_22=0b10 & S5 & imm_13=0 & T5 & imm_5_7=0b111 & D5 {
    _stub();
    }
    :"vmpyweuh02" is imm_24_27=0b1000 & imm_23 & imm_21_22=0b11 & S5 & imm_13=0 & T5 & imm_5_7=0b101 & D5 {
    _stub();
    }
    :"vmpyweuh03" is imm_24_27=0b1000 & imm_23 & imm_21_22=0b11 & S5 & imm_13=0 & T5 & imm_5_7=0b111 & D5 {
    _stub();
    }

    :"vmpyweuh04" is imm_24_27=0b1010 & imm_23 & imm_21_22=0b10 & S5 & imm_13=0 & T5 & imm_5_7=0b101 & D5 {
    _stub();
    }
    :"vmpyweuh05" is imm_24_27=0b1010 & imm_23 & imm_21_22=0b10 & S5 & imm_13=0 & T5 & imm_5_7=0b111 & D5 {
    _stub();
    }
    :"vmpyweuh06" is imm_24_27=0b1010 & imm_23 & imm_21_22=0b11 & S5 & imm_13=0 & T5 & imm_5_7=0b101 & D5 {
    _stub();
    }
    :"vmpyweuh07" is imm_24_27=0b1010 & imm_23 & imm_21_22=0b11 & S5 & imm_13=0 & T5 & imm_5_7=0b111 & D5 {
    _stub();
    }
}

# XTYPE/MPY: Mul signed hw
with slot: iclass=0b1110 {
    :"mulshw00" is imm_24_27=0b0100 & imm_23 & imm_21_22=0b00 & S5 & imm_13=0 & T5 & imm_7=0 & imm_5_6=0b00 & D5 {
    _stub();
    }
    :"mulshw01" is imm_24_27=0b0100 & imm_23 & imm_21_22=0b00 & S5 & imm_13=0 & T5 & imm_7=0 & imm_5_6=0b01 & D5 {
    _stub();
    }
    :"mulshw02" is imm_24_27=0b0100 & imm_23 & imm_21_22=0b00 & S5 & imm_13=0 & T5 & imm_7=0 & imm_5_6=0b10 & D5 {
    _stub();
    }
    :"mulshw03" is imm_24_27=0b0100 & imm_23 & imm_21_22=0b00 & S5 & imm_13=0 & T5 & imm_7=0 & imm_5_6=0b11 & D5 {
    _stub();
    }

    :"mulshw04" is imm_24_27=0b0100 & imm_23 & imm_21_22=0b01 & S5 & imm_13=0 & T5 & imm_7=0 & imm_5_6=0b00 & D5 {
    _stub();
    }
    :"mulshw05" is imm_24_27=0b0100 & imm_23 & imm_21_22=0b01 & S5 & imm_13=0 & T5 & imm_7=0 & imm_5_6=0b01 & D5 {
    _stub();
    }
    :"mulshw06" is imm_24_27=0b0100 & imm_23 & imm_21_22=0b01 & S5 & imm_13=0 & T5 & imm_7=0 & imm_5_6=0b10 & D5 {
    _stub();
    }
    :"mulshw07" is imm_24_27=0b0100 & imm_23 & imm_21_22=0b01 & S5 & imm_13=0 & T5 & imm_7=0 & imm_5_6=0b11 & D5 {
    _stub();
    }
#np
    :"mulshw08" is imm_24_27=0b0110 & imm_23 & imm_21_22=0b00 & S5 & imm_13=0 & T5 & imm_5_7=0b000 & D5 {
    _stub();
    }
    :"mulshw09" is imm_24_27=0b0110 & imm_23 & imm_21_22=0b00 & S5 & imm_13=0 & T5 & imm_5_7=0b001 & D5 {
    _stub();
    }
    :"mulshw10" is imm_24_27=0b0110 & imm_23 & imm_21_22=0b00 & S5 & imm_13=0 & T5 & imm_5_7=0b010 & D5 {
    _stub();
    }
    :"mulshw11" is imm_24_27=0b0110 & imm_23 & imm_21_22=0b00 & S5 & imm_13=0 & T5 & imm_5_7=0b011 & D5 {
    _stub();
    }

    :"mulshw12" is imm_24_27=0b0110 & imm_23 & imm_21_22=0b01 & S5 & imm_13=0 & T5 & imm_5_7=0b000 & D5 {
    _stub();
    }:
    :"mulshw13" is imm_24_27=0b0110 & imm_23 & imm_21_22=0b01 & S5 & imm_13=0 & T5 & imm_5_7=0b001 & D5 {
    _stub();
    }
    :"mulshw14" is imm_24_27=0b0110 & imm_23 & imm_21_22=0b01 & S5 & imm_13=0 & T5 & imm_5_7=0b010 & D5 {
    _stub();
    }
    :"mulshw15" is imm_24_27=0b0110 & imm_23 & imm_21_22=0b01 & S5 & imm_13=0 & T5 & imm_5_7=0b011 & D5 {
    _stub();
    }
#ns
    :"mulshw16" is imm_24_27=0b1100 & imm_23 & imm_21_22=0b00 & S5 & imm_13=0 & T5 & imm_5_7=0b000 & D5 {
    _stub();
    }
    :"mulshw17" is imm_24_27=0b1100 & imm_23 & imm_21_22=0b00 & S5 & imm_13=0 & T5 & imm_5_7=0b001 & D5 {
    _stub();
    }
    :"mulshw18" is imm_24_27=0b1100 & imm_23 & imm_21_22=0b00 & S5 & imm_13=0 & T5 & imm_5_7=0b010 & D5 {
    _stub();
    }
    :"mulshw19" is imm_24_27=0b1100 & imm_23 & imm_21_22=0b00 & S5 & imm_13=0 & T5 & imm_5_7=0b011 & D5 {
    _stub();
    }
    :"mulshw20" is imm_24_27=0b1100 & imm_23 & imm_21_22=0b00 & S5 & imm_13=0 & T5 & imm_5_7=0b100 & D5 {
    _stub();
    }
    :"mulshw21" is imm_24_27=0b1100 & imm_23 & imm_21_22=0b00 & S5 & imm_13=0 & T5 & imm_5_7=0b101 & D5 {
    _stub();
    }
    :"mulshw22" is imm_24_27=0b1100 & imm_23 & imm_21_22=0b00 & S5 & imm_13=0 & T5 & imm_5_7=0b110 & D5 {
    _stub();
    }
    :"mulshw23" is imm_24_27=0b1100 & imm_23 & imm_21_22=0b00 & S5 & imm_13=0 & T5 & imm_5_7=0b111 & D5 {
    _stub();
    }

    :"mulshw24" is imm_24_27=0b1100 & imm_23 & imm_21_22=0b01 & S5 & imm_13=0 & T5 & imm_5_7=0b000 & D5 {
    _stub();
    }
    :"mulshw25" is imm_24_27=0b1100 & imm_23 & imm_21_22=0b01 & S5 & imm_13=0 & T5 & imm_5_7=0b001 & D5 {
    _stub();
    }
    :"mulshw26" is imm_24_27=0b1100 & imm_23 & imm_21_22=0b01 & S5 & imm_13=0 & T5 & imm_5_7=0b010 & D5 {
    _stub();
    }
    :"mulshw27" is imm_24_27=0b1100 & imm_23 & imm_21_22=0b01 & S5 & imm_13=0 & T5 & imm_5_7=0b011 & D5 {
    _stub();
    }
    :"mulshw28" is imm_24_27=0b1100 & imm_23 & imm_21_22=0b01 & S5 & imm_13=0 & T5 & imm_5_7=0b100 & D5 {
    _stub();
    }
    :"mulshw29" is imm_24_27=0b1100 & imm_23 & imm_21_22=0b01 & S5 & imm_13=0 & T5 & imm_5_7=0b101 & D5 {
    _stub();
    }
    :"mulshw30" is imm_24_27=0b1100 & imm_23 & imm_21_22=0b01 & S5 & imm_13=0 & T5 & imm_5_7=0b110 & D5 {
    _stub();
    }
    :"mulshw31" is imm_24_27=0b1100 & imm_23 & imm_21_22=0b01 & S5 & imm_13=0 & T5 & imm_5_7=0b111 & D5 {
    _stub();
    }

    :"mulshw32" is imm_24_27=0b1110 & imm_23 & imm_21_22=0b00 & S5 & imm_13=0 & T5 & imm_5_7=0b000 & D5 {
    _stub();
    }
    :"mulshw33" is imm_24_27=0b1110 & imm_23 & imm_21_22=0b00 & S5 & imm_13=0 & T5 & imm_5_7=0b001 & D5 {
    _stub();
    }
    :"mulshw34" is imm_24_27=0b1110 & imm_23 & imm_21_22=0b00 & S5 & imm_13=0 & T5 & imm_5_7=0b010 & D5 {
    _stub();
    }
    :"mulshw35" is imm_24_27=0b1110 & imm_23 & imm_21_22=0b00 & S5 & imm_13=0 & T5 & imm_5_7=0b011 & D5 {
    _stub();
    }
    :"mulshw36" is imm_24_27=0b1110 & imm_23 & imm_21_22=0b00 & S5 & imm_13=0 & T5 & imm_5_7=0b100 & D5 {
    _stub();
    }
    :"mulshw37" is imm_24_27=0b1110 & imm_23 & imm_21_22=0b00 & S5 & imm_13=0 & T5 & imm_5_7=0b101 & D5 {
    _stub();
    }
    :"mulshw38" is imm_24_27=0b1110 & imm_23 & imm_21_22=0b00 & S5 & imm_13=0 & T5 & imm_5_7=0b110 & D5 {
    _stub();
    }
    :"mulshw39" is imm_24_27=0b1110 & imm_23 & imm_21_22=0b00 & S5 & imm_13=0 & T5 & imm_5_7=0b111 & D5 {
    _stub();
    }
    :"mulshw40" is imm_24_27=0b1110 & imm_23 & imm_21_22=0b01 & S5 & imm_13=0 & T5 & imm_5_7=0b000 & D5 {
    _stub();
    }
    :"mulshw41" is imm_24_27=0b1110 & imm_23 & imm_21_22=0b01 & S5 & imm_13=0 & T5 & imm_5_7=0b001 & D5 {
    _stub();
    }
    :"mulshw42" is imm_24_27=0b1110 & imm_23 & imm_21_22=0b01 & S5 & imm_13=0 & T5 & imm_5_7=0b010 & D5 {
    _stub();
    }
    :"mulshw43" is imm_24_27=0b1110 & imm_23 & imm_21_22=0b01 & S5 & imm_13=0 & T5 & imm_5_7=0b011 & D5 {
    _stub();
    }
    :"mulshw44" is imm_24_27=0b1110 & imm_23 & imm_21_22=0b01 & S5 & imm_13=0 & T5 & imm_5_7=0b100 & D5 {
    _stub();
    }
    :"mulshw45" is imm_24_27=0b1110 & imm_23 & imm_21_22=0b01 & S5 & imm_13=0 & T5 & imm_5_7=0b101 & D5 {
    _stub();
    }
    :"mulshw46" is imm_24_27=0b1110 & imm_23 & imm_21_22=0b01 & S5 & imm_13=0 & T5 & imm_5_7=0b110 & D5 {
    _stub();
    }
    :"mulshw47" is imm_24_27=0b1110 & imm_23 & imm_21_22=0b01 & S5 & imm_13=0 & T5 & imm_5_7=0b111 & D5 {
    _stub();
    }
}

# XTYPE/MPY: Mul usigned hw
with slot: iclass=0b1110 {
    :"mulushw00" is imm_24_27=0b0100 & imm_23 & imm_21_22=0b10 & S5 & imm_13=0 & T5 & imm_7=0 & imm_5_6=0b00 & D5 {
    _stub();
    }
    :"mulushw01" is imm_24_27=0b0100 & imm_23 & imm_21_22=0b10 & S5 & imm_13=0 & T5 & imm_7=0 & imm_5_6=0b01 & D5 {
    _stub();
    }
    :"mulushw02" is imm_24_27=0b0100 & imm_23 & imm_21_22=0b10 & S5 & imm_13=0 & T5 & imm_7=0 & imm_5_6=0b10 & D5 {
    _stub();
    }
    :"mulushw03" is imm_24_27=0b0100 & imm_23 & imm_21_22=0b10 & S5 & imm_13=0 & T5 & imm_7=0 & imm_5_6=0b11 & D5 {
    _stub();
    }

    :"mulushw04" is imm_24_27=0b0110 & imm_23 & imm_21_22=0b10 & S5 & imm_13=0 & T5 & imm_5_7=0b000 & D5 {
    _stub();
    }
    :"mulushw05" is imm_24_27=0b0110 & imm_23 & imm_21_22=0b10 & S5 & imm_13=0 & T5 & imm_5_7=0b001 & D5 {
    _stub();
    }
    :"mulushw06" is imm_24_27=0b0110 & imm_23 & imm_21_22=0b10 & S5 & imm_13=0 & T5 & imm_5_7=0b010 & D5 {
    _stub();
    }
    :"mulushw07" is imm_24_27=0b0110 & imm_23 & imm_21_22=0b10 & S5 & imm_13=0 & T5 & imm_5_7=0b011 & D5 {
    _stub();
    }
    :"mulushw08" is imm_24_27=0b0110 & imm_23 & imm_21_22=0b11 & S5 & imm_13=0 & T5 & imm_5_7=0b000 & D5 {
    _stub();
    }
    :"mulushw09" is imm_24_27=0b0110 & imm_23 & imm_21_22=0b11 & S5 & imm_13=0 & T5 & imm_5_7=0b001 & D5 {
    _stub();
    }
    :"mulushw10" is imm_24_27=0b0110 & imm_23 & imm_21_22=0b11 & S5 & imm_13=0 & T5 & imm_5_7=0b010 & D5 {
    _stub();
    }
    :"mulushw11" is imm_24_27=0b0110 & imm_23 & imm_21_22=0b11 & S5 & imm_13=0 & T5 & imm_5_7=0b011 & D5 {
    _stub();
    }

    :"mulushw12" is imm_24_27=0b1100 & imm_23 & imm_21_22=0b10 & S5 & imm_13=0 & T5 & imm_5_7=0b000 & D5 {
    _stub();
    }
    :"mulushw13" is imm_24_27=0b1100 & imm_23 & imm_21_22=0b10 & S5 & imm_13=0 & T5 & imm_5_7=0b001 & D5 {
    _stub();
    }
    :"mulushw14" is imm_24_27=0b1100 & imm_23 & imm_21_22=0b10 & S5 & imm_13=0 & T5 & imm_5_7=0b010 & D5 {
    _stub();
    }
    :"mulushw15" is imm_24_27=0b1100 & imm_23 & imm_21_22=0b10 & S5 & imm_13=0 & T5 & imm_5_7=0b011 & D5 {
    _stub();
    }
    
    :"mulushw16" is imm_24_27=0b1110 & imm_23 & imm_21_22=0b10 & S5 & imm_13=0 & T5 & imm_5_7=0b000 & D5 {
    _stub();
    }
    :"mulushw17" is imm_24_27=0b1110 & imm_23 & imm_21_22=0b10 & S5 & imm_13=0 & T5 & imm_5_7=0b001 & D5 {
    _stub();
    }
    :"mulushw18" is imm_24_27=0b1110 & imm_23 & imm_21_22=0b10 & S5 & imm_13=0 & T5 & imm_5_7=0b010 & D5 {
    _stub();
    }
    :"mulushw19" is imm_24_27=0b1110 & imm_23 & imm_21_22=0b10 & S5 & imm_13=0 & T5 & imm_5_7=0b011 & D5 {
    _stub();
    }
    :"mulushw20" is imm_24_27=0b1110 & imm_23 & imm_21_22=0b11 & S5 & imm_13=0 & T5 & imm_5_7=0b000 & D5 {
    _stub();
    }
    :"mulushw21" is imm_24_27=0b1110 & imm_23 & imm_21_22=0b11 & S5 & imm_13=0 & T5 & imm_5_7=0b001 & D5 {
    _stub();
    }
    :"mulushw22" is imm_24_27=0b1110 & imm_23 & imm_21_22=0b11 & S5 & imm_13=0 & T5 & imm_5_7=0b010 & D5 {
    _stub();
    }
    :"mulushw23" is imm_24_27=0b1110 & imm_23 & imm_21_22=0b11 & S5 & imm_13=0 & T5 & imm_5_7=0b011 & D5 {
    _stub();
    }
}

# XTYPE/MPY: Poly mul w
define pcodeop pmpyw;
with slot: iclass=0b1110 {
    :D5_pair "=pmpyw(" S5 "," T5 ")" is imm_21_27=0b0101010 & S5 & imm_13=0 & T5 & imm_5_7=0b111 & D5_pair {
    	D5_pair = pmpyw(S5, T5);
    }
    :"^pmpyw" is imm_21_27=0b0111001 & S5 & imm_13=0 & T5 & imm_5_7=0b111 & D5 {
    _stub();
    }
}

# XTYPE/MPY: Vec red mul wa by s hw
with slot: iclass=0b1110 {
    :"vrmpywoh" is imm_24_27=0b1000 & imm_21 & imm_21_22=0b01 & S5 & imm_13=0 & T5 & imm_5_7=0b010 & D5 {
    _stub();
    }
    :"vrmpyweh" is imm_24_27=0b1000 & imm_21 & imm_21_22=0b10 & S5 & imm_13=0 & T5 & imm_5_7=0b100 & D5 {
    _stub();
    }

    :"+vrmpyweh" is imm_24_27=0b1010 & imm_21 & imm_21_22=0b01 & S5 & imm_13=0 & T5 & imm_5_7=0b110 & D5 {
    _stub();
    }
    :"+vrmpywoh" is imm_24_27=0b1010 & imm_21 & imm_21_22=0b11 & S5 & imm_13=0 & T5 & imm_5_7=0b110 & D5 {
    _stub();
    }
}

# XTYPE/MPY: Mul and use upper
with slot: iclass=0b1110 {
    :"mpy0" is imm_21_27=0b1101001 & S5 & imm_13=0 & T5 & imm_5_7=0b001 & D5 {
       _stub();
    }
    :D5 = "mpyu(" S5 "," T5 ")" is imm_21_27=0b1101010 & S5 & imm_13=0 & T5 & imm_5_7=0b001 & D5 {
    	local tmp1:8 = sext(S5) * sext(T5);
	D5 = tmp1(4);
    }
    :"mpy2" is imm_21_27=0b1101011 & S5 & imm_13=0 & T5 & imm_5_7=0b001 & D5 {
       _stub();
    }
    :"mpy3" is imm_21_27=0b1101101 & S5 & imm_13=0 & T5 & imm_5_7=0b000 & D5 {
       _stub();
    }
    :"mpy4" is imm_21_27=0b1101101 & S5 & imm_13=0 & T5 & imm_5_7=0b001 & D5 {
       _stub();
    }
    :"mpy5" is imm_21_27=0b1101101 & S5 & imm_13=0 & T5 & imm_5_7=0b100 & D5 {
       _stub();
    }
    :"mpy6" is imm_21_27=0b1101111 & S5 & imm_13=0 & T5 & imm_5_7=0b000 & D5 {
       _stub();
    }
    :"mpy7" is imm_21_27=0b1101111 & S5 & imm_13=0 & T5 & imm_5_7=0b100 & D5 {
       _stub();
    }
    :"mpy8" is imm_24_27=0b1101 & imm_23 & imm_22=0 & imm_21 & S5 & imm_13=0 & T5 & imm_7=0 & imm_5_6 & D5 {
       _stub();
    }

    :"mpy9" is imm_21_27=0b1111011 & S5 & imm_13=0 & T5 & imm_5_7=0b000 & D5 {
       _stub();
    }
    :"mpy10" is imm_21_27=0b1111011 & S5 & imm_13=0 & T5 & imm_5_7=0b001 & D5 {
       _stub();
    }
}

# XTYPE/MPY: Mul and use full
with slot: iclass=0b1110 {
    :D5_pair"=mpy("S5","T5")" is imm_21_27=0b0101000 & S5 & imm_13=0 & T5 & imm_5_7=0b000 & D5_pair {
        local tmp:8 = sext(S5)*sext(T5);
        D5_pair = tmp;
    }
    :D5_pair"=mpyu("S5","T5")" is imm_21_27=0b0101010 & S5 & imm_13=0 & T5 & imm_5_7=0b000 & D5_pair {
        local tmp:8 = zext(S5)*zext(T5);
        D5_pair = tmp;
    }

    :"+=mpy" is imm_21_27=0b0111000 & S5 & imm_13=0 & T5 & imm_5_7=0b000 & D5 {
       _stub();
    }
    :"-=mpy" is imm_21_27=0b0111001 & S5 & imm_13=0 & T5 & imm_5_7=0b000 & D5 {
       _stub();
    }
    :D5_pair "+=mpyu(" S5 "," T5 ")" is imm_21_27=0b0111010 & S5 & imm_13=0 & T5 & imm_5_7=0b000 & D5_pair {
    	local A:8 = sext(S5);
    	local B:8 = sext(T5);

    	D5_pair = D5_pair + (A * B);
    }
    :"mpy14" is imm_21_27=0b0111011 & S5 & imm_13=0 & T5 & imm_5_7=0b000 & D5 {
       _stub();
    }
}

# XTYPE/MPY: Vec dual mul
with slot: iclass=0b1110 {
    :"vecdualmu" is imm_24_27=0b1000 & imm_23 & imm_21_22=0b00 & S5 & imm_13=0 & T5 & imm_5_7=0b100 & D5 {
       _stub();
    }
    :"vecdualmu1" is imm_24_27=0b1010 & imm_23 & imm_21_22=0b00 & S5 & imm_13=0 & T5 & imm_5_7=0b100 & D5 {
       _stub();
    }
}

# XTYPE/MPY: Vec dual mul w round and pck
with slot: iclass=0b1110 {
    :"vecdualmupck" is imm_24_27=0b1001 & imm_23 & imm_21_22=0 & S5 & imm_13=0 & T5 & imm_7=0 & imm_5_6=0b00 & D5 {
       _stub();
    }
}

# XTYPE/MPY: Vec red mulp by
with slot: iclass=0b1110 {
    :"vecredmulpby00" is imm_21_27=0b1000100 & S5 & imm_13=0 & T5 & imm_5_7=0b000 & D5 {
       _stub();
    }
    :"vecredmulpby01" is imm_21_27=0b1000110 & S5 & imm_13=0 & T5 & imm_5_7=0b000 & D5 {
       _stub();
    }

    :"vecredmulpby02" is imm_21_27=0b1010100 & S5 & imm_13=0 & T5 & imm_5_7=0b000 & D5 {
       _stub();
    }
    :"vecredmulpby03" is imm_21_27=0b1010110 & S5 & imm_13=0 & T5 & imm_5_7=0b000 & D5 {
       _stub();
    }
}

# XTYPE/MPY: Vec mul s by us
with slot: iclass=0b1110 {
    :"vecmulsbyus" is imm_21_27=0b1000101 & S5 & imm_13=0 & T5 & imm_5_7=0b001 & D5 {
       _stub();
    }
    :"vecmulsbyu1s" is imm_21_27=0b1010001 & S5 & imm_13=0 & T5 & imm_5_7=0b001 & D5 {
       _stub();
    }
}

# XTYPE/MPY: Vec mul even hw
with slot: iclass=0b1110 {
    :"vecmulevenhw" is imm_24_27=0b1000 & imm_23 & imm_21_22=0b00 & S5 & imm_13=0 & T5 & imm_5_7=0b110 & D5 {
       _stub();
    }

    :"vecmuleven01" is imm_21_27=0b1010001 & S5 & imm_13=0 & T5 & imm_5_7=0b010 & D5 {
       _stub();
    }
    :"vecmulevenhw02" is imm_24_27=0b1010 & imm_23 & imm_21_22=0b00 & S5 & imm_13=0 & T5 & imm_5_7=0b110 & D5 {
       _stub();
    }
}

# XTYPE/MPY: Vec mul hw
with slot: iclass=0b1110 {
    :"vecmulhw" is imm_24_27=0b0101 & imm_23 & imm_21_22=0b00 & S5 & imm_13=0 & T5 & imm_5_7=0b101 & D5 {
       _stub();
    }

    :"vecmul01" is imm_21_27=0b0111001 & S5 & imm_13=0 & T5 & imm_5_7=0b001 & D5 {
       _stub();
    }
    :"vecmulhw02" is imm_24_27=0b0111 & imm_23 & imm_21_22=0b00 & S5 & imm_13=0 & T5 & imm_5_7=0b101 & D5 {
       _stub();
    }
}

# XTYPE/MPY: Vec mul hw rnd and pck
with slot: iclass=0b1110 {
    :"vecmulhwrndpck" is imm_24_27=0b1101 & imm_23 & imm_21_22=0b01 & S5 & imm_13=0 & T5 & imm_5_7=0b111 & D5 {
       _stub();
    }
}

# XTYPE/MPY: Vec mul hw s by us
with slot: iclass=0b1110 {
    :"vecmulhwsbyus0" is imm_24_27=0b0101 & imm_23 & imm_21_22=0b00 & S5 & imm_13=0 & T5 & imm_5_7=0b111 & D5 {
       _stub();
    }
    :"vecmulhwsbyus1" is imm_24_27=0b0111 & imm_23 & imm_21_22=0b11 & S5 & imm_13=0 & T5 & imm_5_7=0b101 & D5 {
       _stub();
    }
}

# XTYPE/MPY: Vec red mul hw
with slot: iclass=0b1110 {
    :"vecredmulhw" is imm_21_27=0b1000000 & S5 & imm_13=0 & T5 & imm_5_7=0b010 & D5 {
       _stub();
    }
    :"vecredmulhw1" is imm_21_27=0b1010000 & S5 & imm_13=0 & T5 & imm_5_7=0b010 & D5 {
       _stub();
    }
}

# XTYPE/MPY: Vec mul by
with slot: iclass=0b1110 {
    :"vecredmulby0" is imm_21_27=0b0101010 & S5 & imm_13=0 & T5 & imm_5_7=0b001 & D5 {
       _stub();
    }
    :"vecredmulby1" is imm_21_27=0b0101100 & S5 & imm_13=0 & T5 & imm_5_7=0b001 & D5 {
       _stub();
    }
    :"vecredmulby2" is imm_21_27=0b0111100 & S5 & imm_13=0 & T5 & imm_5_7=0b001 & D5 {
       _stub();
    }
    :"vecredmulby3" is imm_21_27=0b0111110 & S5 & imm_13=0 & T5 & imm_5_7=0b001 & D5 {
       _stub();
    }
}

# XTYPE/MPY: Vec poly mul hw
with slot: iclass=0b1110 {
    :"vecpolymulhw0" is imm_21_27=0b0101110 & S5 & imm_13=0 & T5 & imm_5_7=0b111 & D5 {
       _stub();
    }
    :"vecpolymulhw1" is imm_21_27=0b0111101 & S5 & imm_13=0 & T5 & imm_5_7=0b111 & D5 {
       _stub();
    }
}

# XTYPE/PERM
# XTYPE/PERM:CABAC
with slot: iclass=0b1100 {
    :"decbin" is imm_22_27=0b000111 & imm_21=0 & S5 & imm_13=0 & T5 & imm_6_7=0b11 & imm_5=0 & D5 {
       _stub();
    }
}

# XTYPE/PERM:sat
with slot: iclass=0b1000 {
    :"sat00" is imm_21_27=0b1000110 & S5 & imm_8_13 & imm_5_7=0b000 & D5 {
       _stub();
    }
    :"sat01" is imm_21_27=0b1000110 & S5 & imm_8_13 & imm_5_7=0b100 & D5 {
       _stub();
    }
    :"sat02" is imm_21_27=0b1000110 & S5 & imm_8_13 & imm_5_7=0b101 & D5 {
       _stub();
    }
    :"sat03" is imm_21_27=0b1000110 & S5 & imm_8_13 & imm_5_7=0b110 & D5 {
       _stub();
    }
    :"sat04" is imm_21_27=0b1000110 & S5 & imm_8_13 & imm_5_7=0b111 & D5 {
       _stub();
    }
}

# XTYPE/PERM:swz
with slot: iclass=0b1000 {
    :"swz" is imm_21_27=0b1100100 & S5 & imm_8_13 & imm_5_7=0b111 & D5 {
       _stub();
    }
}

# XTYPE/PERM:vec align
with slot: iclass=0b1100 {
    :"valign" is imm_23_27=0b00000 & imm_21_22=0 & S5 & imm_13=0 & T5 & imm_5_7 & D5 {
       _stub();
    }
    :"valign1" is imm_23_27=0b00100 & imm_21_22=0 & S5 & imm_13=0 & T5 & imm_7=0 & imm_5_6 & D5 {
       _stub();
    }
}

# XTYPE/PERM:vec rnd pck
with slot: iclass=0b1000 {
    :"vrndwh" is imm_21_27=0b1000100 & S5 & imm_8_13=0 & imm_5_7=0b100 & D5 {
       _stub();
    }
    :"vrndwhsat" is imm_21_27=0b1000100 & S5 & imm_8_13=0 & imm_5_7=0b110 & D5 {
       _stub();
    }
}

# XTYPE/PERM:vec sat pck
with slot: iclass=0b1000 {
    :"vsathub00" is imm_21_27=0b1000000 & S5 & imm_8_13=0 & imm_5_7=0b000 & D5 {
       _stub();
    }
    :"vsathub01" is imm_21_27=0b1000000 & S5 & imm_8_13=0 & imm_5_7=0b010 & D5 {
       _stub();
    }
    :"vsathub02" is imm_21_27=0b1000000 & S5 & imm_8_13=0 & imm_5_7=0b100 & D5 {
       _stub();
    }
    :"vsathub03" is imm_21_27=0b1000000 & S5 & imm_8_13=0 & imm_5_7=0b110 & D5 {
       _stub();
    }
    :"vsathub04" is imm_22_27=0b110010 & imm_21=0 & S5 & imm_8_13=0 & imm_6_7=0b00 & imm_5=0 & D5 {
       _stub();
    }
    :"vsathub05" is imm_22_27=0b110010 & imm_21=0 & S5 & imm_8_13=0 & imm_6_7=0b01 & imm_5=0 & D5 {
       _stub();
    }
}

# XTYPE/PERM:vec sat no pck
with slot: iclass=0b1000 {
    :"vsathub100" is imm_21_27=0b0000000 & S5 & imm_8_13=0 & imm_5_7=0b100 & D5 {
       _stub();
    }
    :"vsathub101" is imm_21_27=0b0000000 & S5 & imm_8_13=0 & imm_5_7=0b101 & D5 {
       _stub();
    }
    :"vsathub102" is imm_21_27=0b0000000 & S5 & imm_8_13=0 & imm_5_7=0b110 & D5 {
       _stub();
    }
    :"vsathub103" is imm_21_27=0b0000000 & S5 & imm_8_13=0 & imm_5_7=0b111 & D5 {
       _stub();
    }
}

# XTYPE/PERM:vec shuf
with slot: iclass=0b1100 {
    :"shuffeb00" is imm_22_27=0b000100 & imm_21=0 & S5 & imm_13=0 & T5 & imm_6_7=0b01 & imm_5=0 & D5 {
       _stub();
    }
    :"shuffeb01" is imm_22_27=0b000100 & imm_21=0 & S5 & imm_13=0 & T5 & imm_6_7=0b10 & imm_5=0 & D5 {
       _stub();
    }
    :"shuffeb02" is imm_22_27=0b000100 & imm_21=0 & S5 & imm_13=0 & T5 & imm_6_7=0b11 & imm_5=0 & D5 {
       _stub();
    }
    :"shuffeb03" is imm_22_27=0b000110 & imm_21=0 & S5 & imm_13=0 & T5 & imm_5_7=0b000 & D5 {
       _stub();
    }
}

# XTYPE/PERM:vec splat by
with slot: iclass=0b1000 {
    :"vsplat00" is imm_22_27=0b010001 & imm_21=0 & S5 & imm_8_13=0 & imm_6_7=0b10 & imm_5=0 & D5 {
       _stub();
    }
    :"vsplat01" is imm_21_27=0b0100010 & S5 & imm_8_13=0 & imm_5_7=0b111 & D5 {
       _stub();
    }
}

# XTYPE/PERM:vec splat hw
with slot: iclass=0b1000 {
    :"vsplathw00" is imm_22_27=0b010001 & imm_21=0 & S5 & imm_8_13=0 & imm_6_7=0b01 & imm_5=0 & D5 {
       _stub();
    }
}

# XTYPE/PERM:vec splice
with slot: iclass=0b1100 {
    :"vsplice00" is imm_23_27=0b00001 & imm_21_22=0 & S5 & imm_13=0 & T5 & imm_5_7 & D5 {
       _stub();
    }
    :"vsplice01" is imm_21_27=0b0010100 & S5 & imm_13=0 & T5 & imm_7=0 & imm_5_6 & D5 {
       _stub();
    }
}

# XTYPE/PERM:vec sign ext
with slot: iclass=0b1000 {
    :"vsext00" is imm_22_27=0b010000 & imm_21=0 & S5 & imm_8_13=0 & imm_6_7=0b00 & imm_5=0 & D5 {
       _stub();
    }
    :"vsext01" is imm_22_27=0b010000 & imm_21=0 & S5 & imm_8_13=0 & imm_6_7=0b10 & imm_5=0 & D5 {
       _stub();
    }
}

# XTYPE/PERM:vec trunc
with slot: iclass=0b1000 {
    :"vtunc00" is imm_21_27=0b1000100 & S5 & imm_8_13=0 & imm_5_7=0b000 & D5 {
       _stub();
    }
    :"vtunc01" is imm_21_27=0b1000100 & S5 & imm_8_13=0 & imm_5_7=0b010 & D5 {
       _stub();
    }
}
with slot: iclass=0b1100 {
    :"vtunc02" is imm_22_27=0b000110 & imm_21=0 & S5 & imm_13=0 & T5 & imm_5_7=0b010 & D5 {
       _stub();
    }
    :"vtunc03" is imm_22_27=0b000110 & imm_21=0 & S5 & imm_13=0 & T5 & imm_5_7=0b011 & D5 {
       _stub();
    }
    :"vtunc04" is imm_22_27=0b000110 & imm_21=0 & S5 & imm_13=0 & T5 & imm_5_7=0b100 & D5 {
       _stub();
    }
    :"vtunc05" is imm_22_27=0b000110 & imm_21=0 & S5 & imm_13=0 & T5 & imm_5_7=0b101 & D5 {
       _stub();
    }
}

# XTYPE/PERM:vec zext
with slot: iclass=0b1000 {
    :"vzext00" is imm_21_27=0b010000 & imm_21=0 & S5 & imm_8_13=0 & imm_6_7=0b01 & imm_5=0 & D5 {
       _stub();
    }
    :"vzext01" is imm_21_27=0b010000 & imm_21=0 & S5 & imm_8_13=0 & imm_6_7=0b11 & imm_5=0 & D5 {
       _stub();
    }
}

# XTYPE/PRED
# XTYPE/PRED:bound chk
with slot: iclass=0b1101 {
    :"bc0" is imm_23_27=0b00100 & imm_21_22=0 & S5 & imm_13=1 & T5 & imm_5_7=0b100 & imm_2_4=0 & D2 {
       _stub();
    }
    :"bc1" is imm_23_27=0b00100 & imm_21_22=0 & S5 & imm_13=1 & T5 & imm_5_7=0b101 & imm_2_4=0 & D2 {
       _stub();
    }
}

# XTYPE/PRED:cmp byte
with slot: iclass=0b1100 {
    :"cmpb0" is imm_21_27=0b0111110 & S5 & imm_13=0 & T5 & imm_5_7=0b010 & imm_2_4=0 & D2 {
       _stub();
    }
    :"cmpb1" is imm_21_27=0b0111110 & S5 & imm_13=0 & T5 & imm_5_7=0b110 & imm_2_4=0 & D2 {
       _stub();
    }
    :"cmpb2" is imm_21_27=0b0111110 & S5 & imm_13=0 & T5 & imm_5_7=0b111 & imm_2_4=0 & D2 {
       _stub();
    }
}
with slot: iclass=0b1101 {
    :D2_pred" =cmpb.eq(" S5 "," imm_5_12u ")" is imm_24_27=0b1101 & imm_23=0 & imm_21_22=0b00 & S5 & imm_13=0 & imm_5_12u & imm_3_4=0b00 & imm_2=0 & D2_pred {
    	local a:1 = S5:1;
	if(a != imm_5_12u) goto <bad>;
	D2_pred = PTRUE;
	goto <end>;
	<bad>
	D2_pred = 0;
	<end>
    }
    :"cmpb4" is imm_24_27=0b1101 & imm_23=0 & imm_21_22=0b01 & S5 & imm_13=0 & imm_5_12 & imm_3_4=0b00 & imm_2=0 & D2 {
       _stub();
    }
    :"cmpb5" is imm_24_27=0b1101 & imm_23=0 & imm_21_22=0b10 & S5 & imm_13=0 & imm_12=0 & imm_5_11 & imm_3_4=0b00 & imm_2=0 & D2 {
       _stub();
    }
}

# XTYPE/PRED:cmp half
with slot: iclass=0b1100 {
    :"cmph0" is imm_21_27=0b0111110 & S5 & imm_13=0 & T5 & imm_5_7=0b011 & imm_2_4=0 & D2 {
       _stub();
    }
    :"cmph1" is imm_21_27=0b0111110 & S5 & imm_13=0 & T5 & imm_5_7=0b100 & imm_2_4=0 & D2 {
       _stub();
    }
    :"cmph2" is imm_21_27=0b0111110 & S5 & imm_13=0 & T5 & imm_5_7=0b101 & imm_2_4=0 & D2 {
       _stub();
    }
}
with slot: iclass=0b1101 {
    :"cmph3" is imm_24_27=0b1101 & imm_23=0 & imm_21_22=0b00 & S5 & imm_13=0 & imm_5_12 & imm_3_4=0b01 & imm_2=0 & D2 {
       _stub();
    }
    :"cmph4" is imm_24_27=0b1101 & imm_23=0 & imm_21_22=0b01 & S5 & imm_13=0 & imm_5_12 & imm_3_4=0b01 & imm_2=0 & D2 {
       _stub();
    }
    :D2_pred_new "=cmph.gt(" S5 "," imm_5_11 ")" is imm_24_27=0b1101 & imm_23=0 & imm_21_22=0b10 & S5 & imm_13=0 & imm_12=0 & imm_5_11 & imm_3_4=0b01 & imm_2=0 & D2_pred_new & hasext0=0{
    	if (S5 s<= imm_5_11) goto <bad>;
		D2_pred_new = PTRUE;
		goto <end>;
	<bad>
		D2_pred_new = 0;
	<end>
    }
    :"cmph5E " immext0 is imm_24_27=0b1101 & imm_23=0 & imm_21_22=0b10 & S5 & imm_13=0 & imm_12=0 & imm_5_11 & imm_3_4=0b01 & imm_2=0 & D2 & hasext0=1 & immext0used=0 & immext0{
       _stub();
    }
}

# XTYPE/PRED:cmp dword
with slot: iclass=0b1101 {
    :D2_pred_new "=cmp.eq(" S5_pair "," T5_pair ")" is imm_21_27=0b0010100 & S5_pair & imm_13=0 & T5_pair & imm_5_7=0b000 & imm_2_4=0 & D2_pred_new {
    	if (S5_pair != T5_pair) goto <bad>;
	D2_pred_new = PTRUE;
	goto <end>;
	<bad>
	D2_pred_new = 0;
	<end>
    }
    :D2_pred_new "=cmp.gt(" S5_pair "," T5_pair ")" is imm_21_27=0b0010100 & S5_pair & imm_13=0 & T5_pair & imm_5_7=0b010 & imm_2_4=0 & D2_pred_new {
    	if (S5_pair s<= T5_pair) goto <bad>;
	D2_pred_new = PTRUE;
	goto <end>;
	<bad>
	D2_pred_new = 0;
	<end>
    }
    :D2_pred_new "=cmp.gtu(" S5_pair "," T5_pair ")" is imm_21_27=0b0010100 & S5_pair & imm_13=0 & T5_pair & imm_5_7=0b100 & imm_2_4=0 & D2_pred_new {
    	if (S5_pair <= T5_pair) goto <bad>;
	D2_pred_new = PTRUE;
	goto <end>;
	<bad>
	D2_pred_new = 0;
	<end>
    }
}
# XTYPE/PRED:cmp mask
with slot: iclass=0b1000 {
    :D2_pred_new"=bitsclr("S5",#"imm_8_13")" is imm_21_27=0b0101100 & S5 & imm_8_13 & imm_2_7=0 & D2_pred_new {
    local tmp:4 = S5 & imm_8_13;
    if(tmp == 0) goto <good>;
    D2_pred_new = 0x0;
    goto <end>;
    <good>
    D2_pred_new = PTRUE;
    goto <end>;
    <end>
    }
    :D2_pred_new"=!bitsclr("S5",#"imm_8_13")" is imm_21_27=0b0101101 & S5 & imm_8_13 & imm_2_7=0 & D2_pred_new {
    local tmp:4 = S5 & imm_8_13;
    if(tmp != 0) goto <good>;
    D2_pred_new = 0x0;
    goto <end>;
    <good>
    D2_pred_new = PTRUE;
    goto <end>;
    <end>
    }

}
with slot: iclass=0b1100 {
    :D2_pred_new"=bitsset("S5","T5")" is imm_21_27=0b0111010 & S5 & imm_13=0 & T5 & imm_2_7=0 & D2_pred_new {
    local tmp:4 = S5 & T5;
    if(tmp == T5) goto <good>;
    D2_pred_new = 0x0;
    goto <end>;
    <good>
    D2_pred_new = PTRUE;
    <end>
    }
    :D2_pred_new"=!bitsset("S5","T5")" is imm_21_27=0b0111011 & S5 & imm_13=0 & T5 & imm_2_7=0 & D2_pred_new {
    local tmp:4 = S5 & T5;
    if(tmp != T5) goto <good>;
    D2_pred_new = 0x0;
    goto <end>;
    <good>
    D2_pred_new = PTRUE;
    <end>
    }
    :D2_pred_new"=bitsclr("S5","T5")" is imm_21_27=0b0111100 & S5 & imm_13=0 & T5 & imm_2_7=0 & D2_pred_new {
    local tmp:4 = S5 & T5;
    if(tmp == 0) goto <good>;
    D2_pred_new = 0x0;
    goto <end>;
    <good>
    D2_pred_new = PTRUE;
    goto <end>;
    <end>
    }
    :D2_pred_new"=!bitsclr("S5","T5")" is imm_21_27=0b0111101 & S5 & imm_13=0 & T5 & imm_2_7=0 & D2_pred_new {
    local tmp:4 = S5 & T5;
    if(tmp != 0) goto <good>;
    D2_pred_new = 0x0;
    goto <end>;
    <good>
    D2_pred_new = PTRUE;
    goto <end>;
    <end>
    }
}

# XTYPE/PRED:Pred mask gen
with slot: iclass=0b1000 {
    :"genmsk" is imm_24_27=0b0110 & imm_16_23=0 & imm_10_13=0 & imm_8_9 & imm_5_7=0 & D5 {
       _stub();
    }
}

# XTYPE/PRED:Pred tlb match
with slot: iclass=0b1101 {
    :"tlbmatch" is imm_23_27=0b00100 & imm_21_22=0 & S5 & imm_13=1 & T5 & imm_5_7=0b011 & imm_2_4=0 & D2 {
       _stub();
    }
}

# XTYPE/PRED:Pred trans
with slot: iclass=0b1000 {
    :D2_pred "=" S5 is imm_21_27=0b0101010 & S5 & imm_2_13=0 & D2_pred {
       D2_pred=S5:1;
    }
    :D5 "=" S2_pred is imm_24_27=0b1001 & imm_23=0 & imm_22=1 & imm_18_21=0 & S2_pred & imm_5_13=0 & D5 {
       D5=zext(S2_pred);
    }
}

# XTYPE/PRED:test bit
with slot: iclass=0b1000 {
    :D2_pred_new"=tstbit("S5",#"imm_8_12")" is imm_21_27=0b0101000 & S5 & imm_13=0 & imm_8_12 & imm_2_7=0 & D2_pred_new {
        local tmp:4 = 1 << imm_8_12;
        local tmp1:4 = S5 & tmp;
        if(tmp1 != 0) goto <good>;
        D2_pred_new = 0;
        goto <end>;
        <good>
        D2_pred_new = PTRUE;
        goto <end>;
        <end>
    }
    :D2_pred_new"=!tstbit("S5",#"imm_8_12")" is imm_21_27=0b0101001 & S5 & imm_13=0 & imm_8_12 & imm_2_7=0 & D2_pred_new {
        local tmp:4 = 1 << imm_8_12;
        local tmp1:4 = S5 & tmp;
        if(tmp1 == 0) goto <good>;
        D2_pred_new = 0;
        goto <end>;
        <good>
        D2_pred_new = PTRUE;
        goto <end>;
        <end>
    }
}
with slot: iclass=0b1100 {
    :D2_pred_new"=tstbit("S5","T5")" is imm_21_27=0b0111000 & S5 & imm_13=0 & T5 & imm_2_7=0 & D2_pred_new {
        local tmp:4 = 1 << T5;
        local tmp1:4 = S5 & tmp;
        if(tmp1 != 0) goto <good>;
        D2_pred_new = 0;
        goto <end>;
        <good>
        D2_pred_new = PTRUE;
        goto <end>;
        <end>
    }
    :D2_pred_new"=!tstbit("S5","T5")" is imm_21_27=0b0111001 & S5 & imm_13=0 & T5 & imm_2_7=0 & D2_pred_new {
        local tmp:4 = 1 << T5;
        local tmp1:4 = S5 & tmp;
        if(tmp1 == 0) goto <good>;
        D2_pred_new = 0;
        goto <end>;
        <good>
        D2_pred_new = PTRUE;
        goto <end>;
        <end>
    }
}

# XTYPE/PRED:vec cmp hw
with slot: iclass=0b1101 {
    :"veccmphw00" is imm_23_27=0b00100 & imm_21_22=0 & S5 & imm_13=0 & T5 & imm_5_7=0b011 & imm_2_4=0 & D2_pred {
        _stub();
    }
    :"veccmphw01" is imm_23_27=0b00100 & imm_21_22=0 & S5 & imm_13=0 & T5 & imm_5_7=0b100 & imm_2_4=0 & D2_pred {
        _stub();
    }
    :"veccmphw02" is imm_23_27=0b00100 & imm_21_22=0 & S5 & imm_13=0 & T5 & imm_5_7=0b101 & imm_2_4=0 & D2_pred {
        _stub();
    }

    :"veccmphw03" is imm_21_27=0b1100000 & S5 & imm_13=0 & imm_5_12 & imm_3_4=0b01 & imm_2=0 & D2_pred {
        _stub();
    }
    :"veccmphw04" is imm_21_27=0b1100001 & S5 & imm_13=0 & imm_5_12 & imm_3_4=0b01 & imm_2=0 & D2_pred {
        _stub();
    }
    :"veccmphw05" is imm_21_27=0b1100010 & S5 & imm_13=0 & imm_12=0 & imm_5_11 & imm_3_4=0b01 & imm_2=0 & D2_pred {
        _stub();
    }
}

# XTYPE/PRED:vec cmp by for
with slot: iclass=0b1101 {
    :"veccmpbyfor" is imm_23_27=0b00100 & imm_21_22=0 & S5 & imm_13=1 & T5 & imm_5_7=0b000 & imm_2_4=0 & D2_pred {
        _stub();
    }
    :"veccmpbyfor1" is imm_23_27=0b00100 & imm_21_22=0 & S5 & imm_13=1 & T5 & imm_5_7=0b001 & imm_2_4=0 & D2_pred {
        _stub();
    }
}

# XTYPE/PRED:vec cmp by
with slot: iclass=0b1101 {
    :"veccmpby00" is imm_23_27=0b00100 & imm_21_22=0 & S5 & imm_13=0 & T5 & imm_5_7=0b110 & imm_2_4=0 & D2_pred {
        _stub();
    }
    :"veccmpby01" is imm_23_27=0b00100 & imm_21_22=0 & S5 & imm_13=0 & T5 & imm_5_7=0b111 & imm_2_4=0 & D2_pred {
        _stub();
    }
    :"veccmpby02" is imm_23_27=0b00100 & imm_21_22=0 & S5 & imm_13=1 & T5 & imm_5_7=0b010 & imm_2_4=0 & D2_pred {
        _stub();
    }

    :"veccmpby03" is imm_21_27=0b1100000 & S5 & imm_13=0 & imm_5_12 & imm_3_4=0b00 & imm_2=0 & D2_pred {
        _stub();
    }
    :"veccmphw04" is imm_21_27=0b1100001 & S5 & imm_13=0 & imm_5_12 & imm_3_4=0b00 & imm_2=0 & D2_pred {
        _stub();
    }
    :"veccmphw05" is imm_21_27=0b1100010 & S5 & imm_13=0 & imm_12=0 & imm_5_11 & imm_3_4=0b00 & imm_2=0 & D2_pred {
        _stub();
    }
}

# XTYPE/PRED:vec cmp w
with slot: iclass=0b1101 {
    :"veccmpw00" is imm_23_27=0b00100 & imm_21_22=0 & S5 & imm_13=0 & T5 & imm_5_7=0b000 & imm_2_4=0 & D2_pred {
        _stub();
    }
    :"veccmpw01" is imm_23_27=0b00100 & imm_21_22=0 & S5 & imm_13=0 & T5 & imm_5_7=0b001 & imm_2_4=0 & D2_pred {
        _stub();
    }
    :"veccmpw02" is imm_23_27=0b00100 & imm_21_22=0 & S5 & imm_13=0 & T5 & imm_5_7=0b010 & imm_2_4=0 & D2_pred {
        _stub();
    }

    :"veccmpby03" is imm_21_27=0b1100000 & S5 & imm_13=0 & imm_5_12 & imm_3_4=0b10 & imm_2=0 & D2_pred {
        _stub();
    }
    :"veccmphw04" is imm_21_27=0b1100001 & S5 & imm_13=0 & imm_5_12 & imm_3_4=0b10 & imm_2=0 & D2_pred {
        _stub();
    }
    :"veccmphw05" is imm_21_27=0b1100010 & S5 & imm_13=0 & imm_12=0 & imm_5_11 & imm_3_4=0b10 & imm_2=0 & D2_pred {
        _stub();
    }
}

# XTYPE/PRED:vec pck evn odd
with slot: iclass=0b1000 {
    :"veccmpevod" is imm_24_27=0b1001 & imm_23=0 & imm_21_22=0b00 & imm_18_20 & imm_16_17 & imm_10_13=0 & imm_8_9 & imm_5_7 & D5 {
        _stub();
    }
}

# XTYPE/PRED:vec mux
with slot: iclass=0b1101 {
    :"vecmux" is imm_24_27=0b0001 & imm_21_23=0 & S5 & imm_13=0 & T5 & imm_7=0 & imm_5_6 & D5 {
        _stub();
    }
}

# XTYPE/SHIFT
# XTYPE/SHIFT:Mask from imm
with slot: iclass=0b1000 {
    :D5"=mask("imm_8_12","U5")" is imm_23_27=0b11010 & imm_21_22u & imm_16_20 &  S5 & imm_13=1 & imm_8_12 & imm_5_7u & D5 [ U5 = imm_5_7u | (imm_21_22u << 3);] {
    	D5 = ((1 << imm_8_12)-1) << U5;
    }
}

# XTYPE/SHIFT:Shift by imm
with slot: iclass=0b1000 {
    :D5_pair"=asr("S5_pair",#"imm_8_13")" is imm_21_27=0b0000000 & S5_pair & imm_8_13 & imm_5_7=0b000 & D5_pair {
        D5_pair = S5_pair s>> imm_8_13;
    }
    :D5_pair"=lsr("S5_pair",#"imm_8_13")" is imm_21_27=0b0000000 & S5_pair & imm_8_13 & imm_5_7=0b001 & D5_pair {
        D5_pair = S5_pair >> imm_8_13;
    }
    :D5_pair"=asl("S5_pair",#"imm_8_13")" is imm_21_27=0b0000000 & S5_pair & imm_8_13 & imm_5_7=0b010 & D5_pair {
        D5_pair = S5_pair << imm_8_13;
    }
    :D5_pair"=rol("S5_pair",#"imm_8_13")" is imm_21_27=0b0000000 & S5_pair & imm_8_13 & imm_5_7=0b011 & D5_pair {
    	local d:8 = imm_8_13;
	local n:8 = S5_pair;
    	D5_pair = (n << d) | ( n >> (64 - d));
    }
    :D5"=asr("S5",#"imm_8_12")" is imm_21_27=0b1100000 & S5 & imm_13=0 & imm_8_12 & imm_5_7=0b000 & D5 {
        D5 = S5 s>> imm_8_12;
    }
    :D5"=lsr("S5",#"imm_8_12")" is imm_21_27=0b1100000 & S5 & imm_13=0 & imm_8_12 & imm_5_7=0b001 & D5 {
        D5 = S5 >> imm_8_12;
    }
    :D5"=asl("S5",#"imm_8_12")" is imm_21_27=0b1100000 & S5 & imm_13=0 & imm_8_12 & imm_5_7=0b010 & D5 {
        D5 = S5 << imm_8_12;
    }
    :D5"=rol("S5",#"imm_8_12")" is imm_21_27=0b1100000 & S5 & imm_13=0 & imm_8_12 & imm_5_7=0b011 & D5 {
    	local d:4 = imm_8_12;
	local n:4 = S5;
    	D5 = (n << d) | ( n >> (32 - d));
    }
}

# XTYPE/SHIFT:Shift by imm and acc
with slot: iclass=0b1000 {
    :alu_X5_pair "-=asr(" S5_pair "," imm_8_13u ")" is imm_22_27=0b001000 & imm_21=0 & S5_pair & imm_8_13u & imm_5_7=0b000 & alu_X5_pair {
        alu_X5_pair = alu_X5_pair - (S5_pair s>> imm_8_13u);
    }
    :alu_X5_pair "-=lsr(" S5_pair "," imm_8_13u ")" is imm_22_27=0b001000 & imm_21=0 & S5_pair & imm_8_13u & imm_5_7=0b001 & alu_X5_pair {
        alu_X5_pair = alu_X5_pair - (S5_pair >> imm_8_13u);
    }
    :alu_X5_pair "-=asl(" S5_pair "," imm_8_13u ")" is imm_22_27=0b001000 & imm_21=0 & S5_pair & imm_8_13u & imm_5_7=0b010 & alu_X5_pair {
        alu_X5_pair = alu_X5_pair - (S5_pair << imm_8_13u);
    }
    :"rxx-=rol(rss,u6)" is imm_22_27=0b001000 & imm_21=0 & S5 & imm_8_13u & imm_5_7=0b011 & D5 {
    	_stub();
    }
    :alu_X5_pair "+=asr(" S5_pair "," imm_8_13u ")" is imm_22_27=0b001000 & imm_21=0 & S5_pair & imm_8_13u & imm_5_7=0b100 & alu_X5_pair {
        alu_X5_pair = alu_X5_pair + (S5_pair s>> imm_8_13u);
    }

    :alu_X5_pair "+=lsr(" S5_pair "," imm_8_13u ")" is imm_22_27=0b001000 & imm_21=0 & S5_pair & imm_8_13u & imm_5_7=0b101 & alu_X5_pair {
        alu_X5_pair = alu_X5_pair + (S5_pair >> imm_8_13u);
    }
    :alu_X5_pair "+=asl(" S5_pair "," imm_8_13u ")" is imm_22_27=0b001000 & imm_21=0 & S5_pair & imm_8_13u & imm_5_7=0b110 & alu_X5_pair {
        alu_X5_pair = alu_X5_pair + (S5_pair << imm_8_13u);
    }
    :"rxx+=rol(rss,u6)" is imm_22_27=0b001000 & imm_21=0 & S5 & imm_8_13u & imm_5_7=0b111 & D5 {
    	_stub();
    }

    :alu_X5"-=asr("S5","imm_8_12u")" is imm_22_27=0b111000 & imm_21=0 & S5 & imm_13=0 & imm_8_12u & imm_5_7=0b000 & alu_X5 {
        alu_X5 = alu_X5 - (S5 s>> imm_8_12u);
    }
    :alu_X5"-=lsr("S5","imm_8_12u")" is imm_22_27=0b111000 & imm_21=0 & S5 & imm_13=0 & imm_8_12u & imm_5_7=0b001 & alu_X5 {
        alu_X5 = alu_X5 - (S5 >> imm_8_12u);
    }
    :alu_X5"-=asl("S5","imm_8_12u")" is imm_22_27=0b111000 & imm_21=0 & S5 & imm_13=0 & imm_8_12u & imm_5_7=0b010 & alu_X5 {
        alu_X5 = alu_X5 - (S5 << imm_8_12u);
    }
    :"rx-=rol(rs,u5)" is imm_22_27=0b111000 & imm_21=0 & S5 & imm_8_13u & imm_5_7=0b011 & D5 {
    	_stub();
    }

    :alu_X5"+=asr("S5","imm_8_12u")" is imm_22_27=0b111000 & imm_21=0 & S5 & imm_13=0 & imm_8_12u & imm_5_7=0b100 & alu_X5 {
        alu_X5 = alu_X5 + (S5 s>> imm_8_12u);
    }
    :alu_X5"+=lsr("S5","imm_8_12u")" is imm_22_27=0b111000 & imm_21=0 & S5 & imm_13=0 & imm_8_12u & imm_5_7=0b101 & alu_X5 {
        alu_X5 = alu_X5 + (S5 >> imm_8_12u);
    }
    :alu_X5"+=asl("S5","imm_8_12u")" is imm_22_27=0b111000 & imm_21=1 & S5 & imm_13=0 & imm_8_12u & imm_5_7=0b110 & alu_X5 {
        alu_X5 = alu_X5 + (S5 << imm_8_12u);
    }
    :"rx+rol(rs,u5)" is imm_22_27=0b111000 & imm_21=0 & S5 & imm_13=0 & imm_8_12 & imm_5_7=0b111 & D5 {
    	_stub();
    }
}

with slot: iclass=0b1101 {
    :S5 "=add(" u8 ",asl(" S5_dup "," imm_8_12u "))" is imm_24_27=0b1110 & imm_21_23u & S5 & S5_dup & imm_13u & imm_8_12u & imm_5_7u & imm_4=0 & imm_3u & imm_1_2=0b10 & imm_0=0 [u8 = imm_3u | (imm_5_7u << 1) | (imm_13u << 4) | (imm_21_23u << 5);] {
    	local EA:4 = S5 << imm_8_12u;
	S5 = u8 + EA;
    }
    :S5 "=sub(" u8 ",asl(" S5_dup "," imm_8_12u "))" is imm_24_27=0b1110 & imm_21_23u & S5 & S5_dup & imm_13u & imm_8_12u & imm_5_7u & imm_4=0 & imm_3u & imm_1_2=0b11 & imm_0=0 [u8 = imm_3u | (imm_5_7u << 1) | (imm_13u << 4) | (imm_21_23u << 5);] {
    	local EA:4 = S5 << imm_8_12u;
	S5 = u8 - EA;
    }
    :S5 "=add(" u8 ",lsr(" S5_dup "," imm_8_12u "))" is imm_24_27=0b1110 & imm_21_23u & S5 & S5_dup & imm_13u & imm_8_12u & imm_5_7u & imm_4=1 & imm_3u & imm_1_2=0b10 & imm_0=0 [u8 = imm_3u | (imm_5_7u << 1) | (imm_13u << 4) | (imm_21_23u << 5);] {
    	local EA:4 = S5 >> imm_8_12u;
	S5 = u8 + EA;
    }
    :S5 "=sub(" u8 ",lsr(" S5_dup "," imm_8_12u "))" is imm_24_27=0b1110 & imm_21_23u & S5 & S5_dup & imm_13u & imm_8_12u & imm_5_7u & imm_4=1 & imm_3u & imm_1_2=0b11 & imm_0=0 [u8 = imm_3u | (imm_5_7u << 1) | (imm_13u << 4) | (imm_21_23u << 5);] {
    	local EA:4 = S5 >> imm_8_12u;
	S5 = u8 - EA;
    }
}

#XTYPE/SHIFT:Shift by imm and add
with slot: iclass=0b1100 {
    :D5"=addasl("T5","S5"<<"imm_5_7")" is imm_21_27=0b0100000 & S5 & imm_13=0 & T5 & imm_5_7 & D5 {
        D5 = T5 + (S5 << imm_5_7);
    }
}

#XTYPE/SHIFT:Shift by imm and logical
with slot: iclass=0b1000 {
    :D5_pair "&=asr(" S5_pair "," imm_8_13u ")" is imm_22_27=0b001001 & imm_21=0 & S5_pair & imm_8_13u & imm_5_7=0b000 & D5_pair {
    	D5_pair = D5_pair & (S5_pair s>> imm_8_13u);
    }
    :D5_pair "&=lsr(" S5_pair "," imm_8_13u ")" is imm_22_27=0b001001 & imm_21=0 & S5_pair & imm_8_13u & imm_5_7=0b001 & D5_pair {
    	D5_pair = D5_pair & (S5_pair >> imm_8_13u);
    }
    :D5_pair "&=asl(" S5_pair "," imm_8_13u ")" is imm_22_27=0b001001 & imm_21=0 & S5_pair & imm_8_13u & imm_5_7=0b010 & D5_pair {
    	D5_pair = D5_pair & (S5_pair << imm_8_13u);
    }
    :"rxx&=rol(rss,u6)" is imm_22_27=0b001001 & imm_21=0 & S5 & imm_8_13 & imm_5_7=0b011 & D5 {
    	_stub();
    }

    :D5_pair "|=asr(" S5_pair "," imm_8_13u ")" is imm_22_27=0b001001 & imm_21=0 & S5_pair & imm_8_13u & imm_5_7=0b100 & D5_pair {
    	D5_pair = D5_pair | (S5_pair s>> imm_8_13u);
    }
    :D5_pair "|=lsr(" S5_pair "," imm_8_13u ")" is imm_22_27=0b001001 & imm_21=0 & S5_pair & imm_8_13u & imm_5_7=0b101 & D5_pair {
    	D5_pair = D5_pair | (S5_pair >> imm_8_13u);
    }
    :D5_pair "|=asl(" S5_pair "," imm_8_13u ")" is imm_22_27=0b001001 & imm_21=0 & S5_pair & imm_8_13u & imm_5_7=0b110 & D5_pair {
    	D5_pair = D5_pair | (S5_pair << imm_8_13u);
    }
    :"rxx|=rol(rss,u6)" is imm_22_27=0b001001 & imm_21=0 & S5 & imm_8_13 & imm_5_7=0b111 & D5 {
    	_stub();
    }


    :D5_pair "^=lsr(" S5_pair "," imm_8_13u ")" is imm_22_27=0b001010 & imm_21=0 & S5_pair & imm_8_13u & imm_5_7=0b001 & D5_pair {
    	D5_pair = D5_pair ^ (S5_pair >> imm_8_13u);
    }
    :D5_pair "^=asl(" S5_pair "," imm_8_13u ")" is imm_22_27=0b001010 & imm_21=0 & S5_pair & imm_8_13u & imm_5_7=0b010 & D5_pair {
    	D5_pair = D5_pair ^ (S5_pair << imm_8_13u);
    }
    :"rxx^=rol(rss,u6)" is imm_22_27=0b001010 & imm_21=0 & S5 & imm_8_13 & imm_5_7=0b011 & D5 {
    	_stub();
    }

    :D5 "&=asr(" S5 "," imm_8_12u ")" is imm_22_27=0b111001 & imm_21=0 & S5 & imm_13=0 & imm_8_12u & imm_5_7=0b000 & D5 {
    	D5 = D5 & (S5 s>> imm_8_12u);
    }
    :D5 "&=lsr(" S5 "," imm_8_12u ")" is imm_22_27=0b111001 & imm_21=0 & S5 & imm_13=0 & imm_8_12u & imm_5_7=0b001 & D5 {
    	D5 = D5 & (S5 >> imm_8_12u);
    }
    :D5 "&=asl(" S5 "," imm_8_12u ")" is imm_22_27=0b111001 & imm_21=0 & S5 & imm_13=0 & imm_8_12u & imm_5_7=0b010 & D5 {
    	D5 = D5 & (S5 << imm_8_12u);
    }
    :"rx&=rol(rs,u5)" is imm_22_27=0b111001 & imm_21=0 & S5 & imm_13=0 & imm_8_12 & imm_5_7=0b011 & D5 {
    	_stub();
    }

    :D5 "|=asr(" S5 "," imm_8_12u ")" is imm_22_27=0b111001 & imm_21=0 & S5 & imm_13=0 & imm_8_12u & imm_5_7=0b100 & D5 {
    	D5 = D5 | (S5 s>> imm_8_12u);
    }
    :D5 "|=lsr(" S5 "," imm_8_12u ")" is imm_22_27=0b111001 & imm_21=0 & S5 & imm_13=0 & imm_8_12u & imm_5_7=0b101 & D5 {
    	D5 = D5 | (S5 >> imm_8_12u);
    }
    :D5 "|=asl(" S5 "," imm_8_12u ")" is imm_22_27=0b111001 & imm_21=0 & S5 & imm_13=0 & imm_8_12u & imm_5_7=0b110 & D5 {
    	D5 = D5 | (S5 << imm_8_12u);
    }
    :"rx|=rol(rs,u5)" is imm_22_27=0b111001 & imm_21=0 & S5 & imm_13=0 & imm_8_12 & imm_5_7=0b111 & D5 {
    	_stub();
    }

    :D5 "^=lsr(" S5 "," imm_8_12u ")" is imm_22_27=0b111010 & imm_21=0 & S5 & imm_13=0 & imm_8_12u & imm_5_7=0b001 & D5 {
    	D5 = D5 ^ (S5 >> imm_8_12u);
    }
    :D5 "^=asl(" S5 "," imm_8_12u ")" is imm_22_27=0b111010 & imm_21=0 & S5 & imm_13=0 & imm_8_12u & imm_5_7=0b010 & D5 {
    	D5 = D5 ^ (S5 << imm_8_12u);
    }
    :"rx^=rol(rs,u5)" is imm_22_27=0b111010 & imm_21=0 & S5 & imm_13=0 & imm_8_12 & imm_5_7=0b011 & D5 {
    	_stub();
    }
}
#TODO: not +=
with slot: iclass=0b1101 {
    :alu_X5_dup "=and(" u8 ",asl(" alu_X5 "," imm_8_12u "))" is imm_24_27=0b1110 & imm_21_23 & alu_X5 & alu_X5_dup & imm_13 & imm_8_12u & imm_5_7 & imm_4=0 & imm_3 & imm_1_2=0b00 & imm_0=0 [ u8 = imm_3 | (imm_5_7 << 1) | (imm_13 << 4) | (imm_21_23 << 5); ] {
	    alu_X5 = u8 & (alu_X5 << imm_8_12u);
	}
    :alu_X5_dup "=or(" u8 ",asl(" alu_X5 "," imm_8_12u "))" is imm_24_27=0b1110 & imm_21_23 & alu_X5 & alu_X5_dup & imm_13 & imm_8_12u & imm_5_7 & imm_4=0 & imm_3 & imm_1_2=0b01 & imm_0=0 [ u8 = imm_3 | (imm_5_7 << 1) | (imm_13 << 4) | (imm_21_23 << 5); ] {
	    alu_X5 = u8 | (alu_X5 << imm_8_12u);
	}
    :alu_X5_dup "+=and(" u8 ",lsr(" alu_X5 "," imm_8_12u "))" is imm_24_27=0b1110 & imm_21_23 & alu_X5 & alu_X5_dup & imm_13 & imm_8_12u & imm_5_7 & imm_4=1 & imm_3 & imm_1_2=0b00 & imm_0=0 [ u8 = imm_3 | (imm_5_7 << 1) | (imm_13 << 4) | (imm_21_23 << 5); ] {
	    alu_X5 = alu_X5 + (u8 & (alu_X5 >> imm_8_12u));
	}
    :alu_X5_dup "+=or(" u8 ",lsr(" alu_X5 "," imm_8_12u "))" is imm_24_27=0b1110 & imm_21_23 & alu_X5 & alu_X5_dup & imm_13 & imm_8_12u & imm_5_7 & imm_4=1 & imm_3 & imm_1_2=0b01 & imm_0=0 [ u8 = imm_3 | (imm_5_7 << 1) | (imm_13 << 4) | (imm_21_23 << 5); ] {
	    alu_X5 = alu_X5 + (u8 | (alu_X5 >> imm_8_12u));
	}
}

# Shift r by imm with round
with slot: iclass=0b1000 {
    :D5_pair"=asr("S5_pair",u6):rnd" is imm_21_27=0b0000110 & S5_pair & imm_8_13 & imm_5_7=0b111 & D5_pair {
    	_stub();
    }
    :D5"=asr("S5",u5):rnd" is imm_21_27=0b1100010 & S5 & imm_13=0 & imm_8_12 & imm_5_7=0b000 & D5 {
    	_stub();
    }
}

# Shift r by imm with sat
with slot: iclass=0b1000 {
    :D5"=asl("S5",u5):sat" is imm_21_27=0b1100010 & S5 & imm_13=0 & imm_8_12 & imm_5_7=0b010 & D5 {
    	_stub();
    }
}

# XTYPE/SHIFT:Shift by reg
with slot: iclass=0b1100 {
    :D5_pair"=asr("S5_pair","T5")" is imm_22_27=0b001110 & imm_21=0 & S5_pair & imm_13=0 & T5 & imm_6_7=0b00 & imm_5=0 & D5_pair {
        D5_pair = S5_pair s>> T5;
    }
    :D5_pair"=lsr("S5_pair","T5")" is imm_22_27=0b001110 & imm_21=0 & S5_pair & imm_13=0 & T5 & imm_6_7=0b01 & imm_5=0 & D5_pair {
        D5_pair = S5_pair >> T5;
    }
    :D5_pair"=asl("S5_pair","T5")" is imm_22_27=0b001110 & imm_21=0 & S5_pair & imm_13=0 & T5 & imm_6_7=0b10 & imm_5=0 & D5_pair {
        D5_pair = S5_pair << T5;
    }
    :D5_pair"=lsl("S5_pair","T5")" is imm_22_27=0b001110 & imm_21=0 & S5_pair & imm_13=0 & T5 & imm_6_7=0b11 & imm_5=0 & D5_pair {
        D5_pair = S5_pair << T5;
    }
    :D5"=asr("S5","T5")" is imm_22_27=0b011001 & imm_21=0 & S5 & imm_13=0 & T5 & imm_6_7=0b00 & imm_5=0 & D5 {
        D5 = S5 s>> T5;
    }
    :D5"=lsr("S5","T5")" is imm_22_27=0b011001 & imm_21=0 & S5 & imm_13=0 & T5 & imm_6_7=0b01 & imm_5=0 & D5 {
        D5 = S5 >> T5;
    }
    :D5"=asl("S5","T5")" is imm_22_27=0b011001 & imm_21=0 & S5 & imm_13=0 & T5 & imm_6_7=0b10 & imm_5=0 & D5 {
        D5 = S5 << T5;
    }
    :D5"=lsl("S5","T5")" is imm_22_27=0b011001 & imm_21=0 & S5 & imm_13=0 & T5 & imm_6_7=0b11 & imm_5=0 & D5 {
        D5 = S5 << T5;
    }

    :D5"=lsl("s6","T5")" is imm_22_27=0b011010 & imm_21=0 & imm_16_20 & imm_13=0 & T5 & imm_6_7=0b11 & imm_5u & D5 [s6 = imm_5u | (imm_16_20 << 1);] {
        D5 = s6 << T5;
    }
}

# XTYPE/SHIFT:Shift by reg acc
with slot: iclass=0b1100 {
    :D5_pair "-=asr(" S5_pair "," T5 ")" is imm_21_27=0b1011100 & S5_pair & imm_13=0 & T5 & imm_6_7=0b00 & imm_5=0 & D5_pair {
    	D5_pair = D5_pair - (S5_pair s>> T5);
    }
    :D5_pair "-=lsr(" S5_pair "," T5 ")" is imm_21_27=0b1011100 & S5_pair & imm_13=0 & T5 & imm_6_7=0b01 & imm_5=0 & D5_pair {
    	D5_pair = D5_pair - (S5_pair >> T5);
    }
    :D5_pair "-=asl(" S5_pair "," T5 ")" is imm_21_27=0b1011100 & S5_pair & imm_13=0 & T5 & imm_6_7=0b10 & imm_5=0 & D5_pair {
    	D5_pair = D5_pair - (S5_pair << T5);
    }
    :D5_pair "-=asl(" S5_pair "," T5 ")" is imm_21_27=0b1011100 & S5_pair & imm_13=0 & T5 & imm_6_7=0b11 & imm_5=0 & D5_pair {
    	D5_pair = D5_pair - (S5_pair << T5);
    }

    :D5_pair "+=asr(" S5_pair "," T5 ")" is imm_21_27=0b1011110 & S5_pair & imm_13=0 & T5 & imm_6_7=0b00 & imm_5=0 & D5_pair {
    	D5_pair = D5_pair + (S5_pair s>> T5);
    }
    :D5_pair "+=lsr(" S5_pair "," T5 ")" is imm_21_27=0b1011110 & S5_pair & imm_13=0 & T5 & imm_6_7=0b01 & imm_5=0 & D5_pair {
    	D5_pair = D5_pair + (S5_pair >> T5);
    }
    :D5_pair "+=asl(" S5_pair "," T5 ")" is imm_21_27=0b1011110 & S5_pair & imm_13=0 & T5 & imm_6_7=0b10 & imm_5=0 & D5_pair {
    	D5_pair = D5_pair + (S5_pair << T5);
    }
    :D5_pair "+=asl(" S5_pair "," T5 ")" is imm_21_27=0b1011110 & S5_pair & imm_13=0 & T5 & imm_6_7=0b11 & imm_5=0 & D5_pair {
    	D5_pair = D5_pair + (S5_pair << T5);
    }

    :D5 "-=asr(" S5 "," T5 ")" is imm_22_27=0b110010 & imm_21=0 & S5 & imm_13=0 & T5 & imm_6_7=0b00 & imm_5=0 & D5 {
    	D5 = D5 - (S5 s>> T5);
    }
    :D5 "-=lsr(" S5 "," T5 ")" is imm_22_27=0b110010 & imm_21=0 & S5 & imm_13=0 & T5 & imm_6_7=0b01 & imm_5=0 & D5 {
    	D5 = D5 - (S5 >> T5);
    }
    :D5 "-=asl(" S5 "," T5 ")" is imm_22_27=0b110010 & imm_21=0 & S5 & imm_13=0 & T5 & imm_6_7=0b10 & imm_5=0 & D5 {
    	D5 = D5 - (S5 << T5);
    }
    :D5 "-=lsl(" S5 "," T5 ")" is imm_22_27=0b110010 & imm_21=0 & S5 & imm_13=0 & T5 & imm_6_7=0b11 & imm_5=0 & D5 {
    	D5 = D5 - (S5 << T5);
    }

    :D5 "+=asr(" S5 "," T5 ")" is imm_22_27=0b110011 & imm_21=0 & S5 & imm_13=0 & T5 & imm_6_7=0b00 & imm_5=0 & D5 {
    	D5 = D5 + (S5 s>> T5);
    }
    :D5 "+=lsr(" S5 "," T5 ")" is imm_22_27=0b110011 & imm_21=0 & S5 & imm_13=0 & T5 & imm_6_7=0b01 & imm_5=0 & D5 {
    	D5 = D5 + (S5 >> T5);
    }
    :D5 "+=asl(" S5 "," T5 ")" is imm_22_27=0b110011 & imm_21=0 & S5 & imm_13=0 & T5 & imm_6_7=0b10 & imm_5=0 & D5 {
    	D5 = D5 + (S5 << T5);
    }
    :D5 "+=lsl(" S5 "," T5 ")" is imm_22_27=0b110011 & imm_21=0 & S5 & imm_13=0 & T5 & imm_6_7=0b11 & imm_5=0 & D5 {
    	D5 = D5 + (S5 << T5);
    }
}

# XTYPE/SHIFT:Shift by reg log
with slot: iclass=0b1100 {
    :"rxx|=asr(rss,rt)" is imm_21_27=0b1011000 & S5 & imm_13=0 & T5 & imm_6_7=0b00 & imm_5=0 & D5 {
    	_stub();
    }
    :D5_pair "|=lsr(" S5_pair "," T5 ")" is imm_21_27=0b1011000 & S5_pair & imm_13=0 & T5 & imm_6_7=0b01 & imm_5=0 & D5_pair {
    	D5_pair = D5_pair | (S5_pair >> T5);
    }
    :D5_pair "|=asl(" S5_pair "," T5 ")" is imm_21_27=0b1011000 & S5_pair & imm_13=0 & T5 & imm_6_7=0b10 & imm_5=0 & D5_pair {
    	D5_pair = D5_pair | (S5_pair << T5);
    }
    :"rxx|=lsl(rss,rt)" is imm_21_27=0b1011000 & S5 & imm_13=0 & T5 & imm_6_7=0b11 & imm_5=0 & D5 {
    	_stub();
    }
    :"rxx&=asr(rss,rt)" is imm_21_27=0b1011010 & S5 & imm_13=0 & T5 & imm_6_7=0b00 & imm_5=0 & D5 {
    	_stub();
    }
    :D5_pair"&=lsr(" S5_pair "," T5 ")" is imm_21_27=0b1011010 & S5_pair & imm_13=0 & T5 & imm_6_7=0b01 & imm_5=0 & D5_pair {
	D5_pair = D5_pair & (S5_pair >> T5);
    }
    :D5_pair"&=asl(" S5_pair "," T5 ")" is imm_21_27=0b1011010 & S5_pair & imm_13=0 & T5 & imm_6_7=0b10 & imm_5=0 & D5_pair {
	D5_pair = D5_pair & (S5_pair << T5);
    }
    :"rxx&=lsl(rss,rt)" is imm_21_27=0b1011010 & S5 & imm_13=0 & T5 & imm_6_7=0b11 & imm_5=0 & D5 {
    	_stub();
    }

    :D5_pair "^=asr(" S5_pair "," T5 ")" is imm_21_27=0b1011011 & S5_pair & imm_13=0 & T5 & imm_6_7=0b00 & imm_5=0 & D5_pair {
	D5_pair = D5_pair ^ (S5_pair s>> T5);
    }
    :D5_pair "^=lsr(" S5_pair "," T5 ")" is imm_21_27=0b1011011 & S5_pair & imm_13=0 & T5 & imm_6_7=0b01 & imm_5=0 & D5_pair {
	D5_pair = D5_pair ^ (S5_pair >> T5);
    }
    :D5_pair "^=asl(" S5_pair "," T5 ")" is imm_21_27=0b1011011 & S5_pair & imm_13=0 & T5 & imm_6_7=0b10 & imm_5=0 & D5_pair {
	D5_pair = D5_pair ^ (S5_pair << T5);
    }
    :"rxx^=lsl(rss,rt)" is imm_21_27=0b1011011 & S5 & imm_13=0 & T5 & imm_6_7=0b11 & imm_5=0 & D5 {
    	_stub();
    }

    :D5"|=asr(" S5 "," T5 ")" is imm_22_27=0b110000 & imm_21=0 & S5 & imm_13=0 & T5 & imm_6_7=0b00 & imm_5=0 & D5 {
	D5 = D5 | (S5 s>> T5);
    }
    :D5"|=asl(" S5 "," T5 ")" is imm_22_27=0b110000 & imm_21=0 & S5 & imm_13=0 & T5 & imm_6_7=0b01 & imm_5=0 & D5 {
	D5 = D5 | (S5 << T5);
    }
    :D5"|=asl(" S5 "," T5 ")" is imm_22_27=0b110000 & imm_21=0 & S5 & imm_13=0 & T5 & imm_6_7=0b10 & imm_5=0 & D5 {
	D5 = D5 | (S5 << T5);
    }
    :"rx|=lsl(rs,rt)" is imm_22_27=0b110000 & imm_21=0 & S5 & imm_13=0 & T5 & imm_6_7=0b11 & imm_5=0 & D5 {
    	_stub();
    }

    :D5"&=asr(" S5 "," T5 ")" is imm_22_27=0b110001 & imm_21=0 & S5 & imm_13=0 & T5 & imm_6_7=0b00 & imm_5=0 & D5 {
    	local EA:4 = S5 s>> T5;
	D5 = D5 & EA;
    }
    :D5"&=lsr(" S5 "," T5 ")" is imm_22_27=0b110001 & imm_21=0 & S5 & imm_13=0 & T5 & imm_6_7=0b01 & imm_5=0 & D5 {
    	local EA:4 = S5 >> T5;
	D5 = D5 & EA;
    }
    :D5"&=asl(" S5 "," T5 ")" is imm_22_27=0b110001 & imm_21=0 & S5 & imm_13=0 & T5 & imm_6_7=0b10 & imm_5=0 & D5 {
    	local EA:4 = S5 << T5;
	D5 = D5 & EA;
    }
    :"rx&=lsl(rs,rt)" is imm_22_27=0b110001 & imm_21=0 & S5 & imm_13=0 & T5 & imm_6_7=0b11 & imm_5=0 & D5 {
    	_stub();
    }
}

# XTYPE/SHIFT:Shift by reg sat
with slot: iclass=0b1100 {
    :"shrregsat" is imm_22_27=0b011000 & imm_21=0 & S5 & imm_13=0 & imm_8_12 & imm_6_7=0b00 & imm_5=0 & D5 {
    	_stub();
    }
    :"aslsat" is imm_22_27=0b011000 & imm_21=0 & S5 & imm_13=0 & imm_8_12 & imm_6_7=0b10 & imm_5=0 & D5 {
    	_stub();
    }
}

# XTYPE/SHIFT:Vec shift hw imm
with slot: iclass=0b1000 {
    :"vshhwim0" is imm_21_27=0b0000100 & S5 & imm_12_13=0b00 & imm_8_11 & imm_5_7=0b000 & D5 {
    	_stub();
    }
    :"vshhwim1" is imm_21_27=0b0000100 & S5 & imm_12_13=0b00 & imm_8_11 & imm_5_7=0b001 & D5 {
    	_stub();
    }
    :"vshhwim2" is imm_21_27=0b0000100 & S5 & imm_12_13=0b00 & imm_8_11 & imm_5_7=0b010 & D5 {
    	_stub();
    }
}

# XTYPE/SHIFT:Vec ath shift hw imm
with slot: iclass=0b1000 {
    :"vathshwim" is imm_21_27=0b0000001 & S5 & imm_12_13=0b00 & imm_8_11 & imm_5_7=0b000 & D5 {
    	_stub();
    }
}

# XTYPE/SHIFT:Vec ath shift hw sat pck
with slot: iclass=0b1000 {
    :"vathshwsatpck" is imm_21_27=0b1000011 & S5 & imm_12_13=0b00 & imm_8_11 & imm_5_7=0b100 & D5 {
    	_stub();
    }
    :"vathshwsatpck1" is imm_21_27=0b1000011 & S5 & imm_12_13=0b00 & imm_8_11 & imm_5_7=0b101 & D5 {
    	_stub();
    }
}

# XTYPE/SHIFT:Vec shift hw reg
with slot: iclass=0b1100 {
    :"vashhwreg0" is imm_22_27=0b001101 & imm_21=0 & S5 & imm_13=0 & imm_8_11 & imm_6_7=0b00 & imm_5=0 & D5 {
    	_stub();
    }
    :"vashhwreg1" is imm_22_27=0b001101 & imm_21=0 & S5 & imm_13=0 & imm_8_11 & imm_6_7=0b01 & imm_5=0 & D5 {
    	_stub();
    }

    :"vashhwreg2" is imm_22_27=0b001101 & imm_21=0 & S5 & imm_13=0 & imm_8_11 & imm_6_7=0b10 & imm_5=0 & D5 {
    	_stub();
    }
    :"vashhwreg3" is imm_22_27=0b001101 & imm_21=0 & S5 & imm_13=0 & imm_8_11 & imm_6_7=0b11 & imm_5=0 & D5 {
    	_stub();
    }
}

# XTYPE/SHIFT:Vec shift hw imm
with slot: iclass=0b1000 {
    :"vasrw" is imm_21_27=0b0000010 & S5 & imm_13=0 & imm_8_12 & imm_5_7=0b000 & D5 {
    	_stub();
    }
    :"vlsrw" is imm_21_27=0b0000010 & S5 & imm_13=0 & imm_8_12 & imm_5_7=0b001 & D5 {
    	_stub();
    }
    :"vaslw" is imm_21_27=0b0000010 & S5 & imm_13=0 & imm_8_12 & imm_5_7=0b010 & D5 {
    	_stub();
    }
}


# XTYPE/SHIFT:Vec shift w reg
with slot: iclass=0b1100 {
    :"vashwreg0" is imm_22_27=0b001100 & imm_21=0 & S5 & imm_13=0 & imm_8_11 & imm_6_7=0b00 & imm_5=0 & D5 {
    	_stub();
    }
    :"vashwreg1" is imm_22_27=0b001100 & imm_21=0 & S5 & imm_13=0 & imm_8_11 & imm_6_7=0b01 & imm_5=0 & D5 {
    	_stub();
    }

    :"vashwreg2" is imm_22_27=0b001100 & imm_21=0 & S5 & imm_13=0 & imm_8_11 & imm_6_7=0b10 & imm_5=0 & D5 {
    	_stub();
    }
    :"vashwreg3" is imm_22_27=0b001100 & imm_21=0 & S5 & imm_13=0 & imm_8_11 & imm_6_7=0b11 & imm_5=0 & D5 {
    	_stub();
    }
}


# XTYPE/SHIFT:Vec shift hw tunc
with slot: iclass=0b1000 {
    :"vshhwt0" is imm_21_27=0b1000110 & S5 & imm_13=0 & imm_8_12 & imm_5_7=0b010 & D5 {
    	_stub();
    }
    :"vshhwt1" is imm_24_27=0b0101 & imm_21_23=0 & S5 & imm_13=0 & imm_8_12 & imm_5_7=0b010 & D5 {
    	_stub();
    }
}

L1L:immdup0_D4 "=memw(" immdup0_S4 "+" v ")" is immdup0_12=0 & immdup0_8_11 & immdup0_S4 & immdup0_D4 [v = immdup0_8_11 << 2;]{
	local EA:4 = immdup0_S4 + v;
	immdup0_D4 = *[ram]:4 EA;
}
L1R:immdup1_D4 "=memw(" immdup1_S4 "+" v ")" is immdup1_12=0 & immdup1_8_11 & immdup1_S4 & immdup1_D4 [v = immdup1_8_11 << 2;]{
	local EA:4 = immdup1_S4 + v;
	immdup1_D4 = *[ram]:4 EA;
}

L1L:immdup0_D4 "=memub(" immdup0_S4 "+" immdup0_8_11 ")" is immdup0_12=1 & immdup0_8_11 & immdup0_S4 & immdup0_D4 {
	local EA:4 = immdup0_S4 + immdup0_8_11;
	immdup0_D4 = *[ram]:1 EA;
}
L1R:immdup1_D4 "=memub(" immdup1_S4 "+" immdup1_8_11 ")" is immdup1_12=1 & immdup1_8_11 & immdup1_S4 & immdup1_D4 {
	local EA:4 = immdup1_S4 + immdup1_8_11;
	immdup1_D4 = *[ram]:1 EA;
}

# Duplex/S1
S1L:"memw(" immdup0_S4 "+" v ")=" immdup0_D4 is immdup0_12=0 & immdup0_8_11 & immdup0_S4 & immdup0_D4 [v = immdup0_8_11 << 2;]{
	local EA:4 = immdup0_S4 + v;
	*[ram]:4 EA = immdup0_D4;
}
S1R:"memw(" immdup1_S4 "+" v ")=" immdup1_D4 is immdup1_12=0 & immdup1_8_11 & immdup1_S4 & immdup1_D4 [v = immdup1_8_11 << 2;]{
	local EA:4 = immdup1_S4 + v;
	*[ram]:4 EA = immdup1_D4;
}

S1L:"memb("immdup0_S4 "+" immdup0_8_11 ")=" immdup0_D4 is immdup0_12=1 & immdup0_8_11 & immdup0_S4 & immdup0_D4 {
	local EA:4 = immdup0_S4 + immdup0_8_11;
	*[ram]:1 EA = immdup0_D4;
}
S1R:"memb("immdup1_S4 "+" immdup1_8_11 ")=" immdup1_D4 is immdup1_12=1 & immdup1_8_11 & immdup1_S4 & immdup1_D4 {
	local EA:4 = immdup1_S4 + immdup1_8_11;
	*[ram]:1 EA = immdup1_D4;
}

 #Duplex/L2 
L2L:immdup0_D4 "=memh(" immdup0_S4 "+" v ")" is immdup0_11_12=0b00 & immdup0_8_10 & immdup0_S4 & immdup0_D4 [v = immdup0_8_10 << 1;] {
	local EA:4 = immdup0_S4 + v;
	immdup0_D4 = *[ram]:2 EA;
}
L2R:immdup1_D4 "=memh(" immdup1_S4 "+" v ")" is immdup1_11_12=0b00 & immdup1_8_10 & immdup1_S4 & immdup1_D4 [v = immdup1_8_10 << 1;]{
	local EA:4 = immdup1_S4 + v;
	immdup1_D4 = *[ram]:2 EA;
}

L2L:immdup0_D4 "=memuh(" immdup0_S4 "+" v ")" is immdup0_11_12=0b01 & immdup0_8_10 & immdup0_S4 & immdup0_D4 [v = immdup0_8_10 << 1;] {
	local EA:4 = immdup0_S4 + v;
	immdup0_D4 = *[ram]:2 EA;
}
L2R:immdup1_D4 "=memuh(" immdup1_S4 "+" v ")" is immdup1_11_12=0b01 & immdup1_8_10 & immdup1_S4 & immdup1_D4 [v = immdup1_8_10 << 1;]{
	local EA:4 = immdup1_S4 + v;
	immdup1_D4 = *[ram]:2 EA;
}


L2L:immdup0_D4 "=memb(" immdup0_S4 "+" v ")" is immdup0_11_12=0b10 & immdup0_8_10 & immdup0_S4 & immdup0_D4 [v = immdup0_8_10 << 1;] {
	local EA:4 = immdup0_S4 + v;
	immdup0_D4 = *[ram]:1 EA;
}
L2R:immdup1_D4 "=memb(" immdup1_S4 "+" v ")" is immdup1_11_12=0b10 & immdup1_8_10 & immdup1_S4 & immdup1_D4 [v = immdup1_8_10 << 1;]{
	local EA:4 = immdup1_S4 + v;
	immdup1_D4 = *[ram]:1 EA;
}

L2L:immdup0_D4 "=memw(SP+" v ")" is immdup0_9_12=0b1110 & immdup0_4_8 & immdup0_D4 [v = immdup0_4_8 << 2;]{
	local EA:4 = SP + v;
	immdup0_D4 = *[ram]:4 EA;
}
L2R:immdup1_D4 "=memw(SP+" v ")" is immdup1_9_12=0b1110 & immdup1_4_8 & immdup1_D4 [v = immdup1_4_8 << 2;] {
	local EA:4 = SP + v;
	immdup1_D4 = *[ram]:4 EA;
}

L2L:immdup0_D3_pair "=memd(SP+" v ")" is immdup0_8_12=0b11110 & immdup0_3_7 & immdup0_D3_pair [v = immdup0_3_7 << 3;] {
	local EA:4 = SP + v;
	immdup0_D3_pair = *[ram]:8 EA;
}
L2R:immdup1_D3_pair "=memd(SP+" v ")" is immdup1_8_12=0b11110 & immdup1_3_7 & immdup1_D3_pair [v = immdup1_3_7 << 3;] {
	local EA:4 = SP + v;
	immdup1_D3_pair = *[ram]:8 EA;
}

L2L:"deallocframe" is immdup0_6_12=0b1111100 & immdup0_3_5=0 & immdup0_2=0 & immdup0_0_1=0 {
	local EA:4 = FP;
        local tmp:8 = *[ram]:8 EA;
        FPLR = tmp;
        SP=EA+8;
}
L2R:"deallocframe" is immdup1_6_12=0b1111100 & immdup1_3_5=0 & immdup1_2=0 & immdup1_0_1=0 {
	local EA:4 = FP;
        local tmp:8 = *[ram]:8 EA;
        FPLR = tmp;
        SP=EA+8;
}

L2L:"dealloc_return" is immdup0_6_12=0b1111101 & immdup0_3_5=0 & immdup0_2=0 & immdup0_0_1=0 {
        local EA:4 = FP;
        local tmp:8 = *[ram]:8 EA;
        LRFP = tmp;

        local tmp2:8 = tmp>>32;
        local tmp3:4 = tmp2:4;

        SP = EA+8;
#TODO
        return [tmp3];
}
L2R:"dealloc_return" is immdup1_6_12=0b1111101 & immdup1_3_5=0 & immdup1_2=0 & immdup1_0_1=0 {
        local EA:4 = FP;
        local tmp:8 = *[ram]:8 EA;
        LRFP = tmp;

        local tmp2:8 = tmp>>32;
        local tmp3:4 = tmp2:4;

        SP = EA+8;
#TODO
        return [tmp3];
}

L2L:"ret_t" is immdup0_6_12=0b1111101 & immdup0_3_5=0 & immdup0_0_2=0b100 {
_stub();
}
L2R:"ret_t" is immdup1_6_12=0b1111101 & immdup1_3_5=0 & immdup1_0_2=0b100 {
_stub();
}

L2L:"ret_f" is immdup0_6_12=0b1111101 & immdup0_3_5=0 & immdup0_0_2=0b101 {
_stub();
}
L2R:"ret_f" is immdup1_6_12=0b1111101 & immdup1_3_5=0 & immdup1_0_2=0b101 {
_stub();
}

L2L:"ret_tnew" is immdup0_6_12=0b1111101 & immdup0_3_5=0 & immdup0_0_2=0b110 {
_stub();
}
L2R:"ret_tnew" is immdup1_6_12=0b1111101 & immdup1_3_5=0 & immdup1_0_2=0b110 {
_stub();
}

L2L:"ret_fnew" is immdup0_6_12=0b1111101 & immdup0_3_5=0 & immdup0_0_2=0b111 {
_stub();
}
L2R:"ret_fnew" is immdup1_6_12=0b1111101 & immdup1_3_5=0 & immdup1_0_2=0b111 {
_stub();
}

L2L:"jumpr LR" is immdup0_6_12=0b1111111 & immdup0_3_5=0 & immdup0_2=0 & immdup0_0_1=0 {
	return();
}
L2R:"jumpr LR" is immdup1_6_12=0b1111111 & immdup1_3_5=0 & immdup1_2=0 & immdup1_0_1=0 {
	return();
}
L2L:"if(p0) jumpr:nt LR" is immdup0_6_12=0b1111111 & immdup0_3_5=0 & immdup0_0_2=0b100 {
	if(P0 == 0) goto <end>;
	return();
	<end>
}
L2R:"if(p0) jumpr:nt LR" is immdup1_6_12=0b1111111 & immdup1_3_5=0 & immdup1_0_2=0b100 {
	if(P0 == 0) goto <end>;
	return();
	<end>
}
L2L:"if(!p0) jumpr:nt LR" is immdup0_6_12=0b1111111 & immdup0_3_5=0 & immdup0_0_2=0b101 {
	if(P0 != 0) goto <end>;
	return();
	<end>
}
L2R:"if(!p0) jumpr:nt LR" is immdup1_6_12=0b1111111 & immdup1_3_5=0 & immdup1_0_2=0b101 {
	if(P0 != 0) goto <end>;
	return();
	<end>
}

L2L:"if(p0.new) jumpr:nt LR" is immdup0_6_12=0b1111111 & immdup0_3_5=0 & immdup0_0_2=0b110 {
	if(P0.new == 0) goto <end>;
	return();
	<end>
}
L2R:"if(p0.new) jumpr:nt LR" is immdup1_6_12=0b1111111 & immdup1_3_5=0 & immdup1_0_2=0b110 {
	if(P0.new == 0) goto <end>;
	return();
	<end>
}
L2L:"if(!p0.new) jumpr:nt LR" is immdup0_6_12=0b1111111 & immdup0_3_5=0 & immdup0_0_2=0b111 {
	if(P0.new != 0) goto <end>;
	return();
	<end>
}
L2R:"if(!p0.new) jumpr:nt LR" is immdup1_6_12=0b1111111 & immdup1_3_5=0 & immdup1_0_2=0b111 {
	if(P0.new != 0) goto <end>;
	return();
	<end>
}


# Duplex/S2
S2L:immdup0_D4 "=memh(" immdup0_S4 "+" v ")" is immdup0_11_12=0b00 & immdup0_8_10 & immdup0_S4 & immdup0_D4 [ v = immdup0_8_10 << 1; ] {
    local EA:4 = immdup0_S4 + v;
    immdup0_D4 = *[ram]:2 EA;
}
S2R:immdup1_D4 "=memh(" immdup1_S4 "+" v ")" is immdup1_11_12=0b00 & immdup1_8_10 & immdup1_S4 & immdup1_D4 [ v = immdup1_8_10 << 1; ] {
    local EA:4 = immdup1_S4 + v;
    immdup1_D4 = *[ram]:2 EA;
}

S2L:"memw(SP+" a ") =" immdup0_D4 is immdup0_9_12=0b0100 & immdup0_4_8 & immdup0_D4 [a = immdup0_4_8 << 2;]{
	local EA:4 = SP + a;
	*[ram]:4 EA = immdup0_D4;
}
S2R:"memw(SP+" a ") =" immdup1_D4 is immdup1_9_12=0b0100 & immdup1_4_8 & immdup1_D4 [a = immdup1_4_8 << 2;]{
	local EA:4 = SP + a;
	*[ram]:4 EA = immdup1_D4;
}

S2L:"memd(SP+" a ") =" immdup0_D3_pair is immdup0_9_12=0b0101 & immdup0_3_8 & immdup0_D3_pair [a = immdup0_3_8 << 3;]{
	local EA:4 = SP + a;
	*[ram]:8 EA = immdup0_D3_pair;
}
S2R:"memd(SP+" a ") =" immdup1_D3_pair is immdup1_9_12=0b0101 & immdup1_3_8 & immdup1_D3_pair [a = immdup1_3_8 << 3;]{
	local EA:4 = SP + a;
	*[ram]:8 EA = immdup1_D3_pair;
}

S2L:"memw(" immdup0_S4 "+"v ") = 0" is immdup0_8_12=0b10000 & immdup0_S4 & immdup0_0_3 [v = immdup0_0_3 << 2;] {
	local EA:4 = immdup0_S4 + v;
	*[ram]:4 EA = 0;
}
S2R:"memw(" immdup1_S4 "+"v ") = 0" is immdup1_8_12=0b10000 & immdup1_S4 & immdup1_0_3 [v = immdup1_0_3 << 2;] {
	local EA:4 = immdup1_S4 + v;
	*[ram]:4 EA = 0;
}

S2L:"memw(" immdup0_S4 "+"v ") = 1" is immdup0_8_12=0b10001 & immdup0_S4 & immdup0_0_3 [v = immdup0_0_3 << 2;] {
	local EA:4 = immdup0_S4 + v;
	*[ram]:4 EA = 1;
}
S2R:"memw(" immdup1_S4 "+"v ") = 1" is immdup1_8_12=0b10001 & immdup1_S4 & immdup1_0_3 [v = immdup1_0_3 << 2;] {
	local EA:4 = immdup1_S4 + v;
	*[ram]:4 EA = 1;
}

S2L:"memb(" immdup0_S4 "+" immdup0_0_3 ") = 0" is immdup0_8_12=0b10010 & immdup0_S4 & immdup0_0_3 {
	local EA:4 = immdup0_S4 +  immdup0_0_3;
	*[ram]:1 EA = 0;
}
S2R:"memb(" immdup1_S4 "+" immdup1_0_3 ") = 0" is immdup1_8_12=0b10010 & immdup1_S4 & immdup1_0_3  {
	local EA:4 = immdup1_S4 +  immdup1_0_3;
	*[ram]:1 EA = 0;
}

S2L:"memb(" immdup0_S4 "+" immdup0_0_3 ") = 1" is immdup0_8_12=0b10011 & immdup0_S4 & immdup0_0_3 {
	local EA:4 = immdup0_S4 + immdup0_0_3;
	*[ram]:1 EA = 1;
}
S2R:"memb(" immdup1_S4 "+" immdup1_0_3 ") = 1" is immdup1_8_12=0b10011 & immdup1_S4 & immdup1_0_3 {
	local EA:4 = immdup1_S4 + immdup1_0_3;
	*[ram]:1 EA = 1;
}

S2L:"allocframe("v")" is immdup0_9_12=0b1110 & immdup0_4_8 & immdup0_0_3=0 [v = immdup0_4_8 << 3;] {
        local EA:4 = SP - 8;
        *[ram]:8 EA = LRFP;
        FP = EA;
        SP = EA - v;
}
S2R:"allocframe("v")" is immdup1_9_12=0b1110 & immdup1_4_8 & immdup1_0_3=0 [v = immdup1_4_8 << 3;]{
        local EA:4 = SP - 8;
        *[ram]:8 EA = LRFP;
        FP = EA;
        SP = EA - v;
}


# Duplex/A
A1L:immdup0_D4 "=add(self," immdup0_4_10 ")" is immdup0_11_12=0b00 & immdup0_4_10 & immdup0_D4 {
	immdup0_D4 = immdup0_D4 + immdup0_4_10;
}
A1R:immdup1_D4 "=add(self," immdup1_4_10 ")" is immdup1_11_12=0b00 & immdup1_4_10 & immdup1_D4 {
	immdup1_D4 = immdup1_D4 + immdup1_4_10;
}

# seti
A1L:immdup0_D4"="immdup0_4_9 is immdup0_10_12=0b010 & immdup0_4_9 & immdup0_D4 {
    immdup0_D4 = immdup0_4_9;
}
A1R:immdup1_D4"="immdup1_4_9 is immdup1_10_12=0b010 & immdup1_4_9 & immdup1_D4 & hasext0=0 {
    immdup1_D4 = immdup1_4_9;
}
A1R:immdup1_D4"="v is immdup1_10_12=0b010 & immdup1_4_9 & immdup1_D4 & hasext0=1 & immext0used=0 [v = immdup1_4_9 | immext0; immext0used=1;] {
    immdup1_D4 = v;
}

A1L:immdup0_D4"=add(SP, " v ")" is immdup0_10_12=0b011 & immdup0_4_9 & immdup0_D4 [v = immdup0_4_9 << 2; ]{
    immdup0_D4 = SP + v;
}
A1R:immdup1_D4"=add(SP, " v ")" is immdup1_10_12=0b011 & immdup1_4_9 & immdup1_D4 [v = immdup1_4_9 << 2; ]{
    immdup1_D4 = SP + v;
}

# tfr
A1L:immdup0_D4 "=" immdup0_S4 is immdup0_8_12=0b10000 & immdup0_S4 & immdup0_D4 {
    immdup0_D4 = immdup0_S4;
}
A1R:immdup1_D4 "=" immdup1_S4 is immdup1_8_12=0b10000 & immdup1_S4 & immdup1_D4 {
    immdup1_D4 = immdup1_S4;
}

#inc
A1L:immdup0_D4 "=add("immdup0_S4",1)"  is immdup0_8_12=0b10001 & immdup0_S4 & immdup0_D4 {
    immdup0_D4 = immdup0_S4 + 1;
}
A1R:immdup1_D4 "=add("immdup1_S4",1)"  is immdup1_8_12=0b10001 & immdup1_S4 & immdup1_D4 {
    immdup1_D4 = immdup1_S4 + 1;
}

A1L:immdup0_D4 "=and("immdup0_S4",1)"  is immdup0_8_12=0b10010 & immdup0_S4 & immdup0_D4 {
    immdup0_D4 = immdup0_S4 & 1;
}
A1R:immdup1_D4 "=and("immdup1_S4",1)"  is immdup1_8_12=0b10010 & immdup1_S4 & immdup1_D4 {
    immdup1_D4 = immdup1_S4 & 1;
}

A1L:immdup0_D4 "=sub(" immdup0_S4 ",1)" is immdup0_8_12=0b10011 & immdup0_S4 & immdup0_D4 {
	immdup0_D4 = immdup0_S4 - 1;
}
A1R:immdup1_D4 "=sub(" immdup1_S4 ",1)" is immdup1_8_12=0b10011 & immdup1_S4 & immdup1_D4 {
	immdup1_D4 = immdup1_S4 - 1;
}

A1L:immdup0_D4"=sxth(" immdup0_S4 ")" is immdup0_8_12=0b10100 & immdup0_S4 & immdup0_D4 {
	immdup0_D4 = sext(immdup0_S4:2);
}
A1R:immdup1_D4"=sxth(" immdup1_S4 ")" is immdup1_8_12=0b10100 & immdup1_S4 & immdup1_D4 {
	immdup1_D4 = sext(immdup1_S4:2);
}

A1L:immdup0_D4"=sxtb(" immdup0_S4 ")" is immdup0_8_12=0b10101 & immdup0_S4 & immdup0_D4 {
	immdup0_D4 = sext(immdup0_S4:1);
}
A1R:immdup1_D4"=sxtb(" immdup1_S4 ")" is immdup1_8_12=0b10101 & immdup1_S4 & immdup1_D4 {
	immdup1_D4 = sext(immdup1_S4:1);
}





A1L:immdup0_D4"=zxth(" immdup0_S4 ")" is immdup0_8_12=0b10110 & immdup0_S4 & immdup0_D4 {
	immdup0_D4 = zext(immdup0_S4:2);
}
A1R:immdup1_D4"=zxth(" immdup1_S4 ")" is immdup1_8_12=0b10110 & immdup1_S4 & immdup1_D4 {
	immdup1_D4 = zext(immdup1_S4:2);
}

A1L:immdup0_D4"=zxtb(" immdup0_S4 ")" is immdup0_8_12=0b10111 & immdup0_S4 & immdup0_D4 {
	immdup0_D4 = zext(immdup0_S4:1);
}
A1R:immdup1_D4"=zxtb(" immdup1_S4 ")" is immdup1_8_12=0b10111 & immdup1_S4 & immdup1_D4 {
	immdup1_D4 = zext(immdup1_S4:1);
}

A1L:immdup0_D4 "=add(self," immdup0_S4 ")" is immdup0_8_12=0b11000 & immdup0_S4 & immdup0_D4 {
	immdup0_D4 = immdup0_D4 + immdup0_S4;	
}
A1R:immdup1_D4 "=add(self," immdup1_S4 ")" is immdup1_8_12=0b11000 & immdup1_S4 & immdup1_D4 {
	immdup1_D4 = immdup1_D4 + immdup1_S4;	
}


A1L:"p0 = cmp.eq(" immdup0_S4 "," immdup0_0_1 ")" is immdup0_8_12=0b11001 & immdup0_S4 & immdup0_2_3=0 & immdup0_0_1 {
	if(immdup0_S4 != immdup0_0_1) goto <bad>;
	P0.new = PTRUE;
	goto <end>;
	<bad>
	P0.new = 0;
	<end>
}
A1R:"p0 = cmp.eq(" immdup1_S4 "," immdup1_0_1 ")" is immdup1_8_12=0b11001 & immdup1_S4 & immdup1_2_3=0 & immdup1_0_1 {
	if(immdup1_S4 != immdup1_0_1) goto <bad>;
	P0.new = PTRUE;
	goto <end>;
	<bad>
	P0.new = 0;
	<end>
}

A1L:immdup0_D4 "= -1" is immdup0_9_12=0b1101 & immdup0_7_8=0 & immdup0_6=0 & immdup0_4_5=0 & immdup0_D4 {
	immdup0_D4 = -1;
}
A1R:immdup1_D4 "= -1" is immdup1_9_12=0b1101 & immdup1_7_8=0 & immdup1_6=0 & immdup1_4_5=0 & immdup1_D4 {
	immdup1_D4 = -1;
}

A1L:"if(P0.new) " immdup0_D4 "= 0" is immdup0_9_12=0b1101 & immdup0_7_8=0 & immdup0_4_6=0b100 & immdup0_D4 {
	if(P0.new == 0) goto <end>;
		immdup0_D4 = 0;
	<end>
}
A1R:"if(P0.new) " immdup1_D4 "= 0" is immdup1_9_12=0b1101 & immdup1_7_8=0 & immdup1_4_6=0b100 & immdup1_D4 {
	if(P0.new == 0) goto <end>;
		immdup1_D4 = 0;
	<end>
}

A1L:"if(!P0.new) " immdup0_D4 "= 0" is immdup0_9_12=0b1101 & immdup0_7_8=0 & immdup0_4_6=0b101 & immdup0_D4 {
	if(P0.new != 0) goto <end>;
		immdup0_D4 = 0;
	<end>
}
A1R:"if(!P0.new) " immdup1_D4 "= 0" is immdup1_9_12=0b1101 & immdup1_7_8=0 & immdup1_4_6=0b101 & immdup1_D4 {
	if(P0.new != 0) goto <end>;
		immdup1_D4 = 0;
	<end>
}

A1L:"if(P0) " immdup0_D4 "= 0" is immdup0_9_12=0b1101 & immdup0_7_8=0 & immdup0_4_6=0b110 & immdup0_D4 {
	if(P0 == 0) goto <end>;
		immdup0_D4 = 0;
	<end>
}
A1R:"if(P0) " immdup1_D4 "= 0" is immdup1_9_12=0b1101 & immdup1_7_8=0 & immdup1_4_6=0b110 & immdup1_D4 {
	if(P0 == 0) goto <end>;
		immdup1_D4 = 0;
	<end>
}

A1L:"if(!P0) " immdup0_D4 "= 0" is immdup0_9_12=0b1101 & immdup0_7_8=0 & immdup0_4_6=0b111 & immdup0_D4 {
	if(P0 != 0) goto <end>;
		immdup0_D4 = 0;
	<end>
}
A1R:"if(!P0) " immdup1_D4 "= 0" is immdup1_9_12=0b1101 & immdup1_7_8=0 & immdup1_4_6=0b111 & immdup1_D4 {
	if(P0 != 0) goto <end>;
		immdup1_D4 = 0;
	<end>
}

A1L:immdup0_D4_pair "= combine(0," immdup0_5_6 ")" is immdup0_10_12=0b111 & immdup0_9=0 & immdup0_8=0 & immdup0_7=0 & immdup0_5_6 & immdup0_3_4=0b00 & immdup0_D4_pair {
        immdup0_D4_pair = (immdup0_5_6 << 32);
}
A1R:immdup1_D4_pair  "= combine(0," immdup1_5_6 ")" is immdup1_10_12=0b111 & immdup1_9=0 & immdup1_8=0 & immdup1_7=0 & immdup1_5_6 & immdup1_3_4=0b00 & immdup1_D4_pair {
        immdup1_D4_pair = (immdup1_5_6 << 32);
}

A1L:immdup0_D3_pair "=combine(1," immdup0_5_6 ")" is immdup0_10_12=0b111 & immdup0_9=0 & immdup0_8=0 & immdup0_7=0 & immdup0_5_6 & immdup0_3_4=0b01 & immdup0_D3_pair {
	immdup0_D3_pair = 1 | (immdup0_5_6 << 32);
}
A1R:immdup1_D3_pair "=combine(1," immdup1_5_6 ")" is immdup1_10_12=0b111 & immdup1_9=0 & immdup1_8=0 & immdup1_7=0 & immdup1_5_6 & immdup1_3_4=0b01 & immdup1_D3_pair {
	immdup1_D3_pair = 1 | (immdup1_5_6 << 32);
}

A1L:immdup0_D3_pair "=combine(2," immdup0_5_6 ")" is immdup0_10_12=0b111 & immdup0_9=0 & immdup0_8=0 & immdup0_7=0 & immdup0_5_6 & immdup0_3_4=0b10 & immdup0_D3_pair {
	immdup0_D3_pair = 2 | (immdup0_5_6 << 32);
}
A1R:immdup1_D3_pair "=combine(2," immdup1_5_6 ")" is immdup1_10_12=0b111 & immdup1_9=0 & immdup1_8=0 & immdup1_7=0 & immdup1_5_6 & immdup1_3_4=0b10 & immdup1_D3_pair {
	immdup1_D3_pair = 2 | (immdup1_5_6 << 32);
}

A1L:immdup0_D3_pair "=combine(3," immdup0_5_6 ")" is immdup0_10_12=0b111 & immdup0_9=0 & immdup0_8=0 & immdup0_7=0 & immdup0_5_6 & immdup0_3_4=0b11 & immdup0_D3_pair {
	immdup0_D3_pair = 3 | (immdup0_5_6 << 32);
}
A1R:immdup1_D3_pair "=combine(3," immdup1_5_6 ")" is immdup1_10_12=0b111 & immdup1_9=0 & immdup1_8=0 & immdup1_7=0 & immdup1_5_6 & immdup1_3_4=0b11 & immdup1_D3_pair {
	immdup1_D3_pair = 3 | (immdup1_5_6 << 32);
}

A1L:immdup0_D3_pair "=combine(0," immdup0_S4 ")" is immdup0_10_12=0b111 & immdup0_9=0 & immdup0_8=1 & immdup0_S4 & immdup0_3=0 & immdup0_D3_pair {
	immdup0_D3_pair = zext(immdup0_S4);
	immdup0_D3_pair = immdup0_D3_pair << 32;
}
A1R:immdup1_D3_pair "=combine(0," immdup1_S4 ")" is immdup1_10_12=0b111 & immdup1_9=0 & immdup1_8=1 & immdup1_S4 & immdup1_3=0 & immdup1_D3_pair {
	immdup1_D3_pair = zext(immdup1_S4);
	immdup1_D3_pair = immdup1_D3_pair << 32;
}

A1L:immdup0_D3_pair "=combine(" immdup0_S4 ", 0)" is immdup0_10_12=0b111 & immdup0_9=0 & immdup0_8=1 & immdup0_S4 & immdup0_3=1 & immdup0_D3_pair {
	immdup0_D3_pair = zext(immdup0_S4);
}
A1R:immdup1_D3_pair "=combine(" immdup1_S4 ", 0)" is immdup1_10_12=0b111 & immdup1_9=0 & immdup1_8=1 & immdup1_S4 & immdup1_3=1 & immdup1_D3_pair {
	immdup1_D3_pair = zext(immdup1_S4);
}


duplex:"{{"L1R", "L1L"}}" is imm_29_31=0b000 & imm_13=0  & L1L & L1R  {
	build L1R;
	build L1L;
}
duplex:"{{"L1R", "L2L"}}" is imm_29_31=0b000 & imm_13=1 & L2L & L1R {
    build L1R;
    build L2L;
}
duplex:"{{"L2R", "L2L"}}" is imm_29_31=0b001 & imm_13=0 & L2L & L2R {
	build L2R;
	build L2L;
}
duplex:"{{"A1R", "A1L"}}" is imm_29_31=0b001 & imm_13=1 & A1L & A1R {
	build A1L;
	build A1R;
}
duplex:"{{"L1L "," A1R "}}" is imm_29_31=0b010 & imm_13=0 & A1R & L1L {
	build L1L;
	build A1R;
}
duplex:"{{"A1R", "L2L"}}" is imm_29_31=0b010 & imm_13=1 & A1R & L2L {
	build L2L;
	build A1R;
}
duplex:"{{"A1R", "S1L"}}" is imm_29_31=0b011 & imm_13=0 & A1R & S1L {
	build S1L;
	build A1R;
}
duplex:"{{"A1R", "S2L"}}" is imm_29_31=0b011 & imm_13=1 & A1R & S2L {
	build S2L;
	build A1R;
}
duplex:"{{"L1R", "S1L"}}" is imm_29_31=0b100 & imm_13=0 & L1R & S1L {
	build S1L;
	build L1R;
}
duplex:"{{"L2R", "S1L"}}" is imm_29_31=0b100 & imm_13=1 & L2R & S1L {
	build S1L;
	build L2R;
}
duplex:"{{"S1R", "S1L"}}" is imm_29_31=0b101 & imm_13=0 & S1R & S1L {
	build S1L;
	build S1R;
}
duplex:"{{"S1R", "S2L"}}" is imm_29_31=0b101 & imm_13=1 & S1R & S2L {
	build S2L;
	build S1R;
}
duplex:"{{"L1R", "S2L"}}" is imm_29_31=0b110 & imm_13=0 & L1R & S2L {
	build S2L;
	build L1R;
}
duplex:"{{"L2R", "S2L"}}" is imm_29_31=0b110 & imm_13=1 & L2R & S2L {
	build S2L;
	build L2R;
}
duplex:"{{"S2R", "S2L"}}" is imm_29_31=0b111 & imm_13=0 & S2R & S2L {
	build S2L;
	build S2R;
}
duplex:"duplex_0xf_reserved" is imm_29_31=0b111 & imm_13=1 {_stub();}


macro prelude() {
    branch_tgt = 0;
    has_branch_tgt = 0;
    call_tgt = 0;
    has_call_tgt = 0;
    ret_tgt = 0;
    has_ret_tgt = 0;

    # TODO: this is a readonly value
    PC = inst_start;

    #TODO: this is a HORRIFIC hack
    # when a predicate is set to true it should be = 0xFF but ghidra can't recognise that a condition is constant if the true condition isn't either 1 or a power of 2?????
    # When ghidra works, remove this and replace with constant FF everywhere
    PTRUE = 1;


    P0.new =P0;
    P1.new =P1;
    P2.new =P2;
    P3.new =P3;

}
macro prolude() {
    P0 =P0.new;
    P1 =P1.new;
    P2 =P2.new;
    P3 =P3.new;

    if(has_branch_tgt == 0) goto <skipj>;
    local branch_tgt_2:4 = branch_tgt;
    goto [branch_tgt_2];
    <skipj>

    if(has_call_tgt == 0) goto <skipc>;
    local call_tgt_2 = call_tgt;
    call [call_tgt_2];
    <skipc>

    if(has_ret_tgt == 0) goto <skipr>;
    local return_tgt:4 = ret_tgt;
    return [return_tgt];
    <skipr>

}



#      :{ duplex is duplex & parse=0b00 {
#          build duplex;
#      }
#      :{ slot is slot & parse!=0b00{
#          build slot;
#      }

define pcodeop missing_ext;
terminator:"" is disabled {}
terminator:"" is disabled & hasext0=1 & immext0used=0 {
missing_ext();
}
terminator:"" is disabled & hasext0=1 & immext0used=1 {
}

slot0: slot is slot &  (parse=0b01 | parse=0b10) & iclass { build slot; }
slot1: slot0 is slot0 {  build slot0; }
slot2: slot0 is slot0 { build slot0; }
slotX: slot is slot & parse=0b11 { build slot; prolude(); }
slotX: duplex is duplex & parse=0b00 { build duplex; prolude();}

    :{ slot0 slotX "}:endloop0" is slot0 & parse=0b10; slotX & terminator {
        prelude();
        build slot0;
       build slotX;
       if(LC0 <= 1) goto <end>;
       LC0 = LC0 - 1;
       goto [SA0];
       <end> 

       build terminator; 
   }
   :{ slot0 slotX } is slot0 & parse=0b01;slotX & terminator {
	
       prelude();
       build slot0;
       build slotX;
       build terminator; 
   }

   :{ slot0 slot1 slotX } is slot0;slot1;slotX & terminator {
       prelude();
       build slot0;
       build slot1;
       build slotX;
       build terminator; 
   }
   :{ slot0 slot1 slot2 slotX } is slot0;slot1;slot2;slotX & terminator {
       prelude();
       build slot0;
       build slot1;
       build slot2;
       build slotX;
       build terminator; 
   }

   :{ slotX } is slotX & terminator {
       prelude();
       build slotX;
       build terminator; 
   } 

slot:"immext0(" v ")" is iclass=0b0000 & imm_16_27 & imm_0_13u & hasext0=0  [v= ((imm_0_13u) | (imm_16_27 << 14)) << 6; immext0 = ((imm_0_13u) | (imm_16_27 << 14)) << 6; hasext0=1;] { } 
slot:"immext1(" v ")" is iclass=0b0000 & imm_16_27 & imm_0_13u & hasext0=1  [v=((imm_0_13u) | (imm_16_27 << 14)) << 6; immext1 = ((imm_0_13u) | (imm_16_27 << 14)) << 6; hasext1=1;] { } 

#TODO: disabled, switching to ctx for ext
##wslot0:wslot is wslot & iclassw=0b0000 & (parsew=0b01 | parsew=0b10) & (parse64=0b10 | parse64=0b01) & disabled=1 { build wslot; }
#wslotX: wslot is wslot & iclassw=0b0000 & (parsew=0b01 | parsew=0b10) & (parse64=0b11 | parse64=0b00) & disabled=1 { build wslot; prolude(); }
#wslotX: "cursed-ext-duplex" is wslot & iclassw=0b0000 & (parsew=0b01 | parsew=0b10) & parse64=0b00 {
#_stub();
##TODO: man-made horrors beyond comprehension: you can have an extended duplex
##TODO: also wrong, breaks some normal duplexes
##build wslot; prolude();
#}

#:{ wslotX } is wslotX {
    #prelude();
	#build wslotX;
#} 
#
#:{ wslot0 wslotX } is wslot0; wslotX {
    #prelude();
	#build wslot0;
	#build wslotX;
#} 
#
#:{ wslot0 slot0 slotX } is wslot0; slot0; slotX {
    #prelude();
	#build wslot0;
	#build slot0;
	#build slotX;
#} 
#
#:{ wslot0 slotX } is wslot0; slotX {
    #prelude();
	#build wslot0;
	#build slotX;
#} 
#:{ slot0 wslotX } is slot0; wslotX {
    #prelude();
	#build slot0;
	#build wslotX;
#}
#:{ slot0 slot1 wslotX } is slot0; slot1; wslotX {
    #prelude();
	#build slot0;
	#build slot1;
	#build wslotX;
#}
#:{ slot0 wslot0 slotX } is slot0; wslot0; slotX {
    #prelude();
	#build slot0;
	#build wslot0;
	#build slotX;
#}


